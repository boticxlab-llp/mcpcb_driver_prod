
light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006164  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08006224  08006224  00016224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800643c  0800643c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800643c  0800643c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800643c  0800643c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800643c  0800643c  0001643c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006440  08006440  00016440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000014  08006458  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08006458  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d766  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bfe  00000000  00000000  0002d7a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  0002f3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b38  00000000  00000000  0002ff80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f74f  00000000  00000000  00030ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e630  00000000  00000000  00040207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000605ac  00000000  00000000  0004e837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000aede3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ab8  00000000  00000000  000aee34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800620c 	.word	0x0800620c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	0800620c 	.word	0x0800620c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_UART_RxCpltCallback>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

volatile uint8_t int_flag = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  //	printf(Rx_data);
  HAL_UART_Receive_IT(&huart1, Rx_data, 5);
 8000228:	4906      	ldr	r1, [pc, #24]	; (8000244 <HAL_UART_RxCpltCallback+0x24>)
 800022a:	4b07      	ldr	r3, [pc, #28]	; (8000248 <HAL_UART_RxCpltCallback+0x28>)
 800022c:	2205      	movs	r2, #5
 800022e:	0018      	movs	r0, r3
 8000230:	f004 fe82 	bl	8004f38 <HAL_UART_Receive_IT>
  //  memset(Rx_data,0,10);

  int_flag = 1;
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <HAL_UART_RxCpltCallback+0x2c>)
 8000236:	2201      	movs	r2, #1
 8000238:	701a      	strb	r2, [r3, #0]
}
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	46bd      	mov	sp, r7
 800023e:	b002      	add	sp, #8
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	20000168 	.word	0x20000168
 8000248:	200000e0 	.word	0x200000e0
 800024c:	2000016d 	.word	0x2000016d

08000250 <color_steps>:
int res_max;
int res_min;
int step_size_color = 2;

void color_steps(int y)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]

  res_max = (y + 14) + 5 * step_size_color;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	330e      	adds	r3, #14
 800025c:	0019      	movs	r1, r3
 800025e:	4b13      	ldr	r3, [pc, #76]	; (80002ac <color_steps+0x5c>)
 8000260:	681a      	ldr	r2, [r3, #0]
 8000262:	0013      	movs	r3, r2
 8000264:	009b      	lsls	r3, r3, #2
 8000266:	189b      	adds	r3, r3, r2
 8000268:	18ca      	adds	r2, r1, r3
 800026a:	4b11      	ldr	r3, [pc, #68]	; (80002b0 <color_steps+0x60>)
 800026c:	601a      	str	r2, [r3, #0]

  if (res_max > 90)
 800026e:	4b10      	ldr	r3, [pc, #64]	; (80002b0 <color_steps+0x60>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	2b5a      	cmp	r3, #90	; 0x5a
 8000274:	dd02      	ble.n	800027c <color_steps+0x2c>
  {
    res_max = 90;
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <color_steps+0x60>)
 8000278:	225a      	movs	r2, #90	; 0x5a
 800027a:	601a      	str	r2, [r3, #0]
  }

  res_min = (y - 14) - 5 * step_size_color;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	3b0e      	subs	r3, #14
 8000280:	0019      	movs	r1, r3
 8000282:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <color_steps+0x5c>)
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	0013      	movs	r3, r2
 8000288:	079b      	lsls	r3, r3, #30
 800028a:	1a9b      	subs	r3, r3, r2
 800028c:	009b      	lsls	r3, r3, #2
 800028e:	1a9b      	subs	r3, r3, r2
 8000290:	18ca      	adds	r2, r1, r3
 8000292:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <color_steps+0x64>)
 8000294:	601a      	str	r2, [r3, #0]
  if (res_min < 10)
 8000296:	4b07      	ldr	r3, [pc, #28]	; (80002b4 <color_steps+0x64>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2b09      	cmp	r3, #9
 800029c:	dc02      	bgt.n	80002a4 <color_steps+0x54>
  {
    res_min = 10;
 800029e:	4b05      	ldr	r3, [pc, #20]	; (80002b4 <color_steps+0x64>)
 80002a0:	220a      	movs	r2, #10
 80002a2:	601a      	str	r2, [r3, #0]
  }
}
 80002a4:	46c0      	nop			; (mov r8, r8)
 80002a6:	46bd      	mov	sp, r7
 80002a8:	b002      	add	sp, #8
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000004 	.word	0x20000004
 80002b0:	20000170 	.word	0x20000170
 80002b4:	20000174 	.word	0x20000174

080002b8 <glow_prv>:

void glow_prv()
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
  switch (prgm_status)
 80002bc:	4b85      	ldr	r3, [pc, #532]	; (80004d4 <glow_prv+0x21c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2b04      	cmp	r3, #4
 80002c2:	d100      	bne.n	80002c6 <glow_prv+0xe>
 80002c4:	e0ce      	b.n	8000464 <glow_prv+0x1ac>
 80002c6:	dd00      	ble.n	80002ca <glow_prv+0x12>
 80002c8:	e0fe      	b.n	80004c8 <glow_prv+0x210>
 80002ca:	2b03      	cmp	r3, #3
 80002cc:	d100      	bne.n	80002d0 <glow_prv+0x18>
 80002ce:	e076      	b.n	80003be <glow_prv+0x106>
 80002d0:	dd00      	ble.n	80002d4 <glow_prv+0x1c>
 80002d2:	e0f9      	b.n	80004c8 <glow_prv+0x210>
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d002      	beq.n	80002de <glow_prv+0x26>
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d01d      	beq.n	8000318 <glow_prv+0x60>
    }
    break;

  default:
    // HAL_UART_Transmit(&huart1, "dff", 10, 100);
    break;
 80002dc:	e0f4      	b.n	80004c8 <glow_prv+0x210>
    led_pwm_setvalue(inner_white, last_status);
 80002de:	4b7e      	ldr	r3, [pc, #504]	; (80004d8 <glow_prv+0x220>)
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	b25b      	sxtb	r3, r3
 80002e4:	0019      	movs	r1, r3
 80002e6:	2000      	movs	r0, #0
 80002e8:	f000 fa48 	bl	800077c <led_pwm_setvalue>
    led_pwm_setvalue(inner_warm, last_status);
 80002ec:	4b7a      	ldr	r3, [pc, #488]	; (80004d8 <glow_prv+0x220>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	b25b      	sxtb	r3, r3
 80002f2:	0019      	movs	r1, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	f000 fa41 	bl	800077c <led_pwm_setvalue>
    led_pwm_setvalue(outer_warm, last_status);
 80002fa:	4b77      	ldr	r3, [pc, #476]	; (80004d8 <glow_prv+0x220>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	b25b      	sxtb	r3, r3
 8000300:	0019      	movs	r1, r3
 8000302:	2003      	movs	r0, #3
 8000304:	f000 fa3a 	bl	800077c <led_pwm_setvalue>
    led_pwm_setvalue(outer_white, last_status);
 8000308:	4b73      	ldr	r3, [pc, #460]	; (80004d8 <glow_prv+0x220>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	b25b      	sxtb	r3, r3
 800030e:	0019      	movs	r1, r3
 8000310:	2002      	movs	r0, #2
 8000312:	f000 fa33 	bl	800077c <led_pwm_setvalue>
    break;
 8000316:	e0da      	b.n	80004ce <glow_prv+0x216>
    if (color_polarity == _minus)
 8000318:	4b70      	ldr	r3, [pc, #448]	; (80004dc <glow_prv+0x224>)
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d116      	bne.n	800034e <glow_prv+0x96>
      led_pwm_setvalue(inner_white, last_clr_status);
 8000320:	4b6f      	ldr	r3, [pc, #444]	; (80004e0 <glow_prv+0x228>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	b25b      	sxtb	r3, r3
 8000326:	0019      	movs	r1, r3
 8000328:	2000      	movs	r0, #0
 800032a:	f000 fa27 	bl	800077c <led_pwm_setvalue>
      led_pwm_setvalue(outer_white, last_clr_status);
 800032e:	4b6c      	ldr	r3, [pc, #432]	; (80004e0 <glow_prv+0x228>)
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	b25b      	sxtb	r3, r3
 8000334:	0019      	movs	r1, r3
 8000336:	2002      	movs	r0, #2
 8000338:	f000 fa20 	bl	800077c <led_pwm_setvalue>
      led_pwm_setvalue(inner_warm, all_off);
 800033c:	2164      	movs	r1, #100	; 0x64
 800033e:	2001      	movs	r0, #1
 8000340:	f000 fa1c 	bl	800077c <led_pwm_setvalue>
      led_pwm_setvalue(outer_warm, all_off);
 8000344:	2164      	movs	r1, #100	; 0x64
 8000346:	2003      	movs	r0, #3
 8000348:	f000 fa18 	bl	800077c <led_pwm_setvalue>
    break;
 800034c:	e0bf      	b.n	80004ce <glow_prv+0x216>
    else if (color_polarity == _plus)
 800034e:	4b63      	ldr	r3, [pc, #396]	; (80004dc <glow_prv+0x224>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	2b01      	cmp	r3, #1
 8000354:	d116      	bne.n	8000384 <glow_prv+0xcc>
      led_pwm_setvalue(inner_warm, last_clr_status);
 8000356:	4b62      	ldr	r3, [pc, #392]	; (80004e0 <glow_prv+0x228>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	b25b      	sxtb	r3, r3
 800035c:	0019      	movs	r1, r3
 800035e:	2001      	movs	r0, #1
 8000360:	f000 fa0c 	bl	800077c <led_pwm_setvalue>
      led_pwm_setvalue(outer_warm, last_clr_status);
 8000364:	4b5e      	ldr	r3, [pc, #376]	; (80004e0 <glow_prv+0x228>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	b25b      	sxtb	r3, r3
 800036a:	0019      	movs	r1, r3
 800036c:	2003      	movs	r0, #3
 800036e:	f000 fa05 	bl	800077c <led_pwm_setvalue>
      led_pwm_setvalue(inner_white, all_off);
 8000372:	2164      	movs	r1, #100	; 0x64
 8000374:	2000      	movs	r0, #0
 8000376:	f000 fa01 	bl	800077c <led_pwm_setvalue>
      led_pwm_setvalue(outer_white, all_off);
 800037a:	2164      	movs	r1, #100	; 0x64
 800037c:	2002      	movs	r0, #2
 800037e:	f000 f9fd 	bl	800077c <led_pwm_setvalue>
    break;
 8000382:	e0a4      	b.n	80004ce <glow_prv+0x216>
      led_pwm_setvalue(inner_white, last_status);
 8000384:	4b54      	ldr	r3, [pc, #336]	; (80004d8 <glow_prv+0x220>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	b25b      	sxtb	r3, r3
 800038a:	0019      	movs	r1, r3
 800038c:	2000      	movs	r0, #0
 800038e:	f000 f9f5 	bl	800077c <led_pwm_setvalue>
      led_pwm_setvalue(inner_warm, last_status);
 8000392:	4b51      	ldr	r3, [pc, #324]	; (80004d8 <glow_prv+0x220>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	b25b      	sxtb	r3, r3
 8000398:	0019      	movs	r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	f000 f9ee 	bl	800077c <led_pwm_setvalue>
      led_pwm_setvalue(outer_warm, last_status);
 80003a0:	4b4d      	ldr	r3, [pc, #308]	; (80004d8 <glow_prv+0x220>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	b25b      	sxtb	r3, r3
 80003a6:	0019      	movs	r1, r3
 80003a8:	2003      	movs	r0, #3
 80003aa:	f000 f9e7 	bl	800077c <led_pwm_setvalue>
      led_pwm_setvalue(outer_white, last_status);
 80003ae:	4b4a      	ldr	r3, [pc, #296]	; (80004d8 <glow_prv+0x220>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	b25b      	sxtb	r3, r3
 80003b4:	0019      	movs	r1, r3
 80003b6:	2002      	movs	r0, #2
 80003b8:	f000 f9e0 	bl	800077c <led_pwm_setvalue>
    break;
 80003bc:	e087      	b.n	80004ce <glow_prv+0x216>
    if (color_polarity == _zero)
 80003be:	4b47      	ldr	r3, [pc, #284]	; (80004dc <glow_prv+0x224>)
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	2b02      	cmp	r3, #2
 80003c4:	d137      	bne.n	8000436 <glow_prv+0x17e>
      if (endo_status == 0)
 80003c6:	4b47      	ldr	r3, [pc, #284]	; (80004e4 <glow_prv+0x22c>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d11c      	bne.n	8000408 <glow_prv+0x150>
        led_pwm_setvalue(inner_white, last_clr_status);
 80003ce:	4b44      	ldr	r3, [pc, #272]	; (80004e0 <glow_prv+0x228>)
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	b25b      	sxtb	r3, r3
 80003d4:	0019      	movs	r1, r3
 80003d6:	2000      	movs	r0, #0
 80003d8:	f000 f9d0 	bl	800077c <led_pwm_setvalue>
        led_pwm_setvalue(inner_warm, last_clr_status);
 80003dc:	4b40      	ldr	r3, [pc, #256]	; (80004e0 <glow_prv+0x228>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	b25b      	sxtb	r3, r3
 80003e2:	0019      	movs	r1, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	f000 f9c9 	bl	800077c <led_pwm_setvalue>
        led_pwm_setvalue(outer_warm, last_clr_status);
 80003ea:	4b3d      	ldr	r3, [pc, #244]	; (80004e0 <glow_prv+0x228>)
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	b25b      	sxtb	r3, r3
 80003f0:	0019      	movs	r1, r3
 80003f2:	2003      	movs	r0, #3
 80003f4:	f000 f9c2 	bl	800077c <led_pwm_setvalue>
        led_pwm_setvalue(outer_white, last_clr_status);
 80003f8:	4b39      	ldr	r3, [pc, #228]	; (80004e0 <glow_prv+0x228>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	b25b      	sxtb	r3, r3
 80003fe:	0019      	movs	r1, r3
 8000400:	2002      	movs	r0, #2
 8000402:	f000 f9bb 	bl	800077c <led_pwm_setvalue>
    break;
 8000406:	e061      	b.n	80004cc <glow_prv+0x214>
        led_pwm_setvalue(inner_warm, last_clr_status);
 8000408:	4b35      	ldr	r3, [pc, #212]	; (80004e0 <glow_prv+0x228>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	b25b      	sxtb	r3, r3
 800040e:	0019      	movs	r1, r3
 8000410:	2001      	movs	r0, #1
 8000412:	f000 f9b3 	bl	800077c <led_pwm_setvalue>
        led_pwm_setvalue(inner_white, last_clr_status);
 8000416:	4b32      	ldr	r3, [pc, #200]	; (80004e0 <glow_prv+0x228>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	b25b      	sxtb	r3, r3
 800041c:	0019      	movs	r1, r3
 800041e:	2000      	movs	r0, #0
 8000420:	f000 f9ac 	bl	800077c <led_pwm_setvalue>
        led_pwm_setvalue(outer_warm, all_off);
 8000424:	2164      	movs	r1, #100	; 0x64
 8000426:	2003      	movs	r0, #3
 8000428:	f000 f9a8 	bl	800077c <led_pwm_setvalue>
        led_pwm_setvalue(outer_white, all_off);
 800042c:	2164      	movs	r1, #100	; 0x64
 800042e:	2002      	movs	r0, #2
 8000430:	f000 f9a4 	bl	800077c <led_pwm_setvalue>
    break;
 8000434:	e04a      	b.n	80004cc <glow_prv+0x214>
      if (color_polarity == _plus)
 8000436:	4b29      	ldr	r3, [pc, #164]	; (80004dc <glow_prv+0x224>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b01      	cmp	r3, #1
 800043c:	d046      	beq.n	80004cc <glow_prv+0x214>
      else if (color_polarity == _minus)
 800043e:	4b27      	ldr	r3, [pc, #156]	; (80004dc <glow_prv+0x224>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d142      	bne.n	80004cc <glow_prv+0x214>
        led_pwm_setvalue(inner_white, last_clr_status);
 8000446:	4b26      	ldr	r3, [pc, #152]	; (80004e0 <glow_prv+0x228>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	b25b      	sxtb	r3, r3
 800044c:	0019      	movs	r1, r3
 800044e:	2000      	movs	r0, #0
 8000450:	f000 f994 	bl	800077c <led_pwm_setvalue>
        led_pwm_setvalue(outer_white, last_clr_status);
 8000454:	4b22      	ldr	r3, [pc, #136]	; (80004e0 <glow_prv+0x228>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	b25b      	sxtb	r3, r3
 800045a:	0019      	movs	r1, r3
 800045c:	2002      	movs	r0, #2
 800045e:	f000 f98d 	bl	800077c <led_pwm_setvalue>
    break;
 8000462:	e033      	b.n	80004cc <glow_prv+0x214>
    if (depth_status == 0)
 8000464:	4b20      	ldr	r3, [pc, #128]	; (80004e8 <glow_prv+0x230>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d11c      	bne.n	80004a6 <glow_prv+0x1ee>
      led_pwm_setvalue(inner_white, last_status);
 800046c:	4b1a      	ldr	r3, [pc, #104]	; (80004d8 <glow_prv+0x220>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	b25b      	sxtb	r3, r3
 8000472:	0019      	movs	r1, r3
 8000474:	2000      	movs	r0, #0
 8000476:	f000 f981 	bl	800077c <led_pwm_setvalue>
      led_pwm_setvalue(inner_warm, last_status);
 800047a:	4b17      	ldr	r3, [pc, #92]	; (80004d8 <glow_prv+0x220>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	b25b      	sxtb	r3, r3
 8000480:	0019      	movs	r1, r3
 8000482:	2001      	movs	r0, #1
 8000484:	f000 f97a 	bl	800077c <led_pwm_setvalue>
      led_pwm_setvalue(outer_warm, last_status);
 8000488:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <glow_prv+0x220>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	b25b      	sxtb	r3, r3
 800048e:	0019      	movs	r1, r3
 8000490:	2003      	movs	r0, #3
 8000492:	f000 f973 	bl	800077c <led_pwm_setvalue>
      led_pwm_setvalue(outer_white, last_status);
 8000496:	4b10      	ldr	r3, [pc, #64]	; (80004d8 <glow_prv+0x220>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	b25b      	sxtb	r3, r3
 800049c:	0019      	movs	r1, r3
 800049e:	2002      	movs	r0, #2
 80004a0:	f000 f96c 	bl	800077c <led_pwm_setvalue>
    break;
 80004a4:	e013      	b.n	80004ce <glow_prv+0x216>
      led_pwm_setvalue(inner_warm, all_on);
 80004a6:	2100      	movs	r1, #0
 80004a8:	2001      	movs	r0, #1
 80004aa:	f000 f967 	bl	800077c <led_pwm_setvalue>
      led_pwm_setvalue(inner_white, all_on);
 80004ae:	2100      	movs	r1, #0
 80004b0:	2000      	movs	r0, #0
 80004b2:	f000 f963 	bl	800077c <led_pwm_setvalue>
      led_pwm_setvalue(outer_warm, all_on);
 80004b6:	2100      	movs	r1, #0
 80004b8:	2003      	movs	r0, #3
 80004ba:	f000 f95f 	bl	800077c <led_pwm_setvalue>
      led_pwm_setvalue(outer_white, all_on);
 80004be:	2100      	movs	r1, #0
 80004c0:	2002      	movs	r0, #2
 80004c2:	f000 f95b 	bl	800077c <led_pwm_setvalue>
    break;
 80004c6:	e002      	b.n	80004ce <glow_prv+0x216>
    break;
 80004c8:	46c0      	nop			; (mov r8, r8)
 80004ca:	e000      	b.n	80004ce <glow_prv+0x216>
    break;
 80004cc:	46c0      	nop			; (mov r8, r8)
  }
}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	2000003c 	.word	0x2000003c
 80004d8:	20000038 	.word	0x20000038
 80004dc:	20000041 	.word	0x20000041
 80004e0:	20000039 	.word	0x20000039
 80004e4:	20000043 	.word	0x20000043
 80004e8:	20000042 	.word	0x20000042

080004ec <glow_prv_inner>:

void glow_prv_inner()
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  switch (prgm_status)
 80004f0:	4b9c      	ldr	r3, [pc, #624]	; (8000764 <glow_prv_inner+0x278>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2b04      	cmp	r3, #4
 80004f6:	d100      	bne.n	80004fa <glow_prv_inner+0xe>
 80004f8:	e109      	b.n	800070e <glow_prv_inner+0x222>
 80004fa:	dd00      	ble.n	80004fe <glow_prv_inner+0x12>
 80004fc:	e12b      	b.n	8000756 <glow_prv_inner+0x26a>
 80004fe:	2b03      	cmp	r3, #3
 8000500:	d064      	beq.n	80005cc <glow_prv_inner+0xe0>
 8000502:	dd00      	ble.n	8000506 <glow_prv_inner+0x1a>
 8000504:	e127      	b.n	8000756 <glow_prv_inner+0x26a>
 8000506:	2b00      	cmp	r3, #0
 8000508:	d002      	beq.n	8000510 <glow_prv_inner+0x24>
 800050a:	2b01      	cmp	r3, #1
 800050c:	d017      	beq.n	800053e <glow_prv_inner+0x52>
    }
    break;

  default:
    // // HAL_UART_Transmit(&huart1, "dff", 10, 100);
    break;
 800050e:	e122      	b.n	8000756 <glow_prv_inner+0x26a>
    led_pwm_setvalue(inner_white, last_status);
 8000510:	4b95      	ldr	r3, [pc, #596]	; (8000768 <glow_prv_inner+0x27c>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	b25b      	sxtb	r3, r3
 8000516:	0019      	movs	r1, r3
 8000518:	2000      	movs	r0, #0
 800051a:	f000 f92f 	bl	800077c <led_pwm_setvalue>
    led_pwm_setvalue(inner_warm, last_status);
 800051e:	4b92      	ldr	r3, [pc, #584]	; (8000768 <glow_prv_inner+0x27c>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	b25b      	sxtb	r3, r3
 8000524:	0019      	movs	r1, r3
 8000526:	2001      	movs	r0, #1
 8000528:	f000 f928 	bl	800077c <led_pwm_setvalue>
    led_pwm_setvalue(outer_warm, all_off);
 800052c:	2164      	movs	r1, #100	; 0x64
 800052e:	2003      	movs	r0, #3
 8000530:	f000 f924 	bl	800077c <led_pwm_setvalue>
    led_pwm_setvalue(outer_white, all_off);
 8000534:	2164      	movs	r1, #100	; 0x64
 8000536:	2002      	movs	r0, #2
 8000538:	f000 f920 	bl	800077c <led_pwm_setvalue>
    break;
 800053c:	e10e      	b.n	800075c <glow_prv_inner+0x270>
    if (color_polarity == _minus)
 800053e:	4b8b      	ldr	r3, [pc, #556]	; (800076c <glow_prv_inner+0x280>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d113      	bne.n	800056e <glow_prv_inner+0x82>
      led_pwm_setvalue(inner_white, last_clr_status);
 8000546:	4b8a      	ldr	r3, [pc, #552]	; (8000770 <glow_prv_inner+0x284>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	b25b      	sxtb	r3, r3
 800054c:	0019      	movs	r1, r3
 800054e:	2000      	movs	r0, #0
 8000550:	f000 f914 	bl	800077c <led_pwm_setvalue>
      led_pwm_setvalue(outer_white, all_off);
 8000554:	2164      	movs	r1, #100	; 0x64
 8000556:	2002      	movs	r0, #2
 8000558:	f000 f910 	bl	800077c <led_pwm_setvalue>
      led_pwm_setvalue(inner_warm, all_off);
 800055c:	2164      	movs	r1, #100	; 0x64
 800055e:	2001      	movs	r0, #1
 8000560:	f000 f90c 	bl	800077c <led_pwm_setvalue>
      led_pwm_setvalue(outer_warm, all_off);
 8000564:	2164      	movs	r1, #100	; 0x64
 8000566:	2003      	movs	r0, #3
 8000568:	f000 f908 	bl	800077c <led_pwm_setvalue>
    break;
 800056c:	e0f6      	b.n	800075c <glow_prv_inner+0x270>
    else if (color_polarity == _plus)
 800056e:	4b7f      	ldr	r3, [pc, #508]	; (800076c <glow_prv_inner+0x280>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d113      	bne.n	800059e <glow_prv_inner+0xb2>
      led_pwm_setvalue(inner_warm, last_clr_status);
 8000576:	4b7e      	ldr	r3, [pc, #504]	; (8000770 <glow_prv_inner+0x284>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	b25b      	sxtb	r3, r3
 800057c:	0019      	movs	r1, r3
 800057e:	2001      	movs	r0, #1
 8000580:	f000 f8fc 	bl	800077c <led_pwm_setvalue>
      led_pwm_setvalue(outer_warm, all_off);
 8000584:	2164      	movs	r1, #100	; 0x64
 8000586:	2003      	movs	r0, #3
 8000588:	f000 f8f8 	bl	800077c <led_pwm_setvalue>
      led_pwm_setvalue(inner_white, all_off);
 800058c:	2164      	movs	r1, #100	; 0x64
 800058e:	2000      	movs	r0, #0
 8000590:	f000 f8f4 	bl	800077c <led_pwm_setvalue>
      led_pwm_setvalue(outer_white, all_off);
 8000594:	2164      	movs	r1, #100	; 0x64
 8000596:	2002      	movs	r0, #2
 8000598:	f000 f8f0 	bl	800077c <led_pwm_setvalue>
    break;
 800059c:	e0de      	b.n	800075c <glow_prv_inner+0x270>
      led_pwm_setvalue(inner_white, last_status);
 800059e:	4b72      	ldr	r3, [pc, #456]	; (8000768 <glow_prv_inner+0x27c>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	b25b      	sxtb	r3, r3
 80005a4:	0019      	movs	r1, r3
 80005a6:	2000      	movs	r0, #0
 80005a8:	f000 f8e8 	bl	800077c <led_pwm_setvalue>
      led_pwm_setvalue(inner_warm, last_status);
 80005ac:	4b6e      	ldr	r3, [pc, #440]	; (8000768 <glow_prv_inner+0x27c>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	b25b      	sxtb	r3, r3
 80005b2:	0019      	movs	r1, r3
 80005b4:	2001      	movs	r0, #1
 80005b6:	f000 f8e1 	bl	800077c <led_pwm_setvalue>
      led_pwm_setvalue(outer_warm, all_off);
 80005ba:	2164      	movs	r1, #100	; 0x64
 80005bc:	2003      	movs	r0, #3
 80005be:	f000 f8dd 	bl	800077c <led_pwm_setvalue>
      led_pwm_setvalue(outer_white, all_off);
 80005c2:	2164      	movs	r1, #100	; 0x64
 80005c4:	2002      	movs	r0, #2
 80005c6:	f000 f8d9 	bl	800077c <led_pwm_setvalue>
    break;
 80005ca:	e0c7      	b.n	800075c <glow_prv_inner+0x270>
    if (endo_status == 0)
 80005cc:	4b69      	ldr	r3, [pc, #420]	; (8000774 <glow_prv_inner+0x288>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d151      	bne.n	8000678 <glow_prv_inner+0x18c>
      if (color_polarity == _zero)
 80005d4:	4b65      	ldr	r3, [pc, #404]	; (800076c <glow_prv_inner+0x280>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b02      	cmp	r3, #2
 80005da:	d116      	bne.n	800060a <glow_prv_inner+0x11e>
        led_pwm_setvalue(inner_white, last_status);
 80005dc:	4b62      	ldr	r3, [pc, #392]	; (8000768 <glow_prv_inner+0x27c>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	b25b      	sxtb	r3, r3
 80005e2:	0019      	movs	r1, r3
 80005e4:	2000      	movs	r0, #0
 80005e6:	f000 f8c9 	bl	800077c <led_pwm_setvalue>
        led_pwm_setvalue(inner_warm, last_status);
 80005ea:	4b5f      	ldr	r3, [pc, #380]	; (8000768 <glow_prv_inner+0x27c>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	b25b      	sxtb	r3, r3
 80005f0:	0019      	movs	r1, r3
 80005f2:	2001      	movs	r0, #1
 80005f4:	f000 f8c2 	bl	800077c <led_pwm_setvalue>
        led_pwm_setvalue(outer_warm, all_off);
 80005f8:	2164      	movs	r1, #100	; 0x64
 80005fa:	2003      	movs	r0, #3
 80005fc:	f000 f8be 	bl	800077c <led_pwm_setvalue>
        led_pwm_setvalue(outer_white, all_off);
 8000600:	2164      	movs	r1, #100	; 0x64
 8000602:	2002      	movs	r0, #2
 8000604:	f000 f8ba 	bl	800077c <led_pwm_setvalue>
    break;
 8000608:	e0a7      	b.n	800075a <glow_prv_inner+0x26e>
      else if (color_polarity == _minus)
 800060a:	4b58      	ldr	r3, [pc, #352]	; (800076c <glow_prv_inner+0x280>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d116      	bne.n	8000640 <glow_prv_inner+0x154>
        led_pwm_setvalue(inner_white, all_off);
 8000612:	2164      	movs	r1, #100	; 0x64
 8000614:	2000      	movs	r0, #0
 8000616:	f000 f8b1 	bl	800077c <led_pwm_setvalue>
        led_pwm_setvalue(inner_warm, last_status);
 800061a:	4b53      	ldr	r3, [pc, #332]	; (8000768 <glow_prv_inner+0x27c>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	b25b      	sxtb	r3, r3
 8000620:	0019      	movs	r1, r3
 8000622:	2001      	movs	r0, #1
 8000624:	f000 f8aa 	bl	800077c <led_pwm_setvalue>
        led_pwm_setvalue(outer_warm, last_status);
 8000628:	4b4f      	ldr	r3, [pc, #316]	; (8000768 <glow_prv_inner+0x27c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b25b      	sxtb	r3, r3
 800062e:	0019      	movs	r1, r3
 8000630:	2003      	movs	r0, #3
 8000632:	f000 f8a3 	bl	800077c <led_pwm_setvalue>
        led_pwm_setvalue(outer_white, all_off);
 8000636:	2164      	movs	r1, #100	; 0x64
 8000638:	2002      	movs	r0, #2
 800063a:	f000 f89f 	bl	800077c <led_pwm_setvalue>
    break;
 800063e:	e08c      	b.n	800075a <glow_prv_inner+0x26e>
      else if (color_polarity == _plus)
 8000640:	4b4a      	ldr	r3, [pc, #296]	; (800076c <glow_prv_inner+0x280>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d000      	beq.n	800064a <glow_prv_inner+0x15e>
 8000648:	e087      	b.n	800075a <glow_prv_inner+0x26e>
        led_pwm_setvalue(inner_white, last_status);
 800064a:	4b47      	ldr	r3, [pc, #284]	; (8000768 <glow_prv_inner+0x27c>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	b25b      	sxtb	r3, r3
 8000650:	0019      	movs	r1, r3
 8000652:	2000      	movs	r0, #0
 8000654:	f000 f892 	bl	800077c <led_pwm_setvalue>
        led_pwm_setvalue(inner_warm, all_off);
 8000658:	2164      	movs	r1, #100	; 0x64
 800065a:	2001      	movs	r0, #1
 800065c:	f000 f88e 	bl	800077c <led_pwm_setvalue>
        led_pwm_setvalue(outer_warm, all_off);
 8000660:	2164      	movs	r1, #100	; 0x64
 8000662:	2003      	movs	r0, #3
 8000664:	f000 f88a 	bl	800077c <led_pwm_setvalue>
        led_pwm_setvalue(outer_white, last_status);
 8000668:	4b3f      	ldr	r3, [pc, #252]	; (8000768 <glow_prv_inner+0x27c>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b25b      	sxtb	r3, r3
 800066e:	0019      	movs	r1, r3
 8000670:	2002      	movs	r0, #2
 8000672:	f000 f883 	bl	800077c <led_pwm_setvalue>
    break;
 8000676:	e070      	b.n	800075a <glow_prv_inner+0x26e>
      if (color_polarity == _zero)
 8000678:	4b3c      	ldr	r3, [pc, #240]	; (800076c <glow_prv_inner+0x280>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b02      	cmp	r3, #2
 800067e:	d116      	bne.n	80006ae <glow_prv_inner+0x1c2>
        led_pwm_setvalue(inner_white, last_status);
 8000680:	4b39      	ldr	r3, [pc, #228]	; (8000768 <glow_prv_inner+0x27c>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b25b      	sxtb	r3, r3
 8000686:	0019      	movs	r1, r3
 8000688:	2000      	movs	r0, #0
 800068a:	f000 f877 	bl	800077c <led_pwm_setvalue>
        led_pwm_setvalue(inner_warm, last_status);
 800068e:	4b36      	ldr	r3, [pc, #216]	; (8000768 <glow_prv_inner+0x27c>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	b25b      	sxtb	r3, r3
 8000694:	0019      	movs	r1, r3
 8000696:	2001      	movs	r0, #1
 8000698:	f000 f870 	bl	800077c <led_pwm_setvalue>
        led_pwm_setvalue(outer_warm, all_off);
 800069c:	2164      	movs	r1, #100	; 0x64
 800069e:	2003      	movs	r0, #3
 80006a0:	f000 f86c 	bl	800077c <led_pwm_setvalue>
        led_pwm_setvalue(outer_white, all_off);
 80006a4:	2164      	movs	r1, #100	; 0x64
 80006a6:	2002      	movs	r0, #2
 80006a8:	f000 f868 	bl	800077c <led_pwm_setvalue>
    break;
 80006ac:	e055      	b.n	800075a <glow_prv_inner+0x26e>
      else if (color_polarity == _minus)
 80006ae:	4b2f      	ldr	r3, [pc, #188]	; (800076c <glow_prv_inner+0x280>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d113      	bne.n	80006de <glow_prv_inner+0x1f2>
        led_pwm_setvalue(inner_white, all_off);
 80006b6:	2164      	movs	r1, #100	; 0x64
 80006b8:	2000      	movs	r0, #0
 80006ba:	f000 f85f 	bl	800077c <led_pwm_setvalue>
        led_pwm_setvalue(inner_warm, last_status);
 80006be:	4b2a      	ldr	r3, [pc, #168]	; (8000768 <glow_prv_inner+0x27c>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	b25b      	sxtb	r3, r3
 80006c4:	0019      	movs	r1, r3
 80006c6:	2001      	movs	r0, #1
 80006c8:	f000 f858 	bl	800077c <led_pwm_setvalue>
        led_pwm_setvalue(outer_warm, all_off);
 80006cc:	2164      	movs	r1, #100	; 0x64
 80006ce:	2003      	movs	r0, #3
 80006d0:	f000 f854 	bl	800077c <led_pwm_setvalue>
        led_pwm_setvalue(outer_white, all_off);
 80006d4:	2164      	movs	r1, #100	; 0x64
 80006d6:	2002      	movs	r0, #2
 80006d8:	f000 f850 	bl	800077c <led_pwm_setvalue>
    break;
 80006dc:	e03d      	b.n	800075a <glow_prv_inner+0x26e>
      else if (color_polarity == _plus)
 80006de:	4b23      	ldr	r3, [pc, #140]	; (800076c <glow_prv_inner+0x280>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d139      	bne.n	800075a <glow_prv_inner+0x26e>
        led_pwm_setvalue(inner_white, last_status);
 80006e6:	4b20      	ldr	r3, [pc, #128]	; (8000768 <glow_prv_inner+0x27c>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	b25b      	sxtb	r3, r3
 80006ec:	0019      	movs	r1, r3
 80006ee:	2000      	movs	r0, #0
 80006f0:	f000 f844 	bl	800077c <led_pwm_setvalue>
        led_pwm_setvalue(inner_warm, all_off);
 80006f4:	2164      	movs	r1, #100	; 0x64
 80006f6:	2001      	movs	r0, #1
 80006f8:	f000 f840 	bl	800077c <led_pwm_setvalue>
        led_pwm_setvalue(outer_warm, all_off);
 80006fc:	2164      	movs	r1, #100	; 0x64
 80006fe:	2003      	movs	r0, #3
 8000700:	f000 f83c 	bl	800077c <led_pwm_setvalue>
        led_pwm_setvalue(outer_white, all_off);
 8000704:	2164      	movs	r1, #100	; 0x64
 8000706:	2002      	movs	r0, #2
 8000708:	f000 f838 	bl	800077c <led_pwm_setvalue>
    break;
 800070c:	e025      	b.n	800075a <glow_prv_inner+0x26e>
    if (depth_status == 0)
 800070e:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <glow_prv_inner+0x28c>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d10e      	bne.n	8000734 <glow_prv_inner+0x248>
      led_pwm_setvalue(inner_white, last_status);
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <glow_prv_inner+0x27c>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	b25b      	sxtb	r3, r3
 800071c:	0019      	movs	r1, r3
 800071e:	2000      	movs	r0, #0
 8000720:	f000 f82c 	bl	800077c <led_pwm_setvalue>
      led_pwm_setvalue(inner_warm, last_status);
 8000724:	4b10      	ldr	r3, [pc, #64]	; (8000768 <glow_prv_inner+0x27c>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	b25b      	sxtb	r3, r3
 800072a:	0019      	movs	r1, r3
 800072c:	2001      	movs	r0, #1
 800072e:	f000 f825 	bl	800077c <led_pwm_setvalue>
    break;
 8000732:	e013      	b.n	800075c <glow_prv_inner+0x270>
      led_pwm_setvalue(inner_warm, all_on);
 8000734:	2100      	movs	r1, #0
 8000736:	2001      	movs	r0, #1
 8000738:	f000 f820 	bl	800077c <led_pwm_setvalue>
      led_pwm_setvalue(inner_white, all_on);
 800073c:	2100      	movs	r1, #0
 800073e:	2000      	movs	r0, #0
 8000740:	f000 f81c 	bl	800077c <led_pwm_setvalue>
      led_pwm_setvalue(outer_warm, all_off);
 8000744:	2164      	movs	r1, #100	; 0x64
 8000746:	2003      	movs	r0, #3
 8000748:	f000 f818 	bl	800077c <led_pwm_setvalue>
      led_pwm_setvalue(outer_white, all_off);
 800074c:	2164      	movs	r1, #100	; 0x64
 800074e:	2002      	movs	r0, #2
 8000750:	f000 f814 	bl	800077c <led_pwm_setvalue>
    break;
 8000754:	e002      	b.n	800075c <glow_prv_inner+0x270>
    break;
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	e000      	b.n	800075c <glow_prv_inner+0x270>
    break;
 800075a:	46c0      	nop			; (mov r8, r8)
  }
}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	2000003c 	.word	0x2000003c
 8000768:	20000038 	.word	0x20000038
 800076c:	20000041 	.word	0x20000041
 8000770:	20000039 	.word	0x20000039
 8000774:	20000043 	.word	0x20000043
 8000778:	20000042 	.word	0x20000042

0800077c <led_pwm_setvalue>:

  return 100 - res;
}

void led_pwm_setvalue(int _channel, int32_t value)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
  switch (_channel)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2b03      	cmp	r3, #3
 800078a:	d01b      	beq.n	80007c4 <led_pwm_setvalue+0x48>
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b03      	cmp	r3, #3
 8000790:	dc1c      	bgt.n	80007cc <led_pwm_setvalue+0x50>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2b02      	cmp	r3, #2
 8000796:	d011      	beq.n	80007bc <led_pwm_setvalue+0x40>
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b02      	cmp	r3, #2
 800079c:	dc16      	bgt.n	80007cc <led_pwm_setvalue+0x50>
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d003      	beq.n	80007ac <led_pwm_setvalue+0x30>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d004      	beq.n	80007b4 <led_pwm_setvalue+0x38>
    //  case test_led:
    //    TIM3->CCR4 = value;
    //    break;
  default:
    //	    printf("no channel select");
    break;
 80007aa:	e00f      	b.n	80007cc <led_pwm_setvalue+0x50>
    TIM1->CCR3 = value;
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <led_pwm_setvalue+0x5c>)
 80007ae:	683a      	ldr	r2, [r7, #0]
 80007b0:	63da      	str	r2, [r3, #60]	; 0x3c
    break;
 80007b2:	e00c      	b.n	80007ce <led_pwm_setvalue+0x52>
    TIM1->CCR4 = value;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <led_pwm_setvalue+0x5c>)
 80007b6:	683a      	ldr	r2, [r7, #0]
 80007b8:	641a      	str	r2, [r3, #64]	; 0x40
    break;
 80007ba:	e008      	b.n	80007ce <led_pwm_setvalue+0x52>
    TIM3->CCR4 = value;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <led_pwm_setvalue+0x60>)
 80007be:	683a      	ldr	r2, [r7, #0]
 80007c0:	641a      	str	r2, [r3, #64]	; 0x40
    break;
 80007c2:	e004      	b.n	80007ce <led_pwm_setvalue+0x52>
    TIM3->CCR1 = value;
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <led_pwm_setvalue+0x60>)
 80007c6:	683a      	ldr	r2, [r7, #0]
 80007c8:	635a      	str	r2, [r3, #52]	; 0x34
    break;
 80007ca:	e000      	b.n	80007ce <led_pwm_setvalue+0x52>
    break;
 80007cc:	46c0      	nop			; (mov r8, r8)
  }
  //	HAL_Delay(2);
}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b002      	add	sp, #8
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	40012c00 	.word	0x40012c00
 80007dc:	40000400 	.word	0x40000400

080007e0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e6:	f002 fca9 	bl	800313c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ea:	f002 f92b 	bl	8002a44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ee:	f002 fac5 	bl	8002d7c <MX_GPIO_Init>
  MX_TIM1_Init();
 80007f2:	f002 f989 	bl	8002b08 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80007f6:	f002 fa91 	bl	8002d1c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80007fa:	f002 fa25 	bl	8002c48 <MX_TIM3_Init>
  //  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
  //    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);

  //    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  //    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80007fe:	4bdf      	ldr	r3, [pc, #892]	; (8000b7c <main+0x39c>)
 8000800:	2108      	movs	r1, #8
 8000802:	0018      	movs	r0, r3
 8000804:	f003 fd6a 	bl	80042dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000808:	4bdc      	ldr	r3, [pc, #880]	; (8000b7c <main+0x39c>)
 800080a:	210c      	movs	r1, #12
 800080c:	0018      	movs	r0, r3
 800080e:	f003 fd65 	bl	80042dc <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000812:	4bdb      	ldr	r3, [pc, #876]	; (8000b80 <main+0x3a0>)
 8000814:	2100      	movs	r1, #0
 8000816:	0018      	movs	r0, r3
 8000818:	f003 fd60 	bl	80042dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800081c:	4bd8      	ldr	r3, [pc, #864]	; (8000b80 <main+0x3a0>)
 800081e:	210c      	movs	r1, #12
 8000820:	0018      	movs	r0, r3
 8000822:	f003 fd5b 	bl	80042dc <HAL_TIM_PWM_Start>
   * ARG 1 : led channel
   * ARG 2 : set level (zero to nine)
   * */
  //  led_pwm_setvalue(test_led,five);

  HAL_UART_Receive_IT(&huart1, Rx_data, 5); // Receive 4 Bytes of data
 8000826:	49d7      	ldr	r1, [pc, #860]	; (8000b84 <main+0x3a4>)
 8000828:	4bd7      	ldr	r3, [pc, #860]	; (8000b88 <main+0x3a8>)
 800082a:	2205      	movs	r2, #5
 800082c:	0018      	movs	r0, r3
 800082e:	f004 fb83 	bl	8004f38 <HAL_UART_Receive_IT>
                                            //  TIM3->CCR3 = 60000;

  yl = 0;
 8000832:	4bd6      	ldr	r3, [pc, #856]	; (8000b8c <main+0x3ac>)
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
  wh = 0;
 8000838:	4bd5      	ldr	r3, [pc, #852]	; (8000b90 <main+0x3b0>)
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
  //   Rx_data[2] = '0';
  //   Rx_data[3] = '2';
  //   Rx_data[4] = '0';

  //
  prgm_status = _inten;
 800083e:	4bd5      	ldr	r3, [pc, #852]	; (8000b94 <main+0x3b4>)
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
  lamp_status = 1;
 8000844:	4bd4      	ldr	r3, [pc, #848]	; (8000b98 <main+0x3b8>)
 8000846:	2201      	movs	r2, #1
 8000848:	701a      	strb	r2, [r3, #0]
  color_status = 0;
 800084a:	4bd4      	ldr	r3, [pc, #848]	; (8000b9c <main+0x3bc>)
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]
  uint8_t color_polarity = _minus;
 8000850:	1dfb      	adds	r3, r7, #7
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
  depth_status = 0;
 8000856:	4bd2      	ldr	r3, [pc, #840]	; (8000ba0 <main+0x3c0>)
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
  endo_status = 0;
 800085c:	4bd1      	ldr	r3, [pc, #836]	; (8000ba4 <main+0x3c4>)
 800085e:	2200      	movs	r2, #0
 8000860:	701a      	strb	r2, [r3, #0]
  fous_status = 0;
 8000862:	4bd1      	ldr	r3, [pc, #836]	; (8000ba8 <main+0x3c8>)
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]
  last_status = one;
 8000868:	4bd0      	ldr	r3, [pc, #832]	; (8000bac <main+0x3cc>)
 800086a:	2246      	movs	r2, #70	; 0x46
 800086c:	701a      	strb	r2, [r3, #0]
  color_polarity = _zero;
 800086e:	1dfb      	adds	r3, r7, #7
 8000870:	2202      	movs	r2, #2
 8000872:	701a      	strb	r2, [r3, #0]

  HAL_Delay(4000);
 8000874:	23fa      	movs	r3, #250	; 0xfa
 8000876:	011b      	lsls	r3, r3, #4
 8000878:	0018      	movs	r0, r3
 800087a:	f002 fcc3 	bl	8003204 <HAL_Delay>
// last_status = one;
//   color_polarity = _zero;
  led_pwm_setvalue(inner_warm, last_status);
 800087e:	4bcb      	ldr	r3, [pc, #812]	; (8000bac <main+0x3cc>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	b25b      	sxtb	r3, r3
 8000884:	0019      	movs	r1, r3
 8000886:	2001      	movs	r0, #1
 8000888:	f7ff ff78 	bl	800077c <led_pwm_setvalue>
  led_pwm_setvalue(inner_white, last_status);
 800088c:	4bc7      	ldr	r3, [pc, #796]	; (8000bac <main+0x3cc>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b25b      	sxtb	r3, r3
 8000892:	0019      	movs	r1, r3
 8000894:	2000      	movs	r0, #0
 8000896:	f7ff ff71 	bl	800077c <led_pwm_setvalue>
  led_pwm_setvalue(outer_warm, last_status);
 800089a:	4bc4      	ldr	r3, [pc, #784]	; (8000bac <main+0x3cc>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	b25b      	sxtb	r3, r3
 80008a0:	0019      	movs	r1, r3
 80008a2:	2003      	movs	r0, #3
 80008a4:	f7ff ff6a 	bl	800077c <led_pwm_setvalue>
  led_pwm_setvalue(outer_white, last_status);
 80008a8:	4bc0      	ldr	r3, [pc, #768]	; (8000bac <main+0x3cc>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	b25b      	sxtb	r3, r3
 80008ae:	0019      	movs	r1, r3
 80008b0:	2002      	movs	r0, #2
 80008b2:	f7ff ff63 	bl	800077c <led_pwm_setvalue>

    /* USER CODE BEGIN 3 */
    // // HAL_UART_Transmit(&huart1,"123456" , 5, 1000);
    // // HAL_UART_Transmit(&huart1,"99887" , 5, 100);
    // HAL_Delay(250);
    int avg = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
    if (int_flag)
 80008ba:	4bbd      	ldr	r3, [pc, #756]	; (8000bb0 <main+0x3d0>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d101      	bne.n	80008c8 <main+0xe8>
 80008c4:	f002 f8b0 	bl	8002a28 <main+0x2248>
      // // HAL_UART_Transmit(&huart1, &Rx_data[4], 1, 1000);
      //      // HAL_UART_Transmit(&huart1, &Rx_data[0], 5, 1000);
      //      Rx_data[0] = last_status;
      // HAL_UART_Transmit(&huart1, &Rx_data[0], 5, 1000);
      //  // HAL_UART_Transmit(&huart1,"." , 1, 100);
      int_flag = 0;
 80008c8:	4bb9      	ldr	r3, [pc, #740]	; (8000bb0 <main+0x3d0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]

      if (Rx_data[0] == '@') //@I_1#,@I_5#
 80008ce:	4bad      	ldr	r3, [pc, #692]	; (8000b84 <main+0x3a4>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b40      	cmp	r3, #64	; 0x40
 80008d4:	d001      	beq.n	80008da <main+0xfa>
 80008d6:	f002 f8a7 	bl	8002a28 <main+0x2248>
      {
        if (Rx_data[1] == 'I')
 80008da:	4baa      	ldr	r3, [pc, #680]	; (8000b84 <main+0x3a4>)
 80008dc:	785b      	ldrb	r3, [r3, #1]
 80008de:	2b49      	cmp	r3, #73	; 0x49
 80008e0:	d001      	beq.n	80008e6 <main+0x106>
 80008e2:	f000 fee3 	bl	80016ac <main+0xecc>
        {
          prgm_status = _inten;
 80008e6:	4bab      	ldr	r3, [pc, #684]	; (8000b94 <main+0x3b4>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
          last_inten_pos = Rx_data[3];
 80008ec:	4ba5      	ldr	r3, [pc, #660]	; (8000b84 <main+0x3a4>)
 80008ee:	78db      	ldrb	r3, [r3, #3]
 80008f0:	001a      	movs	r2, r3
 80008f2:	4bb0      	ldr	r3, [pc, #704]	; (8000bb4 <main+0x3d4>)
 80008f4:	601a      	str	r2, [r3, #0]
          if (lamp_status == 1)
 80008f6:	4ba8      	ldr	r3, [pc, #672]	; (8000b98 <main+0x3b8>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d001      	beq.n	8000902 <main+0x122>
 80008fe:	f000 fec3 	bl	8001688 <main+0xea8>
          {
            switch (Rx_data[3])
 8000902:	4ba0      	ldr	r3, [pc, #640]	; (8000b84 <main+0x3a4>)
 8000904:	78db      	ldrb	r3, [r3, #3]
 8000906:	3b31      	subs	r3, #49	; 0x31
 8000908:	2b09      	cmp	r3, #9
 800090a:	d901      	bls.n	8000910 <main+0x130>
 800090c:	f002 f88b 	bl	8002a26 <main+0x2246>
 8000910:	009a      	lsls	r2, r3, #2
 8000912:	4ba9      	ldr	r3, [pc, #676]	; (8000bb8 <main+0x3d8>)
 8000914:	18d3      	adds	r3, r2, r3
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	469f      	mov	pc, r3
            {
            case '1':
              last_inten_pos = 1;
 800091a:	4ba6      	ldr	r3, [pc, #664]	; (8000bb4 <main+0x3d4>)
 800091c:	2201      	movs	r2, #1
 800091e:	601a      	str	r2, [r3, #0]

              if (depth_status == 1)
 8000920:	4b9f      	ldr	r3, [pc, #636]	; (8000ba0 <main+0x3c0>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d125      	bne.n	8000974 <main+0x194>
              {
                if (endo_status == 1)
 8000928:	4b9e      	ldr	r3, [pc, #632]	; (8000ba4 <main+0x3c4>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d110      	bne.n	8000952 <main+0x172>
                {
                  led_pwm_setvalue(inner_warm, all_on);
 8000930:	2100      	movs	r1, #0
 8000932:	2001      	movs	r0, #1
 8000934:	f7ff ff22 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(inner_white, all_on);
 8000938:	2100      	movs	r1, #0
 800093a:	2000      	movs	r0, #0
 800093c:	f7ff ff1e 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_warm, all_off);
 8000940:	2164      	movs	r1, #100	; 0x64
 8000942:	2003      	movs	r0, #3
 8000944:	f7ff ff1a 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_white, all_off);
 8000948:	2164      	movs	r1, #100	; 0x64
 800094a:	2002      	movs	r0, #2
 800094c:	f7ff ff16 	bl	800077c <led_pwm_setvalue>
 8000950:	e08d      	b.n	8000a6e <main+0x28e>
                }
                else
                {
                  led_pwm_setvalue(inner_warm, all_on);
 8000952:	2100      	movs	r1, #0
 8000954:	2001      	movs	r0, #1
 8000956:	f7ff ff11 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(inner_white, all_on);
 800095a:	2100      	movs	r1, #0
 800095c:	2000      	movs	r0, #0
 800095e:	f7ff ff0d 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_warm, all_on);
 8000962:	2100      	movs	r1, #0
 8000964:	2003      	movs	r0, #3
 8000966:	f7ff ff09 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_white, all_on);
 800096a:	2100      	movs	r1, #0
 800096c:	2002      	movs	r0, #2
 800096e:	f7ff ff05 	bl	800077c <led_pwm_setvalue>
 8000972:	e07c      	b.n	8000a6e <main+0x28e>
                }
              }

              else
              {
                if (color_polarity == _zero)
 8000974:	1dfb      	adds	r3, r7, #7
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b02      	cmp	r3, #2
 800097a:	d125      	bne.n	80009c8 <main+0x1e8>
                {
                  if (endo_status == 1)
 800097c:	4b89      	ldr	r3, [pc, #548]	; (8000ba4 <main+0x3c4>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d110      	bne.n	80009a6 <main+0x1c6>
                  {
                    led_pwm_setvalue(inner_warm, one);
 8000984:	2146      	movs	r1, #70	; 0x46
 8000986:	2001      	movs	r0, #1
 8000988:	f7ff fef8 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, one);
 800098c:	2146      	movs	r1, #70	; 0x46
 800098e:	2000      	movs	r0, #0
 8000990:	f7ff fef4 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8000994:	2164      	movs	r1, #100	; 0x64
 8000996:	2003      	movs	r0, #3
 8000998:	f7ff fef0 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 800099c:	2164      	movs	r1, #100	; 0x64
 800099e:	2002      	movs	r0, #2
 80009a0:	f7ff feec 	bl	800077c <led_pwm_setvalue>
 80009a4:	e063      	b.n	8000a6e <main+0x28e>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, one);
 80009a6:	2146      	movs	r1, #70	; 0x46
 80009a8:	2001      	movs	r0, #1
 80009aa:	f7ff fee7 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, one);
 80009ae:	2146      	movs	r1, #70	; 0x46
 80009b0:	2000      	movs	r0, #0
 80009b2:	f7ff fee3 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, one);
 80009b6:	2146      	movs	r1, #70	; 0x46
 80009b8:	2003      	movs	r0, #3
 80009ba:	f7ff fedf 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, one);
 80009be:	2146      	movs	r1, #70	; 0x46
 80009c0:	2002      	movs	r0, #2
 80009c2:	f7ff fedb 	bl	800077c <led_pwm_setvalue>
 80009c6:	e052      	b.n	8000a6e <main+0x28e>
                  }
                }
                else if (color_polarity == _minus)
 80009c8:	1dfb      	adds	r3, r7, #7
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d125      	bne.n	8000a1c <main+0x23c>
                {
                  if (endo_status == 1)
 80009d0:	4b74      	ldr	r3, [pc, #464]	; (8000ba4 <main+0x3c4>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d110      	bne.n	80009fa <main+0x21a>
                  {
                    led_pwm_setvalue(inner_warm, one);
 80009d8:	2146      	movs	r1, #70	; 0x46
 80009da:	2001      	movs	r0, #1
 80009dc:	f7ff fece 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_off);
 80009e0:	2164      	movs	r1, #100	; 0x64
 80009e2:	2000      	movs	r0, #0
 80009e4:	f7ff feca 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 80009e8:	2164      	movs	r1, #100	; 0x64
 80009ea:	2003      	movs	r0, #3
 80009ec:	f7ff fec6 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 80009f0:	2164      	movs	r1, #100	; 0x64
 80009f2:	2002      	movs	r0, #2
 80009f4:	f7ff fec2 	bl	800077c <led_pwm_setvalue>
 80009f8:	e039      	b.n	8000a6e <main+0x28e>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, one);
 80009fa:	2146      	movs	r1, #70	; 0x46
 80009fc:	2001      	movs	r0, #1
 80009fe:	f7ff febd 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_off);
 8000a02:	2164      	movs	r1, #100	; 0x64
 8000a04:	2000      	movs	r0, #0
 8000a06:	f7ff feb9 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, one);
 8000a0a:	2146      	movs	r1, #70	; 0x46
 8000a0c:	2003      	movs	r0, #3
 8000a0e:	f7ff feb5 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8000a12:	2164      	movs	r1, #100	; 0x64
 8000a14:	2002      	movs	r0, #2
 8000a16:	f7ff feb1 	bl	800077c <led_pwm_setvalue>
 8000a1a:	e028      	b.n	8000a6e <main+0x28e>
                  }
                }

                else if (color_polarity == _plus)
 8000a1c:	1dfb      	adds	r3, r7, #7
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d124      	bne.n	8000a6e <main+0x28e>
                {
                  if (endo_status == 1)
 8000a24:	4b5f      	ldr	r3, [pc, #380]	; (8000ba4 <main+0x3c4>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d110      	bne.n	8000a4e <main+0x26e>
                  {
                    led_pwm_setvalue(inner_warm, all_off);
 8000a2c:	2164      	movs	r1, #100	; 0x64
 8000a2e:	2001      	movs	r0, #1
 8000a30:	f7ff fea4 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, one);
 8000a34:	2146      	movs	r1, #70	; 0x46
 8000a36:	2000      	movs	r0, #0
 8000a38:	f7ff fea0 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8000a3c:	2164      	movs	r1, #100	; 0x64
 8000a3e:	2003      	movs	r0, #3
 8000a40:	f7ff fe9c 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8000a44:	2164      	movs	r1, #100	; 0x64
 8000a46:	2002      	movs	r0, #2
 8000a48:	f7ff fe98 	bl	800077c <led_pwm_setvalue>
 8000a4c:	e00f      	b.n	8000a6e <main+0x28e>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, all_off);
 8000a4e:	2164      	movs	r1, #100	; 0x64
 8000a50:	2001      	movs	r0, #1
 8000a52:	f7ff fe93 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, one);
 8000a56:	2146      	movs	r1, #70	; 0x46
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f7ff fe8f 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8000a5e:	2164      	movs	r1, #100	; 0x64
 8000a60:	2003      	movs	r0, #3
 8000a62:	f7ff fe8b 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, one);
 8000a66:	2146      	movs	r1, #70	; 0x46
 8000a68:	2002      	movs	r0, #2
 8000a6a:	f7ff fe87 	bl	800077c <led_pwm_setvalue>
                  }
                }
              }

              last_status = one;
 8000a6e:	4b4f      	ldr	r3, [pc, #316]	; (8000bac <main+0x3cc>)
 8000a70:	2246      	movs	r2, #70	; 0x46
 8000a72:	701a      	strb	r2, [r3, #0]
              break;
 8000a74:	f001 ffd8 	bl	8002a28 <main+0x2248>
            case '2':
              last_inten_pos = 2;
 8000a78:	4b4e      	ldr	r3, [pc, #312]	; (8000bb4 <main+0x3d4>)
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	601a      	str	r2, [r3, #0]
              if (depth_status == 1)
 8000a7e:	4b48      	ldr	r3, [pc, #288]	; (8000ba0 <main+0x3c0>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d125      	bne.n	8000ad2 <main+0x2f2>
              {
                if (endo_status == 1)
 8000a86:	4b47      	ldr	r3, [pc, #284]	; (8000ba4 <main+0x3c4>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d110      	bne.n	8000ab0 <main+0x2d0>
                {
                  led_pwm_setvalue(inner_warm, all_on);
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2001      	movs	r0, #1
 8000a92:	f7ff fe73 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(inner_white, all_on);
 8000a96:	2100      	movs	r1, #0
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f7ff fe6f 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_warm, all_off);
 8000a9e:	2164      	movs	r1, #100	; 0x64
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f7ff fe6b 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_white, all_off);
 8000aa6:	2164      	movs	r1, #100	; 0x64
 8000aa8:	2002      	movs	r0, #2
 8000aaa:	f7ff fe67 	bl	800077c <led_pwm_setvalue>
 8000aae:	e0ae      	b.n	8000c0e <main+0x42e>
                }
                else
                {
                  led_pwm_setvalue(inner_warm, all_on);
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f7ff fe62 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(inner_white, all_on);
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2000      	movs	r0, #0
 8000abc:	f7ff fe5e 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_warm, all_on);
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	2003      	movs	r0, #3
 8000ac4:	f7ff fe5a 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_white, all_on);
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2002      	movs	r0, #2
 8000acc:	f7ff fe56 	bl	800077c <led_pwm_setvalue>
 8000ad0:	e09d      	b.n	8000c0e <main+0x42e>
                }
              }

              else
              {
                if (color_polarity == _zero)
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d125      	bne.n	8000b26 <main+0x346>
                {
                  if (endo_status == 1)
 8000ada:	4b32      	ldr	r3, [pc, #200]	; (8000ba4 <main+0x3c4>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d110      	bne.n	8000b04 <main+0x324>
                  {
                    led_pwm_setvalue(inner_warm, two);
 8000ae2:	2138      	movs	r1, #56	; 0x38
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f7ff fe49 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, two);
 8000aea:	2138      	movs	r1, #56	; 0x38
 8000aec:	2000      	movs	r0, #0
 8000aee:	f7ff fe45 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8000af2:	2164      	movs	r1, #100	; 0x64
 8000af4:	2003      	movs	r0, #3
 8000af6:	f7ff fe41 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8000afa:	2164      	movs	r1, #100	; 0x64
 8000afc:	2002      	movs	r0, #2
 8000afe:	f7ff fe3d 	bl	800077c <led_pwm_setvalue>
 8000b02:	e084      	b.n	8000c0e <main+0x42e>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, two);
 8000b04:	2138      	movs	r1, #56	; 0x38
 8000b06:	2001      	movs	r0, #1
 8000b08:	f7ff fe38 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, two);
 8000b0c:	2138      	movs	r1, #56	; 0x38
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f7ff fe34 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, two);
 8000b14:	2138      	movs	r1, #56	; 0x38
 8000b16:	2003      	movs	r0, #3
 8000b18:	f7ff fe30 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, two);
 8000b1c:	2138      	movs	r1, #56	; 0x38
 8000b1e:	2002      	movs	r0, #2
 8000b20:	f7ff fe2c 	bl	800077c <led_pwm_setvalue>
 8000b24:	e073      	b.n	8000c0e <main+0x42e>
                  }
                }
                else if (color_polarity == _minus)
 8000b26:	1dfb      	adds	r3, r7, #7
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d146      	bne.n	8000bbc <main+0x3dc>
                {
                  if (endo_status == 1)
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <main+0x3c4>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d110      	bne.n	8000b58 <main+0x378>
                  {
                    led_pwm_setvalue(inner_warm, two);
 8000b36:	2138      	movs	r1, #56	; 0x38
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f7ff fe1f 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_off);
 8000b3e:	2164      	movs	r1, #100	; 0x64
 8000b40:	2000      	movs	r0, #0
 8000b42:	f7ff fe1b 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8000b46:	2164      	movs	r1, #100	; 0x64
 8000b48:	2003      	movs	r0, #3
 8000b4a:	f7ff fe17 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8000b4e:	2164      	movs	r1, #100	; 0x64
 8000b50:	2002      	movs	r0, #2
 8000b52:	f7ff fe13 	bl	800077c <led_pwm_setvalue>
 8000b56:	e05a      	b.n	8000c0e <main+0x42e>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, two);
 8000b58:	2138      	movs	r1, #56	; 0x38
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	f7ff fe0e 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_off);
 8000b60:	2164      	movs	r1, #100	; 0x64
 8000b62:	2000      	movs	r0, #0
 8000b64:	f7ff fe0a 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, two);
 8000b68:	2138      	movs	r1, #56	; 0x38
 8000b6a:	2003      	movs	r0, #3
 8000b6c:	f7ff fe06 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8000b70:	2164      	movs	r1, #100	; 0x64
 8000b72:	2002      	movs	r0, #2
 8000b74:	f7ff fe02 	bl	800077c <led_pwm_setvalue>
 8000b78:	e049      	b.n	8000c0e <main+0x42e>
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	20000050 	.word	0x20000050
 8000b80:	20000098 	.word	0x20000098
 8000b84:	20000168 	.word	0x20000168
 8000b88:	200000e0 	.word	0x200000e0
 8000b8c:	20000030 	.word	0x20000030
 8000b90:	20000034 	.word	0x20000034
 8000b94:	2000003c 	.word	0x2000003c
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	20000040 	.word	0x20000040
 8000ba0:	20000042 	.word	0x20000042
 8000ba4:	20000043 	.word	0x20000043
 8000ba8:	20000044 	.word	0x20000044
 8000bac:	20000038 	.word	0x20000038
 8000bb0:	2000016d 	.word	0x2000016d
 8000bb4:	2000004c 	.word	0x2000004c
 8000bb8:	08006224 	.word	0x08006224
                  }
                }

                else if (color_polarity == _plus)
 8000bbc:	1dfb      	adds	r3, r7, #7
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d124      	bne.n	8000c0e <main+0x42e>
                {
                  if (endo_status == 1)
 8000bc4:	4bda      	ldr	r3, [pc, #872]	; (8000f30 <main+0x750>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d110      	bne.n	8000bee <main+0x40e>
                  {
                    led_pwm_setvalue(inner_warm, all_off);
 8000bcc:	2164      	movs	r1, #100	; 0x64
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f7ff fdd4 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, two);
 8000bd4:	2138      	movs	r1, #56	; 0x38
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f7ff fdd0 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8000bdc:	2164      	movs	r1, #100	; 0x64
 8000bde:	2003      	movs	r0, #3
 8000be0:	f7ff fdcc 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8000be4:	2164      	movs	r1, #100	; 0x64
 8000be6:	2002      	movs	r0, #2
 8000be8:	f7ff fdc8 	bl	800077c <led_pwm_setvalue>
 8000bec:	e00f      	b.n	8000c0e <main+0x42e>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, all_off);
 8000bee:	2164      	movs	r1, #100	; 0x64
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	f7ff fdc3 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, two);
 8000bf6:	2138      	movs	r1, #56	; 0x38
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f7ff fdbf 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8000bfe:	2164      	movs	r1, #100	; 0x64
 8000c00:	2003      	movs	r0, #3
 8000c02:	f7ff fdbb 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, two);
 8000c06:	2138      	movs	r1, #56	; 0x38
 8000c08:	2002      	movs	r0, #2
 8000c0a:	f7ff fdb7 	bl	800077c <led_pwm_setvalue>
                  }
                }
              }

              last_status = two;
 8000c0e:	4bc9      	ldr	r3, [pc, #804]	; (8000f34 <main+0x754>)
 8000c10:	2238      	movs	r2, #56	; 0x38
 8000c12:	701a      	strb	r2, [r3, #0]
              break;
 8000c14:	f001 ff08 	bl	8002a28 <main+0x2248>
            case '3':
              last_inten_pos = 3;
 8000c18:	4bc7      	ldr	r3, [pc, #796]	; (8000f38 <main+0x758>)
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	601a      	str	r2, [r3, #0]
              if (depth_status == 1)
 8000c1e:	4bc7      	ldr	r3, [pc, #796]	; (8000f3c <main+0x75c>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d125      	bne.n	8000c72 <main+0x492>
              {
                if (endo_status == 1)
 8000c26:	4bc2      	ldr	r3, [pc, #776]	; (8000f30 <main+0x750>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d110      	bne.n	8000c50 <main+0x470>
                {
                  led_pwm_setvalue(inner_warm, all_on);
 8000c2e:	2100      	movs	r1, #0
 8000c30:	2001      	movs	r0, #1
 8000c32:	f7ff fda3 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(inner_white, all_on);
 8000c36:	2100      	movs	r1, #0
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f7ff fd9f 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_warm, all_off);
 8000c3e:	2164      	movs	r1, #100	; 0x64
 8000c40:	2003      	movs	r0, #3
 8000c42:	f7ff fd9b 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_white, all_off);
 8000c46:	2164      	movs	r1, #100	; 0x64
 8000c48:	2002      	movs	r0, #2
 8000c4a:	f7ff fd97 	bl	800077c <led_pwm_setvalue>
 8000c4e:	e08d      	b.n	8000d6c <main+0x58c>
                }
                else
                {
                  led_pwm_setvalue(inner_warm, all_on);
 8000c50:	2100      	movs	r1, #0
 8000c52:	2001      	movs	r0, #1
 8000c54:	f7ff fd92 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(inner_white, all_on);
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f7ff fd8e 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_warm, all_on);
 8000c60:	2100      	movs	r1, #0
 8000c62:	2003      	movs	r0, #3
 8000c64:	f7ff fd8a 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_white, all_on);
 8000c68:	2100      	movs	r1, #0
 8000c6a:	2002      	movs	r0, #2
 8000c6c:	f7ff fd86 	bl	800077c <led_pwm_setvalue>
 8000c70:	e07c      	b.n	8000d6c <main+0x58c>
                }
              }

              else
              {
                if (color_polarity == _zero)
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d125      	bne.n	8000cc6 <main+0x4e6>
                {
                  if (endo_status == 1)
 8000c7a:	4bad      	ldr	r3, [pc, #692]	; (8000f30 <main+0x750>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d110      	bne.n	8000ca4 <main+0x4c4>
                  {
                    led_pwm_setvalue(inner_warm, three);
 8000c82:	212e      	movs	r1, #46	; 0x2e
 8000c84:	2001      	movs	r0, #1
 8000c86:	f7ff fd79 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, three);
 8000c8a:	212e      	movs	r1, #46	; 0x2e
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f7ff fd75 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8000c92:	2164      	movs	r1, #100	; 0x64
 8000c94:	2003      	movs	r0, #3
 8000c96:	f7ff fd71 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8000c9a:	2164      	movs	r1, #100	; 0x64
 8000c9c:	2002      	movs	r0, #2
 8000c9e:	f7ff fd6d 	bl	800077c <led_pwm_setvalue>
 8000ca2:	e063      	b.n	8000d6c <main+0x58c>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, three);
 8000ca4:	212e      	movs	r1, #46	; 0x2e
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f7ff fd68 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, three);
 8000cac:	212e      	movs	r1, #46	; 0x2e
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f7ff fd64 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, three);
 8000cb4:	212e      	movs	r1, #46	; 0x2e
 8000cb6:	2003      	movs	r0, #3
 8000cb8:	f7ff fd60 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, three);
 8000cbc:	212e      	movs	r1, #46	; 0x2e
 8000cbe:	2002      	movs	r0, #2
 8000cc0:	f7ff fd5c 	bl	800077c <led_pwm_setvalue>
 8000cc4:	e052      	b.n	8000d6c <main+0x58c>
                  }
                }
                else if (color_polarity == _minus)
 8000cc6:	1dfb      	adds	r3, r7, #7
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d125      	bne.n	8000d1a <main+0x53a>
                {
                  if (endo_status == 1)
 8000cce:	4b98      	ldr	r3, [pc, #608]	; (8000f30 <main+0x750>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d110      	bne.n	8000cf8 <main+0x518>
                  {
                    led_pwm_setvalue(inner_warm, three);
 8000cd6:	212e      	movs	r1, #46	; 0x2e
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f7ff fd4f 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_off);
 8000cde:	2164      	movs	r1, #100	; 0x64
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f7ff fd4b 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8000ce6:	2164      	movs	r1, #100	; 0x64
 8000ce8:	2003      	movs	r0, #3
 8000cea:	f7ff fd47 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8000cee:	2164      	movs	r1, #100	; 0x64
 8000cf0:	2002      	movs	r0, #2
 8000cf2:	f7ff fd43 	bl	800077c <led_pwm_setvalue>
 8000cf6:	e039      	b.n	8000d6c <main+0x58c>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, three);
 8000cf8:	212e      	movs	r1, #46	; 0x2e
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	f7ff fd3e 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_off);
 8000d00:	2164      	movs	r1, #100	; 0x64
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff fd3a 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, three);
 8000d08:	212e      	movs	r1, #46	; 0x2e
 8000d0a:	2003      	movs	r0, #3
 8000d0c:	f7ff fd36 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8000d10:	2164      	movs	r1, #100	; 0x64
 8000d12:	2002      	movs	r0, #2
 8000d14:	f7ff fd32 	bl	800077c <led_pwm_setvalue>
 8000d18:	e028      	b.n	8000d6c <main+0x58c>
                  }
                }

                else if (color_polarity == _plus)
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d124      	bne.n	8000d6c <main+0x58c>
                {
                  if (endo_status == 1)
 8000d22:	4b83      	ldr	r3, [pc, #524]	; (8000f30 <main+0x750>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d110      	bne.n	8000d4c <main+0x56c>
                  {
                    led_pwm_setvalue(inner_warm, all_off);
 8000d2a:	2164      	movs	r1, #100	; 0x64
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f7ff fd25 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, three);
 8000d32:	212e      	movs	r1, #46	; 0x2e
 8000d34:	2000      	movs	r0, #0
 8000d36:	f7ff fd21 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8000d3a:	2164      	movs	r1, #100	; 0x64
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f7ff fd1d 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8000d42:	2164      	movs	r1, #100	; 0x64
 8000d44:	2002      	movs	r0, #2
 8000d46:	f7ff fd19 	bl	800077c <led_pwm_setvalue>
 8000d4a:	e00f      	b.n	8000d6c <main+0x58c>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, all_off);
 8000d4c:	2164      	movs	r1, #100	; 0x64
 8000d4e:	2001      	movs	r0, #1
 8000d50:	f7ff fd14 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, three);
 8000d54:	212e      	movs	r1, #46	; 0x2e
 8000d56:	2000      	movs	r0, #0
 8000d58:	f7ff fd10 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8000d5c:	2164      	movs	r1, #100	; 0x64
 8000d5e:	2003      	movs	r0, #3
 8000d60:	f7ff fd0c 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, three);
 8000d64:	212e      	movs	r1, #46	; 0x2e
 8000d66:	2002      	movs	r0, #2
 8000d68:	f7ff fd08 	bl	800077c <led_pwm_setvalue>
                  }
                }
              }

              last_status = three;
 8000d6c:	4b71      	ldr	r3, [pc, #452]	; (8000f34 <main+0x754>)
 8000d6e:	222e      	movs	r2, #46	; 0x2e
 8000d70:	701a      	strb	r2, [r3, #0]
              break;
 8000d72:	f001 fe59 	bl	8002a28 <main+0x2248>
            case '4':
              last_inten_pos = 4;
 8000d76:	4b70      	ldr	r3, [pc, #448]	; (8000f38 <main+0x758>)
 8000d78:	2204      	movs	r2, #4
 8000d7a:	601a      	str	r2, [r3, #0]
              if (depth_status == 1)
 8000d7c:	4b6f      	ldr	r3, [pc, #444]	; (8000f3c <main+0x75c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d125      	bne.n	8000dd0 <main+0x5f0>
              {
                if (endo_status == 1)
 8000d84:	4b6a      	ldr	r3, [pc, #424]	; (8000f30 <main+0x750>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d110      	bne.n	8000dae <main+0x5ce>
                {
                  led_pwm_setvalue(inner_warm, all_on);
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f7ff fcf4 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(inner_white, all_on);
 8000d94:	2100      	movs	r1, #0
 8000d96:	2000      	movs	r0, #0
 8000d98:	f7ff fcf0 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_warm, all_off);
 8000d9c:	2164      	movs	r1, #100	; 0x64
 8000d9e:	2003      	movs	r0, #3
 8000da0:	f7ff fcec 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_white, all_off);
 8000da4:	2164      	movs	r1, #100	; 0x64
 8000da6:	2002      	movs	r0, #2
 8000da8:	f7ff fce8 	bl	800077c <led_pwm_setvalue>
 8000dac:	e08d      	b.n	8000eca <main+0x6ea>
                }
                else
                {
                  led_pwm_setvalue(inner_warm, all_on);
 8000dae:	2100      	movs	r1, #0
 8000db0:	2001      	movs	r0, #1
 8000db2:	f7ff fce3 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(inner_white, all_on);
 8000db6:	2100      	movs	r1, #0
 8000db8:	2000      	movs	r0, #0
 8000dba:	f7ff fcdf 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_warm, all_on);
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f7ff fcdb 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_white, all_on);
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	2002      	movs	r0, #2
 8000dca:	f7ff fcd7 	bl	800077c <led_pwm_setvalue>
 8000dce:	e07c      	b.n	8000eca <main+0x6ea>
                }
              }

              else
              {
                if (color_polarity == _zero)
 8000dd0:	1dfb      	adds	r3, r7, #7
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d125      	bne.n	8000e24 <main+0x644>
                {
                  if (endo_status == 1)
 8000dd8:	4b55      	ldr	r3, [pc, #340]	; (8000f30 <main+0x750>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d110      	bne.n	8000e02 <main+0x622>
                  {
                    led_pwm_setvalue(inner_warm, four);
 8000de0:	2122      	movs	r1, #34	; 0x22
 8000de2:	2001      	movs	r0, #1
 8000de4:	f7ff fcca 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, four);
 8000de8:	2122      	movs	r1, #34	; 0x22
 8000dea:	2000      	movs	r0, #0
 8000dec:	f7ff fcc6 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8000df0:	2164      	movs	r1, #100	; 0x64
 8000df2:	2003      	movs	r0, #3
 8000df4:	f7ff fcc2 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8000df8:	2164      	movs	r1, #100	; 0x64
 8000dfa:	2002      	movs	r0, #2
 8000dfc:	f7ff fcbe 	bl	800077c <led_pwm_setvalue>
 8000e00:	e063      	b.n	8000eca <main+0x6ea>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, four);
 8000e02:	2122      	movs	r1, #34	; 0x22
 8000e04:	2001      	movs	r0, #1
 8000e06:	f7ff fcb9 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, four);
 8000e0a:	2122      	movs	r1, #34	; 0x22
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f7ff fcb5 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, four);
 8000e12:	2122      	movs	r1, #34	; 0x22
 8000e14:	2003      	movs	r0, #3
 8000e16:	f7ff fcb1 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, four);
 8000e1a:	2122      	movs	r1, #34	; 0x22
 8000e1c:	2002      	movs	r0, #2
 8000e1e:	f7ff fcad 	bl	800077c <led_pwm_setvalue>
 8000e22:	e052      	b.n	8000eca <main+0x6ea>
                  }
                }
                else if (color_polarity == _minus)
 8000e24:	1dfb      	adds	r3, r7, #7
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d125      	bne.n	8000e78 <main+0x698>
                {
                  if (endo_status == 1)
 8000e2c:	4b40      	ldr	r3, [pc, #256]	; (8000f30 <main+0x750>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d110      	bne.n	8000e56 <main+0x676>
                  {
                    led_pwm_setvalue(inner_warm, four);
 8000e34:	2122      	movs	r1, #34	; 0x22
 8000e36:	2001      	movs	r0, #1
 8000e38:	f7ff fca0 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_off);
 8000e3c:	2164      	movs	r1, #100	; 0x64
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f7ff fc9c 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8000e44:	2164      	movs	r1, #100	; 0x64
 8000e46:	2003      	movs	r0, #3
 8000e48:	f7ff fc98 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8000e4c:	2164      	movs	r1, #100	; 0x64
 8000e4e:	2002      	movs	r0, #2
 8000e50:	f7ff fc94 	bl	800077c <led_pwm_setvalue>
 8000e54:	e039      	b.n	8000eca <main+0x6ea>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, four);
 8000e56:	2122      	movs	r1, #34	; 0x22
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f7ff fc8f 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_off);
 8000e5e:	2164      	movs	r1, #100	; 0x64
 8000e60:	2000      	movs	r0, #0
 8000e62:	f7ff fc8b 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, four);
 8000e66:	2122      	movs	r1, #34	; 0x22
 8000e68:	2003      	movs	r0, #3
 8000e6a:	f7ff fc87 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8000e6e:	2164      	movs	r1, #100	; 0x64
 8000e70:	2002      	movs	r0, #2
 8000e72:	f7ff fc83 	bl	800077c <led_pwm_setvalue>
 8000e76:	e028      	b.n	8000eca <main+0x6ea>
                  }
                }

                else if (color_polarity == _plus)
 8000e78:	1dfb      	adds	r3, r7, #7
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d124      	bne.n	8000eca <main+0x6ea>
                {
                  if (endo_status == 1)
 8000e80:	4b2b      	ldr	r3, [pc, #172]	; (8000f30 <main+0x750>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d110      	bne.n	8000eaa <main+0x6ca>
                  {
                    led_pwm_setvalue(inner_warm, all_off);
 8000e88:	2164      	movs	r1, #100	; 0x64
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f7ff fc76 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, four);
 8000e90:	2122      	movs	r1, #34	; 0x22
 8000e92:	2000      	movs	r0, #0
 8000e94:	f7ff fc72 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8000e98:	2164      	movs	r1, #100	; 0x64
 8000e9a:	2003      	movs	r0, #3
 8000e9c:	f7ff fc6e 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8000ea0:	2164      	movs	r1, #100	; 0x64
 8000ea2:	2002      	movs	r0, #2
 8000ea4:	f7ff fc6a 	bl	800077c <led_pwm_setvalue>
 8000ea8:	e00f      	b.n	8000eca <main+0x6ea>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, all_off);
 8000eaa:	2164      	movs	r1, #100	; 0x64
 8000eac:	2001      	movs	r0, #1
 8000eae:	f7ff fc65 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, four);
 8000eb2:	2122      	movs	r1, #34	; 0x22
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f7ff fc61 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8000eba:	2164      	movs	r1, #100	; 0x64
 8000ebc:	2003      	movs	r0, #3
 8000ebe:	f7ff fc5d 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, four);
 8000ec2:	2122      	movs	r1, #34	; 0x22
 8000ec4:	2002      	movs	r0, #2
 8000ec6:	f7ff fc59 	bl	800077c <led_pwm_setvalue>
                  }
                }
              }

              last_status = four;
 8000eca:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <main+0x754>)
 8000ecc:	2222      	movs	r2, #34	; 0x22
 8000ece:	701a      	strb	r2, [r3, #0]
              break;
 8000ed0:	f001 fdaa 	bl	8002a28 <main+0x2248>
            case '5':
              last_inten_pos = 5;
 8000ed4:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <main+0x758>)
 8000ed6:	2205      	movs	r2, #5
 8000ed8:	601a      	str	r2, [r3, #0]
              if (depth_status == 1)
 8000eda:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <main+0x75c>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d12e      	bne.n	8000f40 <main+0x760>
              {
                if (endo_status == 1)
 8000ee2:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <main+0x750>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d110      	bne.n	8000f0c <main+0x72c>
                {
                  led_pwm_setvalue(inner_warm, all_on);
 8000eea:	2100      	movs	r1, #0
 8000eec:	2001      	movs	r0, #1
 8000eee:	f7ff fc45 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(inner_white, all_on);
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f7ff fc41 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_warm, all_off);
 8000efa:	2164      	movs	r1, #100	; 0x64
 8000efc:	2003      	movs	r0, #3
 8000efe:	f7ff fc3d 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_white, all_off);
 8000f02:	2164      	movs	r1, #100	; 0x64
 8000f04:	2002      	movs	r0, #2
 8000f06:	f7ff fc39 	bl	800077c <led_pwm_setvalue>
 8000f0a:	e096      	b.n	800103a <main+0x85a>
                }
                else
                {
                  led_pwm_setvalue(inner_warm, all_on);
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2001      	movs	r0, #1
 8000f10:	f7ff fc34 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(inner_white, all_on);
 8000f14:	2100      	movs	r1, #0
 8000f16:	2000      	movs	r0, #0
 8000f18:	f7ff fc30 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_warm, all_on);
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	2003      	movs	r0, #3
 8000f20:	f7ff fc2c 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_white, all_on);
 8000f24:	2100      	movs	r1, #0
 8000f26:	2002      	movs	r0, #2
 8000f28:	f7ff fc28 	bl	800077c <led_pwm_setvalue>
 8000f2c:	e085      	b.n	800103a <main+0x85a>
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	20000043 	.word	0x20000043
 8000f34:	20000038 	.word	0x20000038
 8000f38:	2000004c 	.word	0x2000004c
 8000f3c:	20000042 	.word	0x20000042
                }
              }

              else
              {
                if (color_polarity == _zero)
 8000f40:	1dfb      	adds	r3, r7, #7
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d125      	bne.n	8000f94 <main+0x7b4>
                {
                  if (endo_status == 1)
 8000f48:	4bd6      	ldr	r3, [pc, #856]	; (80012a4 <main+0xac4>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d110      	bne.n	8000f72 <main+0x792>
                  {
                    led_pwm_setvalue(inner_warm, five);
 8000f50:	211c      	movs	r1, #28
 8000f52:	2001      	movs	r0, #1
 8000f54:	f7ff fc12 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, five);
 8000f58:	211c      	movs	r1, #28
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f7ff fc0e 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8000f60:	2164      	movs	r1, #100	; 0x64
 8000f62:	2003      	movs	r0, #3
 8000f64:	f7ff fc0a 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8000f68:	2164      	movs	r1, #100	; 0x64
 8000f6a:	2002      	movs	r0, #2
 8000f6c:	f7ff fc06 	bl	800077c <led_pwm_setvalue>
 8000f70:	e063      	b.n	800103a <main+0x85a>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, five);
 8000f72:	211c      	movs	r1, #28
 8000f74:	2001      	movs	r0, #1
 8000f76:	f7ff fc01 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, five);
 8000f7a:	211c      	movs	r1, #28
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f7ff fbfd 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, five);
 8000f82:	211c      	movs	r1, #28
 8000f84:	2003      	movs	r0, #3
 8000f86:	f7ff fbf9 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, five);
 8000f8a:	211c      	movs	r1, #28
 8000f8c:	2002      	movs	r0, #2
 8000f8e:	f7ff fbf5 	bl	800077c <led_pwm_setvalue>
 8000f92:	e052      	b.n	800103a <main+0x85a>
                  }
                }
                else if (color_polarity == _minus)
 8000f94:	1dfb      	adds	r3, r7, #7
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d125      	bne.n	8000fe8 <main+0x808>
                {
                  if (endo_status == 1)
 8000f9c:	4bc1      	ldr	r3, [pc, #772]	; (80012a4 <main+0xac4>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d110      	bne.n	8000fc6 <main+0x7e6>
                  {
                    led_pwm_setvalue(inner_warm, five);
 8000fa4:	211c      	movs	r1, #28
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f7ff fbe8 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_off);
 8000fac:	2164      	movs	r1, #100	; 0x64
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f7ff fbe4 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8000fb4:	2164      	movs	r1, #100	; 0x64
 8000fb6:	2003      	movs	r0, #3
 8000fb8:	f7ff fbe0 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8000fbc:	2164      	movs	r1, #100	; 0x64
 8000fbe:	2002      	movs	r0, #2
 8000fc0:	f7ff fbdc 	bl	800077c <led_pwm_setvalue>
 8000fc4:	e039      	b.n	800103a <main+0x85a>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, five);
 8000fc6:	211c      	movs	r1, #28
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f7ff fbd7 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_off);
 8000fce:	2164      	movs	r1, #100	; 0x64
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f7ff fbd3 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, five);
 8000fd6:	211c      	movs	r1, #28
 8000fd8:	2003      	movs	r0, #3
 8000fda:	f7ff fbcf 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8000fde:	2164      	movs	r1, #100	; 0x64
 8000fe0:	2002      	movs	r0, #2
 8000fe2:	f7ff fbcb 	bl	800077c <led_pwm_setvalue>
 8000fe6:	e028      	b.n	800103a <main+0x85a>
                  }
                }

                else if (color_polarity == _plus)
 8000fe8:	1dfb      	adds	r3, r7, #7
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d124      	bne.n	800103a <main+0x85a>
                {
                  if (endo_status == 1)
 8000ff0:	4bac      	ldr	r3, [pc, #688]	; (80012a4 <main+0xac4>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d110      	bne.n	800101a <main+0x83a>
                  {
                    led_pwm_setvalue(inner_warm, all_off);
 8000ff8:	2164      	movs	r1, #100	; 0x64
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f7ff fbbe 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, five);
 8001000:	211c      	movs	r1, #28
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff fbba 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8001008:	2164      	movs	r1, #100	; 0x64
 800100a:	2003      	movs	r0, #3
 800100c:	f7ff fbb6 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8001010:	2164      	movs	r1, #100	; 0x64
 8001012:	2002      	movs	r0, #2
 8001014:	f7ff fbb2 	bl	800077c <led_pwm_setvalue>
 8001018:	e00f      	b.n	800103a <main+0x85a>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, all_off);
 800101a:	2164      	movs	r1, #100	; 0x64
 800101c:	2001      	movs	r0, #1
 800101e:	f7ff fbad 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, five);
 8001022:	211c      	movs	r1, #28
 8001024:	2000      	movs	r0, #0
 8001026:	f7ff fba9 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 800102a:	2164      	movs	r1, #100	; 0x64
 800102c:	2003      	movs	r0, #3
 800102e:	f7ff fba5 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, one);
 8001032:	2146      	movs	r1, #70	; 0x46
 8001034:	2002      	movs	r0, #2
 8001036:	f7ff fba1 	bl	800077c <led_pwm_setvalue>
                  }
                }
              }

              last_status = five;
 800103a:	4b9b      	ldr	r3, [pc, #620]	; (80012a8 <main+0xac8>)
 800103c:	221c      	movs	r2, #28
 800103e:	701a      	strb	r2, [r3, #0]
              break;
 8001040:	f001 fcf2 	bl	8002a28 <main+0x2248>
            case '6':
              last_inten_pos = 6;
 8001044:	4b99      	ldr	r3, [pc, #612]	; (80012ac <main+0xacc>)
 8001046:	2206      	movs	r2, #6
 8001048:	601a      	str	r2, [r3, #0]
              if (depth_status == 1)
 800104a:	4b99      	ldr	r3, [pc, #612]	; (80012b0 <main+0xad0>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d125      	bne.n	800109e <main+0x8be>
              {
                if (endo_status == 1)
 8001052:	4b94      	ldr	r3, [pc, #592]	; (80012a4 <main+0xac4>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d110      	bne.n	800107c <main+0x89c>
                {
                  led_pwm_setvalue(inner_warm, all_on);
 800105a:	2100      	movs	r1, #0
 800105c:	2001      	movs	r0, #1
 800105e:	f7ff fb8d 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(inner_white, all_on);
 8001062:	2100      	movs	r1, #0
 8001064:	2000      	movs	r0, #0
 8001066:	f7ff fb89 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_warm, all_off);
 800106a:	2164      	movs	r1, #100	; 0x64
 800106c:	2003      	movs	r0, #3
 800106e:	f7ff fb85 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_white, all_off);
 8001072:	2164      	movs	r1, #100	; 0x64
 8001074:	2002      	movs	r0, #2
 8001076:	f7ff fb81 	bl	800077c <led_pwm_setvalue>
 800107a:	e08d      	b.n	8001198 <main+0x9b8>
                }
                else
                {
                  led_pwm_setvalue(inner_warm, all_on);
 800107c:	2100      	movs	r1, #0
 800107e:	2001      	movs	r0, #1
 8001080:	f7ff fb7c 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(inner_white, all_on);
 8001084:	2100      	movs	r1, #0
 8001086:	2000      	movs	r0, #0
 8001088:	f7ff fb78 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_warm, all_on);
 800108c:	2100      	movs	r1, #0
 800108e:	2003      	movs	r0, #3
 8001090:	f7ff fb74 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_white, all_on);
 8001094:	2100      	movs	r1, #0
 8001096:	2002      	movs	r0, #2
 8001098:	f7ff fb70 	bl	800077c <led_pwm_setvalue>
 800109c:	e07c      	b.n	8001198 <main+0x9b8>
                }
              }

              else
              {
                if (color_polarity == _zero)
 800109e:	1dfb      	adds	r3, r7, #7
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d125      	bne.n	80010f2 <main+0x912>
                {
                  if (endo_status == 1)
 80010a6:	4b7f      	ldr	r3, [pc, #508]	; (80012a4 <main+0xac4>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d110      	bne.n	80010d0 <main+0x8f0>
                  {
                    led_pwm_setvalue(inner_warm, six);
 80010ae:	2118      	movs	r1, #24
 80010b0:	2001      	movs	r0, #1
 80010b2:	f7ff fb63 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, six);
 80010b6:	2118      	movs	r1, #24
 80010b8:	2000      	movs	r0, #0
 80010ba:	f7ff fb5f 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 80010be:	2164      	movs	r1, #100	; 0x64
 80010c0:	2003      	movs	r0, #3
 80010c2:	f7ff fb5b 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 80010c6:	2164      	movs	r1, #100	; 0x64
 80010c8:	2002      	movs	r0, #2
 80010ca:	f7ff fb57 	bl	800077c <led_pwm_setvalue>
 80010ce:	e063      	b.n	8001198 <main+0x9b8>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, six);
 80010d0:	2118      	movs	r1, #24
 80010d2:	2001      	movs	r0, #1
 80010d4:	f7ff fb52 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, six);
 80010d8:	2118      	movs	r1, #24
 80010da:	2000      	movs	r0, #0
 80010dc:	f7ff fb4e 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, six);
 80010e0:	2118      	movs	r1, #24
 80010e2:	2003      	movs	r0, #3
 80010e4:	f7ff fb4a 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, six);
 80010e8:	2118      	movs	r1, #24
 80010ea:	2002      	movs	r0, #2
 80010ec:	f7ff fb46 	bl	800077c <led_pwm_setvalue>
 80010f0:	e052      	b.n	8001198 <main+0x9b8>
                  }
                }
                else if (color_polarity == _minus)
 80010f2:	1dfb      	adds	r3, r7, #7
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d125      	bne.n	8001146 <main+0x966>
                {
                  if (endo_status == 1)
 80010fa:	4b6a      	ldr	r3, [pc, #424]	; (80012a4 <main+0xac4>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d110      	bne.n	8001124 <main+0x944>
                  {
                    led_pwm_setvalue(inner_warm, six);
 8001102:	2118      	movs	r1, #24
 8001104:	2001      	movs	r0, #1
 8001106:	f7ff fb39 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_off);
 800110a:	2164      	movs	r1, #100	; 0x64
 800110c:	2000      	movs	r0, #0
 800110e:	f7ff fb35 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8001112:	2164      	movs	r1, #100	; 0x64
 8001114:	2003      	movs	r0, #3
 8001116:	f7ff fb31 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 800111a:	2164      	movs	r1, #100	; 0x64
 800111c:	2002      	movs	r0, #2
 800111e:	f7ff fb2d 	bl	800077c <led_pwm_setvalue>
 8001122:	e039      	b.n	8001198 <main+0x9b8>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, six);
 8001124:	2118      	movs	r1, #24
 8001126:	2001      	movs	r0, #1
 8001128:	f7ff fb28 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_off);
 800112c:	2164      	movs	r1, #100	; 0x64
 800112e:	2000      	movs	r0, #0
 8001130:	f7ff fb24 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, six);
 8001134:	2118      	movs	r1, #24
 8001136:	2003      	movs	r0, #3
 8001138:	f7ff fb20 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 800113c:	2164      	movs	r1, #100	; 0x64
 800113e:	2002      	movs	r0, #2
 8001140:	f7ff fb1c 	bl	800077c <led_pwm_setvalue>
 8001144:	e028      	b.n	8001198 <main+0x9b8>
                  }
                }

                else if (color_polarity == _plus)
 8001146:	1dfb      	adds	r3, r7, #7
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d124      	bne.n	8001198 <main+0x9b8>
                {
                  if (endo_status == 1)
 800114e:	4b55      	ldr	r3, [pc, #340]	; (80012a4 <main+0xac4>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d110      	bne.n	8001178 <main+0x998>
                  {
                    led_pwm_setvalue(inner_warm, all_off);
 8001156:	2164      	movs	r1, #100	; 0x64
 8001158:	2001      	movs	r0, #1
 800115a:	f7ff fb0f 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, six);
 800115e:	2118      	movs	r1, #24
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff fb0b 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8001166:	2164      	movs	r1, #100	; 0x64
 8001168:	2003      	movs	r0, #3
 800116a:	f7ff fb07 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 800116e:	2164      	movs	r1, #100	; 0x64
 8001170:	2002      	movs	r0, #2
 8001172:	f7ff fb03 	bl	800077c <led_pwm_setvalue>
 8001176:	e00f      	b.n	8001198 <main+0x9b8>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, all_off);
 8001178:	2164      	movs	r1, #100	; 0x64
 800117a:	2001      	movs	r0, #1
 800117c:	f7ff fafe 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, six);
 8001180:	2118      	movs	r1, #24
 8001182:	2000      	movs	r0, #0
 8001184:	f7ff fafa 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8001188:	2164      	movs	r1, #100	; 0x64
 800118a:	2003      	movs	r0, #3
 800118c:	f7ff faf6 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, six);
 8001190:	2118      	movs	r1, #24
 8001192:	2002      	movs	r0, #2
 8001194:	f7ff faf2 	bl	800077c <led_pwm_setvalue>
                  }
                }
              }

              last_status = six;
 8001198:	4b43      	ldr	r3, [pc, #268]	; (80012a8 <main+0xac8>)
 800119a:	2218      	movs	r2, #24
 800119c:	701a      	strb	r2, [r3, #0]
              break;
 800119e:	f001 fc43 	bl	8002a28 <main+0x2248>
            case '7':
              last_inten_pos = 7;
 80011a2:	4b42      	ldr	r3, [pc, #264]	; (80012ac <main+0xacc>)
 80011a4:	2207      	movs	r2, #7
 80011a6:	601a      	str	r2, [r3, #0]
              if (depth_status == 1)
 80011a8:	4b41      	ldr	r3, [pc, #260]	; (80012b0 <main+0xad0>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d125      	bne.n	80011fc <main+0xa1c>
              {
                if (endo_status == 1)
 80011b0:	4b3c      	ldr	r3, [pc, #240]	; (80012a4 <main+0xac4>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d110      	bne.n	80011da <main+0x9fa>
                {
                  led_pwm_setvalue(inner_warm, all_on);
 80011b8:	2100      	movs	r1, #0
 80011ba:	2001      	movs	r0, #1
 80011bc:	f7ff fade 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(inner_white, all_on);
 80011c0:	2100      	movs	r1, #0
 80011c2:	2000      	movs	r0, #0
 80011c4:	f7ff fada 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_warm, all_off);
 80011c8:	2164      	movs	r1, #100	; 0x64
 80011ca:	2003      	movs	r0, #3
 80011cc:	f7ff fad6 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_white, all_off);
 80011d0:	2164      	movs	r1, #100	; 0x64
 80011d2:	2002      	movs	r0, #2
 80011d4:	f7ff fad2 	bl	800077c <led_pwm_setvalue>
 80011d8:	e095      	b.n	8001306 <main+0xb26>
                }
                else
                {
                  led_pwm_setvalue(inner_warm, all_on);
 80011da:	2100      	movs	r1, #0
 80011dc:	2001      	movs	r0, #1
 80011de:	f7ff facd 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(inner_white, all_on);
 80011e2:	2100      	movs	r1, #0
 80011e4:	2000      	movs	r0, #0
 80011e6:	f7ff fac9 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_warm, all_on);
 80011ea:	2100      	movs	r1, #0
 80011ec:	2003      	movs	r0, #3
 80011ee:	f7ff fac5 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_white, all_on);
 80011f2:	2100      	movs	r1, #0
 80011f4:	2002      	movs	r0, #2
 80011f6:	f7ff fac1 	bl	800077c <led_pwm_setvalue>
 80011fa:	e084      	b.n	8001306 <main+0xb26>
                }
              }

              else
              {
                if (color_polarity == _zero)
 80011fc:	1dfb      	adds	r3, r7, #7
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b02      	cmp	r3, #2
 8001202:	d125      	bne.n	8001250 <main+0xa70>
                {
                  if (endo_status == 1)
 8001204:	4b27      	ldr	r3, [pc, #156]	; (80012a4 <main+0xac4>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d110      	bne.n	800122e <main+0xa4e>
                  {
                    led_pwm_setvalue(inner_warm, seven);
 800120c:	2114      	movs	r1, #20
 800120e:	2001      	movs	r0, #1
 8001210:	f7ff fab4 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, seven);
 8001214:	2114      	movs	r1, #20
 8001216:	2000      	movs	r0, #0
 8001218:	f7ff fab0 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 800121c:	2164      	movs	r1, #100	; 0x64
 800121e:	2003      	movs	r0, #3
 8001220:	f7ff faac 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8001224:	2164      	movs	r1, #100	; 0x64
 8001226:	2002      	movs	r0, #2
 8001228:	f7ff faa8 	bl	800077c <led_pwm_setvalue>
 800122c:	e06b      	b.n	8001306 <main+0xb26>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, seven);
 800122e:	2114      	movs	r1, #20
 8001230:	2001      	movs	r0, #1
 8001232:	f7ff faa3 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, seven);
 8001236:	2114      	movs	r1, #20
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff fa9f 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, seven);
 800123e:	2114      	movs	r1, #20
 8001240:	2003      	movs	r0, #3
 8001242:	f7ff fa9b 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, seven);
 8001246:	2114      	movs	r1, #20
 8001248:	2002      	movs	r0, #2
 800124a:	f7ff fa97 	bl	800077c <led_pwm_setvalue>
 800124e:	e05a      	b.n	8001306 <main+0xb26>
                  }
                }
                else if (color_polarity == _minus)
 8001250:	1dfb      	adds	r3, r7, #7
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d12d      	bne.n	80012b4 <main+0xad4>
                {
                  if (endo_status == 1)
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <main+0xac4>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d110      	bne.n	8001282 <main+0xaa2>
                  {
                    led_pwm_setvalue(inner_warm, seven);
 8001260:	2114      	movs	r1, #20
 8001262:	2001      	movs	r0, #1
 8001264:	f7ff fa8a 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_off);
 8001268:	2164      	movs	r1, #100	; 0x64
 800126a:	2000      	movs	r0, #0
 800126c:	f7ff fa86 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8001270:	2164      	movs	r1, #100	; 0x64
 8001272:	2003      	movs	r0, #3
 8001274:	f7ff fa82 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8001278:	2164      	movs	r1, #100	; 0x64
 800127a:	2002      	movs	r0, #2
 800127c:	f7ff fa7e 	bl	800077c <led_pwm_setvalue>
 8001280:	e041      	b.n	8001306 <main+0xb26>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, seven);
 8001282:	2114      	movs	r1, #20
 8001284:	2001      	movs	r0, #1
 8001286:	f7ff fa79 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_off);
 800128a:	2164      	movs	r1, #100	; 0x64
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff fa75 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, seven);
 8001292:	2114      	movs	r1, #20
 8001294:	2003      	movs	r0, #3
 8001296:	f7ff fa71 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 800129a:	2164      	movs	r1, #100	; 0x64
 800129c:	2002      	movs	r0, #2
 800129e:	f7ff fa6d 	bl	800077c <led_pwm_setvalue>
 80012a2:	e030      	b.n	8001306 <main+0xb26>
 80012a4:	20000043 	.word	0x20000043
 80012a8:	20000038 	.word	0x20000038
 80012ac:	2000004c 	.word	0x2000004c
 80012b0:	20000042 	.word	0x20000042
                  }
                }

                else if (color_polarity == _plus)
 80012b4:	1dfb      	adds	r3, r7, #7
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d124      	bne.n	8001306 <main+0xb26>
                {
                  if (endo_status == 1)
 80012bc:	4bd8      	ldr	r3, [pc, #864]	; (8001620 <main+0xe40>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d110      	bne.n	80012e6 <main+0xb06>
                  {
                    led_pwm_setvalue(inner_warm, all_off);
 80012c4:	2164      	movs	r1, #100	; 0x64
 80012c6:	2001      	movs	r0, #1
 80012c8:	f7ff fa58 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, seven);
 80012cc:	2114      	movs	r1, #20
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff fa54 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 80012d4:	2164      	movs	r1, #100	; 0x64
 80012d6:	2003      	movs	r0, #3
 80012d8:	f7ff fa50 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 80012dc:	2164      	movs	r1, #100	; 0x64
 80012de:	2002      	movs	r0, #2
 80012e0:	f7ff fa4c 	bl	800077c <led_pwm_setvalue>
 80012e4:	e00f      	b.n	8001306 <main+0xb26>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, all_off);
 80012e6:	2164      	movs	r1, #100	; 0x64
 80012e8:	2001      	movs	r0, #1
 80012ea:	f7ff fa47 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, seven);
 80012ee:	2114      	movs	r1, #20
 80012f0:	2000      	movs	r0, #0
 80012f2:	f7ff fa43 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 80012f6:	2164      	movs	r1, #100	; 0x64
 80012f8:	2003      	movs	r0, #3
 80012fa:	f7ff fa3f 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, seven);
 80012fe:	2114      	movs	r1, #20
 8001300:	2002      	movs	r0, #2
 8001302:	f7ff fa3b 	bl	800077c <led_pwm_setvalue>
                  }
                }
              }

              last_status = seven;
 8001306:	4bc7      	ldr	r3, [pc, #796]	; (8001624 <main+0xe44>)
 8001308:	2214      	movs	r2, #20
 800130a:	701a      	strb	r2, [r3, #0]
              break;
 800130c:	f001 fb8c 	bl	8002a28 <main+0x2248>
            case '8':
              last_inten_pos = 8;
 8001310:	4bc5      	ldr	r3, [pc, #788]	; (8001628 <main+0xe48>)
 8001312:	2208      	movs	r2, #8
 8001314:	601a      	str	r2, [r3, #0]
              if (depth_status == 1)
 8001316:	4bc5      	ldr	r3, [pc, #788]	; (800162c <main+0xe4c>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d125      	bne.n	800136a <main+0xb8a>
              {
                if (endo_status == 1)
 800131e:	4bc0      	ldr	r3, [pc, #768]	; (8001620 <main+0xe40>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d110      	bne.n	8001348 <main+0xb68>
                {
                  led_pwm_setvalue(inner_warm, all_on);
 8001326:	2100      	movs	r1, #0
 8001328:	2001      	movs	r0, #1
 800132a:	f7ff fa27 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(inner_white, all_on);
 800132e:	2100      	movs	r1, #0
 8001330:	2000      	movs	r0, #0
 8001332:	f7ff fa23 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_warm, all_off);
 8001336:	2164      	movs	r1, #100	; 0x64
 8001338:	2003      	movs	r0, #3
 800133a:	f7ff fa1f 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_white, all_off);
 800133e:	2164      	movs	r1, #100	; 0x64
 8001340:	2002      	movs	r0, #2
 8001342:	f7ff fa1b 	bl	800077c <led_pwm_setvalue>
 8001346:	e08d      	b.n	8001464 <main+0xc84>
                }
                else
                {
                  led_pwm_setvalue(inner_warm, all_on);
 8001348:	2100      	movs	r1, #0
 800134a:	2001      	movs	r0, #1
 800134c:	f7ff fa16 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(inner_white, all_on);
 8001350:	2100      	movs	r1, #0
 8001352:	2000      	movs	r0, #0
 8001354:	f7ff fa12 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_warm, all_on);
 8001358:	2100      	movs	r1, #0
 800135a:	2003      	movs	r0, #3
 800135c:	f7ff fa0e 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_white, all_on);
 8001360:	2100      	movs	r1, #0
 8001362:	2002      	movs	r0, #2
 8001364:	f7ff fa0a 	bl	800077c <led_pwm_setvalue>
 8001368:	e07c      	b.n	8001464 <main+0xc84>
                }
              }

              else
              {
                if (color_polarity == _zero)
 800136a:	1dfb      	adds	r3, r7, #7
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b02      	cmp	r3, #2
 8001370:	d125      	bne.n	80013be <main+0xbde>
                {
                  if (endo_status == 1)
 8001372:	4bab      	ldr	r3, [pc, #684]	; (8001620 <main+0xe40>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d110      	bne.n	800139c <main+0xbbc>
                  {
                    led_pwm_setvalue(inner_warm, eight);
 800137a:	2110      	movs	r1, #16
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff f9fd 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, eight);
 8001382:	2110      	movs	r1, #16
 8001384:	2000      	movs	r0, #0
 8001386:	f7ff f9f9 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 800138a:	2164      	movs	r1, #100	; 0x64
 800138c:	2003      	movs	r0, #3
 800138e:	f7ff f9f5 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8001392:	2164      	movs	r1, #100	; 0x64
 8001394:	2002      	movs	r0, #2
 8001396:	f7ff f9f1 	bl	800077c <led_pwm_setvalue>
 800139a:	e063      	b.n	8001464 <main+0xc84>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, eight);
 800139c:	2110      	movs	r1, #16
 800139e:	2001      	movs	r0, #1
 80013a0:	f7ff f9ec 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, eight);
 80013a4:	2110      	movs	r1, #16
 80013a6:	2000      	movs	r0, #0
 80013a8:	f7ff f9e8 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, eight);
 80013ac:	2110      	movs	r1, #16
 80013ae:	2003      	movs	r0, #3
 80013b0:	f7ff f9e4 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, eight);
 80013b4:	2110      	movs	r1, #16
 80013b6:	2002      	movs	r0, #2
 80013b8:	f7ff f9e0 	bl	800077c <led_pwm_setvalue>
 80013bc:	e052      	b.n	8001464 <main+0xc84>
                  }
                }
                else if (color_polarity == _minus)
 80013be:	1dfb      	adds	r3, r7, #7
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d125      	bne.n	8001412 <main+0xc32>
                {
                  if (endo_status == 1)
 80013c6:	4b96      	ldr	r3, [pc, #600]	; (8001620 <main+0xe40>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d110      	bne.n	80013f0 <main+0xc10>
                  {
                    led_pwm_setvalue(inner_warm, eight);
 80013ce:	2110      	movs	r1, #16
 80013d0:	2001      	movs	r0, #1
 80013d2:	f7ff f9d3 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_off);
 80013d6:	2164      	movs	r1, #100	; 0x64
 80013d8:	2000      	movs	r0, #0
 80013da:	f7ff f9cf 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 80013de:	2164      	movs	r1, #100	; 0x64
 80013e0:	2003      	movs	r0, #3
 80013e2:	f7ff f9cb 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 80013e6:	2164      	movs	r1, #100	; 0x64
 80013e8:	2002      	movs	r0, #2
 80013ea:	f7ff f9c7 	bl	800077c <led_pwm_setvalue>
 80013ee:	e039      	b.n	8001464 <main+0xc84>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, eight);
 80013f0:	2110      	movs	r1, #16
 80013f2:	2001      	movs	r0, #1
 80013f4:	f7ff f9c2 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_off);
 80013f8:	2164      	movs	r1, #100	; 0x64
 80013fa:	2000      	movs	r0, #0
 80013fc:	f7ff f9be 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, eight);
 8001400:	2110      	movs	r1, #16
 8001402:	2003      	movs	r0, #3
 8001404:	f7ff f9ba 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8001408:	2164      	movs	r1, #100	; 0x64
 800140a:	2002      	movs	r0, #2
 800140c:	f7ff f9b6 	bl	800077c <led_pwm_setvalue>
 8001410:	e028      	b.n	8001464 <main+0xc84>
                  }
                }

                else if (color_polarity == _plus)
 8001412:	1dfb      	adds	r3, r7, #7
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d124      	bne.n	8001464 <main+0xc84>
                {
                  if (endo_status == 1)
 800141a:	4b81      	ldr	r3, [pc, #516]	; (8001620 <main+0xe40>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d110      	bne.n	8001444 <main+0xc64>
                  {
                    led_pwm_setvalue(inner_warm, all_off);
 8001422:	2164      	movs	r1, #100	; 0x64
 8001424:	2001      	movs	r0, #1
 8001426:	f7ff f9a9 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, eight);
 800142a:	2110      	movs	r1, #16
 800142c:	2000      	movs	r0, #0
 800142e:	f7ff f9a5 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8001432:	2164      	movs	r1, #100	; 0x64
 8001434:	2003      	movs	r0, #3
 8001436:	f7ff f9a1 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 800143a:	2164      	movs	r1, #100	; 0x64
 800143c:	2002      	movs	r0, #2
 800143e:	f7ff f99d 	bl	800077c <led_pwm_setvalue>
 8001442:	e00f      	b.n	8001464 <main+0xc84>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, all_off);
 8001444:	2164      	movs	r1, #100	; 0x64
 8001446:	2001      	movs	r0, #1
 8001448:	f7ff f998 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, eight);
 800144c:	2110      	movs	r1, #16
 800144e:	2000      	movs	r0, #0
 8001450:	f7ff f994 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8001454:	2164      	movs	r1, #100	; 0x64
 8001456:	2003      	movs	r0, #3
 8001458:	f7ff f990 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, eight);
 800145c:	2110      	movs	r1, #16
 800145e:	2002      	movs	r0, #2
 8001460:	f7ff f98c 	bl	800077c <led_pwm_setvalue>
                  }
                }
              }

              last_status = eight;
 8001464:	4b6f      	ldr	r3, [pc, #444]	; (8001624 <main+0xe44>)
 8001466:	2210      	movs	r2, #16
 8001468:	701a      	strb	r2, [r3, #0]
              break;
 800146a:	f001 fadd 	bl	8002a28 <main+0x2248>
            case '9':
              last_inten_pos = 9;
 800146e:	4b6e      	ldr	r3, [pc, #440]	; (8001628 <main+0xe48>)
 8001470:	2209      	movs	r2, #9
 8001472:	601a      	str	r2, [r3, #0]
              if (depth_status == 1)
 8001474:	4b6d      	ldr	r3, [pc, #436]	; (800162c <main+0xe4c>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d125      	bne.n	80014c8 <main+0xce8>
              {
                if (endo_status == 1)
 800147c:	4b68      	ldr	r3, [pc, #416]	; (8001620 <main+0xe40>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d110      	bne.n	80014a6 <main+0xcc6>
                {
                  led_pwm_setvalue(inner_warm, all_on);
 8001484:	2100      	movs	r1, #0
 8001486:	2001      	movs	r0, #1
 8001488:	f7ff f978 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(inner_white, all_on);
 800148c:	2100      	movs	r1, #0
 800148e:	2000      	movs	r0, #0
 8001490:	f7ff f974 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_warm, all_off);
 8001494:	2164      	movs	r1, #100	; 0x64
 8001496:	2003      	movs	r0, #3
 8001498:	f7ff f970 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_white, all_off);
 800149c:	2164      	movs	r1, #100	; 0x64
 800149e:	2002      	movs	r0, #2
 80014a0:	f7ff f96c 	bl	800077c <led_pwm_setvalue>
 80014a4:	e08d      	b.n	80015c2 <main+0xde2>
                }
                else
                {
                  led_pwm_setvalue(inner_warm, all_on);
 80014a6:	2100      	movs	r1, #0
 80014a8:	2001      	movs	r0, #1
 80014aa:	f7ff f967 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(inner_white, all_on);
 80014ae:	2100      	movs	r1, #0
 80014b0:	2000      	movs	r0, #0
 80014b2:	f7ff f963 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_warm, all_on);
 80014b6:	2100      	movs	r1, #0
 80014b8:	2003      	movs	r0, #3
 80014ba:	f7ff f95f 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_white, all_on);
 80014be:	2100      	movs	r1, #0
 80014c0:	2002      	movs	r0, #2
 80014c2:	f7ff f95b 	bl	800077c <led_pwm_setvalue>
 80014c6:	e07c      	b.n	80015c2 <main+0xde2>
                }
              }

              else
              {
                if (color_polarity == _zero)
 80014c8:	1dfb      	adds	r3, r7, #7
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d125      	bne.n	800151c <main+0xd3c>
                {
                  if (endo_status == 1)
 80014d0:	4b53      	ldr	r3, [pc, #332]	; (8001620 <main+0xe40>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d110      	bne.n	80014fa <main+0xd1a>
                  {
                    led_pwm_setvalue(inner_warm, nine);
 80014d8:	210c      	movs	r1, #12
 80014da:	2001      	movs	r0, #1
 80014dc:	f7ff f94e 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, nine);
 80014e0:	210c      	movs	r1, #12
 80014e2:	2000      	movs	r0, #0
 80014e4:	f7ff f94a 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 80014e8:	2164      	movs	r1, #100	; 0x64
 80014ea:	2003      	movs	r0, #3
 80014ec:	f7ff f946 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 80014f0:	2164      	movs	r1, #100	; 0x64
 80014f2:	2002      	movs	r0, #2
 80014f4:	f7ff f942 	bl	800077c <led_pwm_setvalue>
 80014f8:	e063      	b.n	80015c2 <main+0xde2>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, nine);
 80014fa:	210c      	movs	r1, #12
 80014fc:	2001      	movs	r0, #1
 80014fe:	f7ff f93d 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, nine);
 8001502:	210c      	movs	r1, #12
 8001504:	2000      	movs	r0, #0
 8001506:	f7ff f939 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, nine);
 800150a:	210c      	movs	r1, #12
 800150c:	2003      	movs	r0, #3
 800150e:	f7ff f935 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, nine);
 8001512:	210c      	movs	r1, #12
 8001514:	2002      	movs	r0, #2
 8001516:	f7ff f931 	bl	800077c <led_pwm_setvalue>
 800151a:	e052      	b.n	80015c2 <main+0xde2>
                  }
                }
                else if (color_polarity == _minus)
 800151c:	1dfb      	adds	r3, r7, #7
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d125      	bne.n	8001570 <main+0xd90>
                {
                  if (endo_status == 1)
 8001524:	4b3e      	ldr	r3, [pc, #248]	; (8001620 <main+0xe40>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d110      	bne.n	800154e <main+0xd6e>
                  {
                    led_pwm_setvalue(inner_warm, nine);
 800152c:	210c      	movs	r1, #12
 800152e:	2001      	movs	r0, #1
 8001530:	f7ff f924 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_off);
 8001534:	2164      	movs	r1, #100	; 0x64
 8001536:	2000      	movs	r0, #0
 8001538:	f7ff f920 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 800153c:	2164      	movs	r1, #100	; 0x64
 800153e:	2003      	movs	r0, #3
 8001540:	f7ff f91c 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8001544:	2164      	movs	r1, #100	; 0x64
 8001546:	2002      	movs	r0, #2
 8001548:	f7ff f918 	bl	800077c <led_pwm_setvalue>
 800154c:	e039      	b.n	80015c2 <main+0xde2>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, nine);
 800154e:	210c      	movs	r1, #12
 8001550:	2001      	movs	r0, #1
 8001552:	f7ff f913 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_off);
 8001556:	2164      	movs	r1, #100	; 0x64
 8001558:	2000      	movs	r0, #0
 800155a:	f7ff f90f 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, nine);
 800155e:	210c      	movs	r1, #12
 8001560:	2003      	movs	r0, #3
 8001562:	f7ff f90b 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8001566:	2164      	movs	r1, #100	; 0x64
 8001568:	2002      	movs	r0, #2
 800156a:	f7ff f907 	bl	800077c <led_pwm_setvalue>
 800156e:	e028      	b.n	80015c2 <main+0xde2>
                  }
                }

                else if (color_polarity == _plus)
 8001570:	1dfb      	adds	r3, r7, #7
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d124      	bne.n	80015c2 <main+0xde2>
                {
                  if (endo_status == 1)
 8001578:	4b29      	ldr	r3, [pc, #164]	; (8001620 <main+0xe40>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d110      	bne.n	80015a2 <main+0xdc2>
                  {
                    led_pwm_setvalue(inner_warm, all_off);
 8001580:	2164      	movs	r1, #100	; 0x64
 8001582:	2001      	movs	r0, #1
 8001584:	f7ff f8fa 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, nine);
 8001588:	210c      	movs	r1, #12
 800158a:	2000      	movs	r0, #0
 800158c:	f7ff f8f6 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8001590:	2164      	movs	r1, #100	; 0x64
 8001592:	2003      	movs	r0, #3
 8001594:	f7ff f8f2 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8001598:	2164      	movs	r1, #100	; 0x64
 800159a:	2002      	movs	r0, #2
 800159c:	f7ff f8ee 	bl	800077c <led_pwm_setvalue>
 80015a0:	e00f      	b.n	80015c2 <main+0xde2>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, all_off);
 80015a2:	2164      	movs	r1, #100	; 0x64
 80015a4:	2001      	movs	r0, #1
 80015a6:	f7ff f8e9 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, nine);
 80015aa:	210c      	movs	r1, #12
 80015ac:	2000      	movs	r0, #0
 80015ae:	f7ff f8e5 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 80015b2:	2164      	movs	r1, #100	; 0x64
 80015b4:	2003      	movs	r0, #3
 80015b6:	f7ff f8e1 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, nine);
 80015ba:	210c      	movs	r1, #12
 80015bc:	2002      	movs	r0, #2
 80015be:	f7ff f8dd 	bl	800077c <led_pwm_setvalue>
                  }
                }
              }

              last_status = nine;
 80015c2:	4b18      	ldr	r3, [pc, #96]	; (8001624 <main+0xe44>)
 80015c4:	220c      	movs	r2, #12
 80015c6:	701a      	strb	r2, [r3, #0]
              break;
 80015c8:	f001 fa2e 	bl	8002a28 <main+0x2248>
            case ':':
              last_inten_pos = 10;
 80015cc:	4b16      	ldr	r3, [pc, #88]	; (8001628 <main+0xe48>)
 80015ce:	220a      	movs	r2, #10
 80015d0:	601a      	str	r2, [r3, #0]
              if (lamp_status == 1)
 80015d2:	4b17      	ldr	r3, [pc, #92]	; (8001630 <main+0xe50>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d151      	bne.n	800167e <main+0xe9e>
              {
                if (endo_status == 1)
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <main+0xe40>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d128      	bne.n	8001634 <main+0xe54>
                {
                  if (depth_status == 0)
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <main+0xe4c>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d108      	bne.n	80015fc <main+0xe1c>
                  {
                    led_pwm_setvalue(inner_warm, ten);
 80015ea:	210a      	movs	r1, #10
 80015ec:	2001      	movs	r0, #1
 80015ee:	f7ff f8c5 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, ten);
 80015f2:	210a      	movs	r1, #10
 80015f4:	2000      	movs	r0, #0
 80015f6:	f7ff f8c1 	bl	800077c <led_pwm_setvalue>
 80015fa:	e007      	b.n	800160c <main+0xe2c>
                  }

                  else
                  {
                    led_pwm_setvalue(inner_warm, all_on);
 80015fc:	2100      	movs	r1, #0
 80015fe:	2001      	movs	r0, #1
 8001600:	f7ff f8bc 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_on);
 8001604:	2100      	movs	r1, #0
 8001606:	2000      	movs	r0, #0
 8001608:	f7ff f8b8 	bl	800077c <led_pwm_setvalue>
                  }

                  led_pwm_setvalue(outer_warm, all_off);
 800160c:	2164      	movs	r1, #100	; 0x64
 800160e:	2003      	movs	r0, #3
 8001610:	f7ff f8b4 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_white, all_off);
 8001614:	2164      	movs	r1, #100	; 0x64
 8001616:	2002      	movs	r0, #2
 8001618:	f7ff f8b0 	bl	800077c <led_pwm_setvalue>
 800161c:	e02f      	b.n	800167e <main+0xe9e>
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	20000043 	.word	0x20000043
 8001624:	20000038 	.word	0x20000038
 8001628:	2000004c 	.word	0x2000004c
 800162c:	20000042 	.word	0x20000042
 8001630:	20000000 	.word	0x20000000
                }
                else
                {
                  if (depth_status == 0)
 8001634:	4be2      	ldr	r3, [pc, #904]	; (80019c0 <main+0x11e0>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d110      	bne.n	800165e <main+0xe7e>
                  {
                    led_pwm_setvalue(inner_warm, ten);
 800163c:	210a      	movs	r1, #10
 800163e:	2001      	movs	r0, #1
 8001640:	f7ff f89c 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, ten);
 8001644:	210a      	movs	r1, #10
 8001646:	2000      	movs	r0, #0
 8001648:	f7ff f898 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, ten);
 800164c:	210a      	movs	r1, #10
 800164e:	2003      	movs	r0, #3
 8001650:	f7ff f894 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, ten);
 8001654:	210a      	movs	r1, #10
 8001656:	2002      	movs	r0, #2
 8001658:	f7ff f890 	bl	800077c <led_pwm_setvalue>
 800165c:	e00f      	b.n	800167e <main+0xe9e>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, all_on);
 800165e:	2100      	movs	r1, #0
 8001660:	2001      	movs	r0, #1
 8001662:	f7ff f88b 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_on);
 8001666:	2100      	movs	r1, #0
 8001668:	2000      	movs	r0, #0
 800166a:	f7ff f887 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_on);
 800166e:	2100      	movs	r1, #0
 8001670:	2003      	movs	r0, #3
 8001672:	f7ff f883 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_on);
 8001676:	2100      	movs	r1, #0
 8001678:	2002      	movs	r0, #2
 800167a:	f7ff f87f 	bl	800077c <led_pwm_setvalue>
                  }
                }
              }
              last_status = ten;
 800167e:	4bd1      	ldr	r3, [pc, #836]	; (80019c4 <main+0x11e4>)
 8001680:	220a      	movs	r2, #10
 8001682:	701a      	strb	r2, [r3, #0]
              break;
 8001684:	f001 f9d0 	bl	8002a28 <main+0x2248>
              break;
            }
          }
          else
          {
            led_pwm_setvalue(inner_white, all_off);
 8001688:	2164      	movs	r1, #100	; 0x64
 800168a:	2000      	movs	r0, #0
 800168c:	f7ff f876 	bl	800077c <led_pwm_setvalue>
            led_pwm_setvalue(inner_warm, all_off);
 8001690:	2164      	movs	r1, #100	; 0x64
 8001692:	2001      	movs	r0, #1
 8001694:	f7ff f872 	bl	800077c <led_pwm_setvalue>
            led_pwm_setvalue(outer_warm, all_off);
 8001698:	2164      	movs	r1, #100	; 0x64
 800169a:	2003      	movs	r0, #3
 800169c:	f7ff f86e 	bl	800077c <led_pwm_setvalue>
            led_pwm_setvalue(outer_white, all_off);
 80016a0:	2164      	movs	r1, #100	; 0x64
 80016a2:	2002      	movs	r0, #2
 80016a4:	f7ff f86a 	bl	800077c <led_pwm_setvalue>
 80016a8:	f001 f9be 	bl	8002a28 <main+0x2248>
          }
        }
        else if (Rx_data[1] == 'C') //@c-5#
 80016ac:	4bc6      	ldr	r3, [pc, #792]	; (80019c8 <main+0x11e8>)
 80016ae:	785b      	ldrb	r3, [r3, #1]
 80016b0:	2b43      	cmp	r3, #67	; 0x43
 80016b2:	d001      	beq.n	80016b8 <main+0xed8>
 80016b4:	f000 ff03 	bl	80024be <main+0x1cde>
        {

          prgm_status = _clr;
 80016b8:	4bc4      	ldr	r3, [pc, #784]	; (80019cc <main+0x11ec>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	601a      	str	r2, [r3, #0]
          color_steps(last_status);
 80016be:	4bc1      	ldr	r3, [pc, #772]	; (80019c4 <main+0x11e4>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	b25b      	sxtb	r3, r3
 80016c4:	0018      	movs	r0, r3
 80016c6:	f7fe fdc3 	bl	8000250 <color_steps>
          //  avg = (res_min + res_max) / 2;
          // avg = last_status;

          if (lamp_status == 1)
 80016ca:	4bc1      	ldr	r3, [pc, #772]	; (80019d0 <main+0x11f0>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d001      	beq.n	80016d6 <main+0xef6>
 80016d2:	f000 fee0 	bl	8002496 <main+0x1cb6>
          {
            if (Rx_data[2] == '-')
 80016d6:	4bbc      	ldr	r3, [pc, #752]	; (80019c8 <main+0x11e8>)
 80016d8:	789b      	ldrb	r3, [r3, #2]
 80016da:	2b2d      	cmp	r3, #45	; 0x2d
 80016dc:	d001      	beq.n	80016e2 <main+0xf02>
 80016de:	f000 fbb4 	bl	8001e4a <main+0x166a>
            {
              // avg =  res_max - 5*step_size_color;
              avg = last_status - 15;
 80016e2:	4bb8      	ldr	r3, [pc, #736]	; (80019c4 <main+0x11e4>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	b25b      	sxtb	r3, r3
 80016e8:	3b0f      	subs	r3, #15
 80016ea:	603b      	str	r3, [r7, #0]
              color_polarity = _minus;
 80016ec:	1dfb      	adds	r3, r7, #7
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
              // {
              //   led_pwm_setvalue(inner_white, all_off);
              //   led_pwm_setvalue(inner_white, all_off);
              // }

              if (Rx_data[3] == '5' && depth_status != 1)
 80016f2:	4bb5      	ldr	r3, [pc, #724]	; (80019c8 <main+0x11e8>)
 80016f4:	78db      	ldrb	r3, [r3, #3]
 80016f6:	2b35      	cmp	r3, #53	; 0x35
 80016f8:	d000      	beq.n	80016fc <main+0xf1c>
 80016fa:	e098      	b.n	800182e <main+0x104e>
 80016fc:	4bb0      	ldr	r3, [pc, #704]	; (80019c0 <main+0x11e0>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d100      	bne.n	8001706 <main+0xf26>
 8001704:	e093      	b.n	800182e <main+0x104e>
              {
                color_polarity = _minus;
 8001706:	1dfb      	adds	r3, r7, #7
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
                // color_status = res_min - step_size_color * 1;

                switch (last_inten_pos)
 800170c:	4bb1      	ldr	r3, [pc, #708]	; (80019d4 <main+0x11f4>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b0a      	cmp	r3, #10
 8001712:	d82c      	bhi.n	800176e <main+0xf8e>
 8001714:	009a      	lsls	r2, r3, #2
 8001716:	4bb0      	ldr	r3, [pc, #704]	; (80019d8 <main+0x11f8>)
 8001718:	18d3      	adds	r3, r2, r3
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	469f      	mov	pc, r3
                {

                case 1:
                  curr_pwm = cn1_five;
 800171e:	4baf      	ldr	r3, [pc, #700]	; (80019dc <main+0x11fc>)
 8001720:	2237      	movs	r2, #55	; 0x37
 8001722:	601a      	str	r2, [r3, #0]
                  break;
 8001724:	e024      	b.n	8001770 <main+0xf90>
                case 2:
                  curr_pwm = cn2_five;
 8001726:	4bad      	ldr	r3, [pc, #692]	; (80019dc <main+0x11fc>)
 8001728:	222b      	movs	r2, #43	; 0x2b
 800172a:	601a      	str	r2, [r3, #0]
                  break;
 800172c:	e020      	b.n	8001770 <main+0xf90>
                case 3:
                  curr_pwm = cn3_five;
 800172e:	4bab      	ldr	r3, [pc, #684]	; (80019dc <main+0x11fc>)
 8001730:	2217      	movs	r2, #23
 8001732:	601a      	str	r2, [r3, #0]
                  break;
 8001734:	e01c      	b.n	8001770 <main+0xf90>
                case 4:
                  curr_pwm = cn4_five;
 8001736:	4ba9      	ldr	r3, [pc, #676]	; (80019dc <main+0x11fc>)
 8001738:	220a      	movs	r2, #10
 800173a:	601a      	str	r2, [r3, #0]
                  break;
 800173c:	e018      	b.n	8001770 <main+0xf90>
                case 5:
                  curr_pwm = cn5_five;
 800173e:	4ba7      	ldr	r3, [pc, #668]	; (80019dc <main+0x11fc>)
 8001740:	2207      	movs	r2, #7
 8001742:	601a      	str	r2, [r3, #0]
                  break;
 8001744:	e014      	b.n	8001770 <main+0xf90>
                case 6:
                  curr_pwm = cn6_five;
 8001746:	4ba5      	ldr	r3, [pc, #660]	; (80019dc <main+0x11fc>)
 8001748:	2205      	movs	r2, #5
 800174a:	601a      	str	r2, [r3, #0]
                  break;
 800174c:	e010      	b.n	8001770 <main+0xf90>
                case 7:
                  curr_pwm = cn7_five;
 800174e:	4ba3      	ldr	r3, [pc, #652]	; (80019dc <main+0x11fc>)
 8001750:	2205      	movs	r2, #5
 8001752:	601a      	str	r2, [r3, #0]
                  break;
 8001754:	e00c      	b.n	8001770 <main+0xf90>
                case 8:
                  curr_pwm = cn8_five;
 8001756:	4ba1      	ldr	r3, [pc, #644]	; (80019dc <main+0x11fc>)
 8001758:	2205      	movs	r2, #5
 800175a:	601a      	str	r2, [r3, #0]
                  break;
 800175c:	e008      	b.n	8001770 <main+0xf90>
                case 9:
                  curr_pwm = cn9_five;
 800175e:	4b9f      	ldr	r3, [pc, #636]	; (80019dc <main+0x11fc>)
 8001760:	2205      	movs	r2, #5
 8001762:	601a      	str	r2, [r3, #0]
                  break;
 8001764:	e004      	b.n	8001770 <main+0xf90>
                case 10:
                  curr_pwm = cn10_five;
 8001766:	4b9d      	ldr	r3, [pc, #628]	; (80019dc <main+0x11fc>)
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
                  break;
 800176c:	e000      	b.n	8001770 <main+0xf90>

                default:
                  break;
 800176e:	46c0      	nop			; (mov r8, r8)
                }
                last_clr_status = curr_pwm;
 8001770:	4b9a      	ldr	r3, [pc, #616]	; (80019dc <main+0x11fc>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	b25a      	sxtb	r2, r3
 8001776:	4b9a      	ldr	r3, [pc, #616]	; (80019e0 <main+0x1200>)
 8001778:	701a      	strb	r2, [r3, #0]

                if (depth_status == 1)
 800177a:	4b91      	ldr	r3, [pc, #580]	; (80019c0 <main+0x11e0>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d127      	bne.n	80017d2 <main+0xff2>
                {
                  if (endo_status == 1)
 8001782:	4b98      	ldr	r3, [pc, #608]	; (80019e4 <main+0x1204>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d111      	bne.n	80017ae <main+0xfce>
                  {
                    led_pwm_setvalue(inner_warm, ten);
 800178a:	210a      	movs	r1, #10
 800178c:	2001      	movs	r0, #1
 800178e:	f7fe fff5 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, ten);
 8001792:	210a      	movs	r1, #10
 8001794:	2000      	movs	r0, #0
 8001796:	f7fe fff1 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 800179a:	2164      	movs	r1, #100	; 0x64
 800179c:	2003      	movs	r0, #3
 800179e:	f7fe ffed 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 80017a2:	2164      	movs	r1, #100	; 0x64
 80017a4:	2002      	movs	r0, #2
 80017a6:	f7fe ffe9 	bl	800077c <led_pwm_setvalue>
                if (depth_status == 1)
 80017aa:	f001 f93d 	bl	8002a28 <main+0x2248>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, ten);
 80017ae:	210a      	movs	r1, #10
 80017b0:	2001      	movs	r0, #1
 80017b2:	f7fe ffe3 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, ten);
 80017b6:	210a      	movs	r1, #10
 80017b8:	2000      	movs	r0, #0
 80017ba:	f7fe ffdf 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, ten);
 80017be:	210a      	movs	r1, #10
 80017c0:	2003      	movs	r0, #3
 80017c2:	f7fe ffdb 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, ten);
 80017c6:	210a      	movs	r1, #10
 80017c8:	2002      	movs	r0, #2
 80017ca:	f7fe ffd7 	bl	800077c <led_pwm_setvalue>
                if (depth_status == 1)
 80017ce:	f001 f92b 	bl	8002a28 <main+0x2248>
                else
                {

                  // color_status = res_min - step_size_color * 1;

                  if (endo_status == 1)
 80017d2:	4b84      	ldr	r3, [pc, #528]	; (80019e4 <main+0x1204>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d113      	bne.n	8001802 <main+0x1022>
                  {

                    led_pwm_setvalue(inner_warm, curr_pwm);
 80017da:	4b80      	ldr	r3, [pc, #512]	; (80019dc <main+0x11fc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	0019      	movs	r1, r3
 80017e0:	2001      	movs	r0, #1
 80017e2:	f7fe ffcb 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_off);
 80017e6:	2164      	movs	r1, #100	; 0x64
 80017e8:	2000      	movs	r0, #0
 80017ea:	f7fe ffc7 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 80017ee:	2164      	movs	r1, #100	; 0x64
 80017f0:	2002      	movs	r0, #2
 80017f2:	f7fe ffc3 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 80017f6:	2164      	movs	r1, #100	; 0x64
 80017f8:	2003      	movs	r0, #3
 80017fa:	f7fe ffbf 	bl	800077c <led_pwm_setvalue>
                if (depth_status == 1)
 80017fe:	f001 f913 	bl	8002a28 <main+0x2248>
                  }
                  else
                  {

                    // led_pwm_setvalue(inner_warm, avg - step_size_color * 1);
                    led_pwm_setvalue(inner_warm, curr_pwm);
 8001802:	4b76      	ldr	r3, [pc, #472]	; (80019dc <main+0x11fc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	0019      	movs	r1, r3
 8001808:	2001      	movs	r0, #1
 800180a:	f7fe ffb7 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_off);
 800180e:	2164      	movs	r1, #100	; 0x64
 8001810:	2000      	movs	r0, #0
 8001812:	f7fe ffb3 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8001816:	2164      	movs	r1, #100	; 0x64
 8001818:	2002      	movs	r0, #2
 800181a:	f7fe ffaf 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, curr_pwm);
 800181e:	4b6f      	ldr	r3, [pc, #444]	; (80019dc <main+0x11fc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	0019      	movs	r1, r3
 8001824:	2003      	movs	r0, #3
 8001826:	f7fe ffa9 	bl	800077c <led_pwm_setvalue>
                if (depth_status == 1)
 800182a:	f001 f8fd 	bl	8002a28 <main+0x2248>
                  }
                }
              }
              else if (Rx_data[3] == '4')
 800182e:	4b66      	ldr	r3, [pc, #408]	; (80019c8 <main+0x11e8>)
 8001830:	78db      	ldrb	r3, [r3, #3]
 8001832:	2b34      	cmp	r3, #52	; 0x34
 8001834:	d000      	beq.n	8001838 <main+0x1058>
 8001836:	e08e      	b.n	8001956 <main+0x1176>
              {
                color_polarity = _minus;
 8001838:	1dfb      	adds	r3, r7, #7
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
                // color_status = res_min - step_size_color * 1;
                switch (last_inten_pos)
 800183e:	4b65      	ldr	r3, [pc, #404]	; (80019d4 <main+0x11f4>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2b0a      	cmp	r3, #10
 8001844:	d82c      	bhi.n	80018a0 <main+0x10c0>
 8001846:	009a      	lsls	r2, r3, #2
 8001848:	4b67      	ldr	r3, [pc, #412]	; (80019e8 <main+0x1208>)
 800184a:	18d3      	adds	r3, r2, r3
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	469f      	mov	pc, r3
                {
                case 1:
                  curr_pwm = cn1_four;
 8001850:	4b62      	ldr	r3, [pc, #392]	; (80019dc <main+0x11fc>)
 8001852:	2237      	movs	r2, #55	; 0x37
 8001854:	601a      	str	r2, [r3, #0]
                  break;
 8001856:	e024      	b.n	80018a2 <main+0x10c2>
                case 2:
                  curr_pwm = cn2_four;
 8001858:	4b60      	ldr	r3, [pc, #384]	; (80019dc <main+0x11fc>)
 800185a:	2229      	movs	r2, #41	; 0x29
 800185c:	601a      	str	r2, [r3, #0]
                  break;
 800185e:	e020      	b.n	80018a2 <main+0x10c2>
                case 3:
                  curr_pwm = cn3_four;
 8001860:	4b5e      	ldr	r3, [pc, #376]	; (80019dc <main+0x11fc>)
 8001862:	2215      	movs	r2, #21
 8001864:	601a      	str	r2, [r3, #0]
                  break;
 8001866:	e01c      	b.n	80018a2 <main+0x10c2>
                case 4:
                  curr_pwm = cn4_four;
 8001868:	4b5c      	ldr	r3, [pc, #368]	; (80019dc <main+0x11fc>)
 800186a:	2208      	movs	r2, #8
 800186c:	601a      	str	r2, [r3, #0]
                  break;
 800186e:	e018      	b.n	80018a2 <main+0x10c2>
                case 5:
                  curr_pwm = cn5_four;
 8001870:	4b5a      	ldr	r3, [pc, #360]	; (80019dc <main+0x11fc>)
 8001872:	2205      	movs	r2, #5
 8001874:	601a      	str	r2, [r3, #0]
                  break;
 8001876:	e014      	b.n	80018a2 <main+0x10c2>
                case 6:
                  curr_pwm = cn6_four;
 8001878:	4b58      	ldr	r3, [pc, #352]	; (80019dc <main+0x11fc>)
 800187a:	2204      	movs	r2, #4
 800187c:	601a      	str	r2, [r3, #0]
                  break;
 800187e:	e010      	b.n	80018a2 <main+0x10c2>
                case 7:
                  curr_pwm = cn7_four;
 8001880:	4b56      	ldr	r3, [pc, #344]	; (80019dc <main+0x11fc>)
 8001882:	2204      	movs	r2, #4
 8001884:	601a      	str	r2, [r3, #0]
                  break;
 8001886:	e00c      	b.n	80018a2 <main+0x10c2>
                case 8:
                  curr_pwm = cn8_four;
 8001888:	4b54      	ldr	r3, [pc, #336]	; (80019dc <main+0x11fc>)
 800188a:	2204      	movs	r2, #4
 800188c:	601a      	str	r2, [r3, #0]
                  break;
 800188e:	e008      	b.n	80018a2 <main+0x10c2>
                case 9:
                  curr_pwm = cn9_four;
 8001890:	4b52      	ldr	r3, [pc, #328]	; (80019dc <main+0x11fc>)
 8001892:	2204      	movs	r2, #4
 8001894:	601a      	str	r2, [r3, #0]
                  break;
 8001896:	e004      	b.n	80018a2 <main+0x10c2>
                case 10:
                  curr_pwm = cn10_four;
 8001898:	4b50      	ldr	r3, [pc, #320]	; (80019dc <main+0x11fc>)
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
                  break;
 800189e:	e000      	b.n	80018a2 <main+0x10c2>

                default:
                  break;
 80018a0:	46c0      	nop			; (mov r8, r8)
                }
                if (depth_status == 1)
 80018a2:	4b47      	ldr	r3, [pc, #284]	; (80019c0 <main+0x11e0>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d127      	bne.n	80018fa <main+0x111a>
                {
                  if (endo_status == 1)
 80018aa:	4b4e      	ldr	r3, [pc, #312]	; (80019e4 <main+0x1204>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d111      	bne.n	80018d6 <main+0x10f6>
                  {
                    led_pwm_setvalue(inner_warm, ten);
 80018b2:	210a      	movs	r1, #10
 80018b4:	2001      	movs	r0, #1
 80018b6:	f7fe ff61 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, ten);
 80018ba:	210a      	movs	r1, #10
 80018bc:	2000      	movs	r0, #0
 80018be:	f7fe ff5d 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 80018c2:	2164      	movs	r1, #100	; 0x64
 80018c4:	2003      	movs	r0, #3
 80018c6:	f7fe ff59 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 80018ca:	2164      	movs	r1, #100	; 0x64
 80018cc:	2002      	movs	r0, #2
 80018ce:	f7fe ff55 	bl	800077c <led_pwm_setvalue>
 80018d2:	f001 f8a9 	bl	8002a28 <main+0x2248>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, ten);
 80018d6:	210a      	movs	r1, #10
 80018d8:	2001      	movs	r0, #1
 80018da:	f7fe ff4f 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, ten);
 80018de:	210a      	movs	r1, #10
 80018e0:	2000      	movs	r0, #0
 80018e2:	f7fe ff4b 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, ten);
 80018e6:	210a      	movs	r1, #10
 80018e8:	2003      	movs	r0, #3
 80018ea:	f7fe ff47 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, ten);
 80018ee:	210a      	movs	r1, #10
 80018f0:	2002      	movs	r0, #2
 80018f2:	f7fe ff43 	bl	800077c <led_pwm_setvalue>
 80018f6:	f001 f897 	bl	8002a28 <main+0x2248>

                else
                {

                  // color_status = res_min - step_size_color * 2;
                  if (endo_status == 1)
 80018fa:	4b3a      	ldr	r3, [pc, #232]	; (80019e4 <main+0x1204>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d113      	bne.n	800192a <main+0x114a>
                  {
                    led_pwm_setvalue(inner_warm, curr_pwm);
 8001902:	4b36      	ldr	r3, [pc, #216]	; (80019dc <main+0x11fc>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	0019      	movs	r1, r3
 8001908:	2001      	movs	r0, #1
 800190a:	f7fe ff37 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_off);
 800190e:	2164      	movs	r1, #100	; 0x64
 8001910:	2000      	movs	r0, #0
 8001912:	f7fe ff33 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8001916:	2164      	movs	r1, #100	; 0x64
 8001918:	2002      	movs	r0, #2
 800191a:	f7fe ff2f 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 800191e:	2164      	movs	r1, #100	; 0x64
 8001920:	2003      	movs	r0, #3
 8001922:	f7fe ff2b 	bl	800077c <led_pwm_setvalue>
 8001926:	f001 f87f 	bl	8002a28 <main+0x2248>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, curr_pwm);
 800192a:	4b2c      	ldr	r3, [pc, #176]	; (80019dc <main+0x11fc>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	0019      	movs	r1, r3
 8001930:	2001      	movs	r0, #1
 8001932:	f7fe ff23 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_off);
 8001936:	2164      	movs	r1, #100	; 0x64
 8001938:	2000      	movs	r0, #0
 800193a:	f7fe ff1f 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 800193e:	2164      	movs	r1, #100	; 0x64
 8001940:	2002      	movs	r0, #2
 8001942:	f7fe ff1b 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, curr_pwm);
 8001946:	4b25      	ldr	r3, [pc, #148]	; (80019dc <main+0x11fc>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	0019      	movs	r1, r3
 800194c:	2003      	movs	r0, #3
 800194e:	f7fe ff15 	bl	800077c <led_pwm_setvalue>
 8001952:	f001 f869 	bl	8002a28 <main+0x2248>
                  }
                }
              }
              else if (Rx_data[3] == '3')
 8001956:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <main+0x11e8>)
 8001958:	78db      	ldrb	r3, [r3, #3]
 800195a:	2b33      	cmp	r3, #51	; 0x33
 800195c:	d000      	beq.n	8001960 <main+0x1180>
 800195e:	e0b8      	b.n	8001ad2 <main+0x12f2>
              {
                color_polarity = _minus;
 8001960:	1dfb      	adds	r3, r7, #7
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
                color_status = res_min - step_size_color * 1;
 8001966:	4b21      	ldr	r3, [pc, #132]	; (80019ec <main+0x120c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	b2da      	uxtb	r2, r3
 800196c:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <main+0x1210>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	b2db      	uxtb	r3, r3
 8001976:	b25a      	sxtb	r2, r3
 8001978:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <main+0x1214>)
 800197a:	701a      	strb	r2, [r3, #0]
                switch (last_inten_pos)
 800197c:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <main+0x11f4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b0a      	cmp	r3, #10
 8001982:	d84b      	bhi.n	8001a1c <main+0x123c>
 8001984:	009a      	lsls	r2, r3, #2
 8001986:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <main+0x1218>)
 8001988:	18d3      	adds	r3, r2, r3
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	469f      	mov	pc, r3
                {
                case 1:
                  curr_pwm = cn1_three;
 800198e:	4b13      	ldr	r3, [pc, #76]	; (80019dc <main+0x11fc>)
 8001990:	2237      	movs	r2, #55	; 0x37
 8001992:	601a      	str	r2, [r3, #0]
                  break;
 8001994:	e043      	b.n	8001a1e <main+0x123e>
                case 2:
                  curr_pwm = cn2_three;
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <main+0x11fc>)
 8001998:	2226      	movs	r2, #38	; 0x26
 800199a:	601a      	str	r2, [r3, #0]
                  break;
 800199c:	e03f      	b.n	8001a1e <main+0x123e>
                case 3:
                  curr_pwm = cn3_three;
 800199e:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <main+0x11fc>)
 80019a0:	2213      	movs	r2, #19
 80019a2:	601a      	str	r2, [r3, #0]
                  break;
 80019a4:	e03b      	b.n	8001a1e <main+0x123e>
                case 4:
                  curr_pwm = cn4_three;
 80019a6:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <main+0x11fc>)
 80019a8:	2207      	movs	r2, #7
 80019aa:	601a      	str	r2, [r3, #0]
                  break;
 80019ac:	e037      	b.n	8001a1e <main+0x123e>
                case 5:
                  curr_pwm = cn5_three;
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <main+0x11fc>)
 80019b0:	2204      	movs	r2, #4
 80019b2:	601a      	str	r2, [r3, #0]
                  break;
 80019b4:	e033      	b.n	8001a1e <main+0x123e>
                case 6:
                  curr_pwm = cn6_three;
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <main+0x11fc>)
 80019b8:	2203      	movs	r2, #3
 80019ba:	601a      	str	r2, [r3, #0]
                  break;
 80019bc:	e02f      	b.n	8001a1e <main+0x123e>
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	20000042 	.word	0x20000042
 80019c4:	20000038 	.word	0x20000038
 80019c8:	20000168 	.word	0x20000168
 80019cc:	2000003c 	.word	0x2000003c
 80019d0:	20000000 	.word	0x20000000
 80019d4:	2000004c 	.word	0x2000004c
 80019d8:	0800624c 	.word	0x0800624c
 80019dc:	20000048 	.word	0x20000048
 80019e0:	20000039 	.word	0x20000039
 80019e4:	20000043 	.word	0x20000043
 80019e8:	08006278 	.word	0x08006278
 80019ec:	20000174 	.word	0x20000174
 80019f0:	20000004 	.word	0x20000004
 80019f4:	20000040 	.word	0x20000040
 80019f8:	080062a4 	.word	0x080062a4
                case 7:
                  curr_pwm = cn7_three;
 80019fc:	4be0      	ldr	r3, [pc, #896]	; (8001d80 <main+0x15a0>)
 80019fe:	2203      	movs	r2, #3
 8001a00:	601a      	str	r2, [r3, #0]
                  break;
 8001a02:	e00c      	b.n	8001a1e <main+0x123e>
                case 8:
                  curr_pwm = cn8_three;
 8001a04:	4bde      	ldr	r3, [pc, #888]	; (8001d80 <main+0x15a0>)
 8001a06:	2203      	movs	r2, #3
 8001a08:	601a      	str	r2, [r3, #0]
                  break;
 8001a0a:	e008      	b.n	8001a1e <main+0x123e>
                case 9:
                  curr_pwm = cn9_three;
 8001a0c:	4bdc      	ldr	r3, [pc, #880]	; (8001d80 <main+0x15a0>)
 8001a0e:	2203      	movs	r2, #3
 8001a10:	601a      	str	r2, [r3, #0]
                  break;
 8001a12:	e004      	b.n	8001a1e <main+0x123e>
                case 10:
                  curr_pwm = cn10_three;
 8001a14:	4bda      	ldr	r3, [pc, #872]	; (8001d80 <main+0x15a0>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
                  break;
 8001a1a:	e000      	b.n	8001a1e <main+0x123e>

                default:
                  break;
 8001a1c:	46c0      	nop			; (mov r8, r8)
                }
                if (depth_status == 1)
 8001a1e:	4bd9      	ldr	r3, [pc, #868]	; (8001d84 <main+0x15a4>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d127      	bne.n	8001a76 <main+0x1296>
                {
                  if (endo_status == 1)
 8001a26:	4bd8      	ldr	r3, [pc, #864]	; (8001d88 <main+0x15a8>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d111      	bne.n	8001a52 <main+0x1272>
                  {
                    led_pwm_setvalue(inner_warm, ten);
 8001a2e:	210a      	movs	r1, #10
 8001a30:	2001      	movs	r0, #1
 8001a32:	f7fe fea3 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, ten);
 8001a36:	210a      	movs	r1, #10
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f7fe fe9f 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8001a3e:	2164      	movs	r1, #100	; 0x64
 8001a40:	2003      	movs	r0, #3
 8001a42:	f7fe fe9b 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8001a46:	2164      	movs	r1, #100	; 0x64
 8001a48:	2002      	movs	r0, #2
 8001a4a:	f7fe fe97 	bl	800077c <led_pwm_setvalue>
 8001a4e:	f000 ffeb 	bl	8002a28 <main+0x2248>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, ten);
 8001a52:	210a      	movs	r1, #10
 8001a54:	2001      	movs	r0, #1
 8001a56:	f7fe fe91 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, ten);
 8001a5a:	210a      	movs	r1, #10
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f7fe fe8d 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, ten);
 8001a62:	210a      	movs	r1, #10
 8001a64:	2003      	movs	r0, #3
 8001a66:	f7fe fe89 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, ten);
 8001a6a:	210a      	movs	r1, #10
 8001a6c:	2002      	movs	r0, #2
 8001a6e:	f7fe fe85 	bl	800077c <led_pwm_setvalue>
 8001a72:	f000 ffd9 	bl	8002a28 <main+0x2248>

                else
                {

                  // color_status = res_min - step_size_color * 3;
                  if (endo_status == 1)
 8001a76:	4bc4      	ldr	r3, [pc, #784]	; (8001d88 <main+0x15a8>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d113      	bne.n	8001aa6 <main+0x12c6>
                  {
                    led_pwm_setvalue(inner_warm, curr_pwm);
 8001a7e:	4bc0      	ldr	r3, [pc, #768]	; (8001d80 <main+0x15a0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	0019      	movs	r1, r3
 8001a84:	2001      	movs	r0, #1
 8001a86:	f7fe fe79 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_off);
 8001a8a:	2164      	movs	r1, #100	; 0x64
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	f7fe fe75 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8001a92:	2164      	movs	r1, #100	; 0x64
 8001a94:	2002      	movs	r0, #2
 8001a96:	f7fe fe71 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8001a9a:	2164      	movs	r1, #100	; 0x64
 8001a9c:	2003      	movs	r0, #3
 8001a9e:	f7fe fe6d 	bl	800077c <led_pwm_setvalue>
 8001aa2:	f000 ffc1 	bl	8002a28 <main+0x2248>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, curr_pwm);
 8001aa6:	4bb6      	ldr	r3, [pc, #728]	; (8001d80 <main+0x15a0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	0019      	movs	r1, r3
 8001aac:	2001      	movs	r0, #1
 8001aae:	f7fe fe65 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_off);
 8001ab2:	2164      	movs	r1, #100	; 0x64
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f7fe fe61 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8001aba:	2164      	movs	r1, #100	; 0x64
 8001abc:	2002      	movs	r0, #2
 8001abe:	f7fe fe5d 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, curr_pwm);
 8001ac2:	4baf      	ldr	r3, [pc, #700]	; (8001d80 <main+0x15a0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	0019      	movs	r1, r3
 8001ac8:	2003      	movs	r0, #3
 8001aca:	f7fe fe57 	bl	800077c <led_pwm_setvalue>
 8001ace:	f000 ffab 	bl	8002a28 <main+0x2248>
                  }
                }
              }
              else if (Rx_data[3] == '2')
 8001ad2:	4bae      	ldr	r3, [pc, #696]	; (8001d8c <main+0x15ac>)
 8001ad4:	78db      	ldrb	r3, [r3, #3]
 8001ad6:	2b32      	cmp	r3, #50	; 0x32
 8001ad8:	d000      	beq.n	8001adc <main+0x12fc>
 8001ada:	e08e      	b.n	8001bfa <main+0x141a>
              {
                color_polarity = _minus;
 8001adc:	1dfb      	adds	r3, r7, #7
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
                // color_status = res_min - step_size_color * 1;
                switch (last_inten_pos)
 8001ae2:	4bab      	ldr	r3, [pc, #684]	; (8001d90 <main+0x15b0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b0a      	cmp	r3, #10
 8001ae8:	d82c      	bhi.n	8001b44 <main+0x1364>
 8001aea:	009a      	lsls	r2, r3, #2
 8001aec:	4ba9      	ldr	r3, [pc, #676]	; (8001d94 <main+0x15b4>)
 8001aee:	18d3      	adds	r3, r2, r3
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	469f      	mov	pc, r3
                {
                case 1:
                  curr_pwm = cn1_two;
 8001af4:	4ba2      	ldr	r3, [pc, #648]	; (8001d80 <main+0x15a0>)
 8001af6:	2237      	movs	r2, #55	; 0x37
 8001af8:	601a      	str	r2, [r3, #0]
                  break;
 8001afa:	e024      	b.n	8001b46 <main+0x1366>
                case 2:
                  curr_pwm = cn2_two;
 8001afc:	4ba0      	ldr	r3, [pc, #640]	; (8001d80 <main+0x15a0>)
 8001afe:	2223      	movs	r2, #35	; 0x23
 8001b00:	601a      	str	r2, [r3, #0]
                  break;
 8001b02:	e020      	b.n	8001b46 <main+0x1366>
                case 3:
                  curr_pwm = cn3_two;
 8001b04:	4b9e      	ldr	r3, [pc, #632]	; (8001d80 <main+0x15a0>)
 8001b06:	2211      	movs	r2, #17
 8001b08:	601a      	str	r2, [r3, #0]
                  break;
 8001b0a:	e01c      	b.n	8001b46 <main+0x1366>
                case 4:
                  curr_pwm = cn4_two;
 8001b0c:	4b9c      	ldr	r3, [pc, #624]	; (8001d80 <main+0x15a0>)
 8001b0e:	2205      	movs	r2, #5
 8001b10:	601a      	str	r2, [r3, #0]
                  break;
 8001b12:	e018      	b.n	8001b46 <main+0x1366>
                case 5:
                  curr_pwm = cn5_two;
 8001b14:	4b9a      	ldr	r3, [pc, #616]	; (8001d80 <main+0x15a0>)
 8001b16:	2203      	movs	r2, #3
 8001b18:	601a      	str	r2, [r3, #0]
                  break;
 8001b1a:	e014      	b.n	8001b46 <main+0x1366>
                case 6:
                  curr_pwm = cn6_two;
 8001b1c:	4b98      	ldr	r3, [pc, #608]	; (8001d80 <main+0x15a0>)
 8001b1e:	2202      	movs	r2, #2
 8001b20:	601a      	str	r2, [r3, #0]
                  break;
 8001b22:	e010      	b.n	8001b46 <main+0x1366>
                case 7:
                  curr_pwm = cn7_two;
 8001b24:	4b96      	ldr	r3, [pc, #600]	; (8001d80 <main+0x15a0>)
 8001b26:	2202      	movs	r2, #2
 8001b28:	601a      	str	r2, [r3, #0]
                  break;
 8001b2a:	e00c      	b.n	8001b46 <main+0x1366>
                case 8:
                  curr_pwm = cn8_two;
 8001b2c:	4b94      	ldr	r3, [pc, #592]	; (8001d80 <main+0x15a0>)
 8001b2e:	2202      	movs	r2, #2
 8001b30:	601a      	str	r2, [r3, #0]
                  break;
 8001b32:	e008      	b.n	8001b46 <main+0x1366>
                case 9:
                  curr_pwm = cn9_two;
 8001b34:	4b92      	ldr	r3, [pc, #584]	; (8001d80 <main+0x15a0>)
 8001b36:	2202      	movs	r2, #2
 8001b38:	601a      	str	r2, [r3, #0]
                  break;
 8001b3a:	e004      	b.n	8001b46 <main+0x1366>
                case 10:
                  curr_pwm = cn10_two;
 8001b3c:	4b90      	ldr	r3, [pc, #576]	; (8001d80 <main+0x15a0>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
                  break;
 8001b42:	e000      	b.n	8001b46 <main+0x1366>

                default:
                  break;
 8001b44:	46c0      	nop			; (mov r8, r8)
                }

                if (depth_status == 1)
 8001b46:	4b8f      	ldr	r3, [pc, #572]	; (8001d84 <main+0x15a4>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d127      	bne.n	8001b9e <main+0x13be>
                {
                  if (endo_status == 1)
 8001b4e:	4b8e      	ldr	r3, [pc, #568]	; (8001d88 <main+0x15a8>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d111      	bne.n	8001b7a <main+0x139a>
                  {
                    led_pwm_setvalue(inner_warm, ten);
 8001b56:	210a      	movs	r1, #10
 8001b58:	2001      	movs	r0, #1
 8001b5a:	f7fe fe0f 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, ten);
 8001b5e:	210a      	movs	r1, #10
 8001b60:	2000      	movs	r0, #0
 8001b62:	f7fe fe0b 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8001b66:	2164      	movs	r1, #100	; 0x64
 8001b68:	2003      	movs	r0, #3
 8001b6a:	f7fe fe07 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8001b6e:	2164      	movs	r1, #100	; 0x64
 8001b70:	2002      	movs	r0, #2
 8001b72:	f7fe fe03 	bl	800077c <led_pwm_setvalue>
 8001b76:	f000 ff57 	bl	8002a28 <main+0x2248>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, ten);
 8001b7a:	210a      	movs	r1, #10
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	f7fe fdfd 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, ten);
 8001b82:	210a      	movs	r1, #10
 8001b84:	2000      	movs	r0, #0
 8001b86:	f7fe fdf9 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, ten);
 8001b8a:	210a      	movs	r1, #10
 8001b8c:	2003      	movs	r0, #3
 8001b8e:	f7fe fdf5 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, ten);
 8001b92:	210a      	movs	r1, #10
 8001b94:	2002      	movs	r0, #2
 8001b96:	f7fe fdf1 	bl	800077c <led_pwm_setvalue>
 8001b9a:	f000 ff45 	bl	8002a28 <main+0x2248>

                else
                {

                  // color_status = avg  + step_size_color * 4;
                  if (endo_status == 1)
 8001b9e:	4b7a      	ldr	r3, [pc, #488]	; (8001d88 <main+0x15a8>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d113      	bne.n	8001bce <main+0x13ee>
                  {
                    led_pwm_setvalue(inner_warm, curr_pwm);
 8001ba6:	4b76      	ldr	r3, [pc, #472]	; (8001d80 <main+0x15a0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	0019      	movs	r1, r3
 8001bac:	2001      	movs	r0, #1
 8001bae:	f7fe fde5 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_off);
 8001bb2:	2164      	movs	r1, #100	; 0x64
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f7fe fde1 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8001bba:	2164      	movs	r1, #100	; 0x64
 8001bbc:	2002      	movs	r0, #2
 8001bbe:	f7fe fddd 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8001bc2:	2164      	movs	r1, #100	; 0x64
 8001bc4:	2003      	movs	r0, #3
 8001bc6:	f7fe fdd9 	bl	800077c <led_pwm_setvalue>
 8001bca:	f000 ff2d 	bl	8002a28 <main+0x2248>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, curr_pwm);
 8001bce:	4b6c      	ldr	r3, [pc, #432]	; (8001d80 <main+0x15a0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	0019      	movs	r1, r3
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	f7fe fdd1 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_off);
 8001bda:	2164      	movs	r1, #100	; 0x64
 8001bdc:	2000      	movs	r0, #0
 8001bde:	f7fe fdcd 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8001be2:	2164      	movs	r1, #100	; 0x64
 8001be4:	2002      	movs	r0, #2
 8001be6:	f7fe fdc9 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, curr_pwm);
 8001bea:	4b65      	ldr	r3, [pc, #404]	; (8001d80 <main+0x15a0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	0019      	movs	r1, r3
 8001bf0:	2003      	movs	r0, #3
 8001bf2:	f7fe fdc3 	bl	800077c <led_pwm_setvalue>
 8001bf6:	f000 ff17 	bl	8002a28 <main+0x2248>
                  }
                }
              }
              else if (Rx_data[3] == '1')
 8001bfa:	4b64      	ldr	r3, [pc, #400]	; (8001d8c <main+0x15ac>)
 8001bfc:	78db      	ldrb	r3, [r3, #3]
 8001bfe:	2b31      	cmp	r3, #49	; 0x31
 8001c00:	d000      	beq.n	8001c04 <main+0x1424>
 8001c02:	e08e      	b.n	8001d22 <main+0x1542>
              {
                color_polarity = _minus;
 8001c04:	1dfb      	adds	r3, r7, #7
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]
                // color_status = res_min - step_size_color * 1;
                switch (last_inten_pos)
 8001c0a:	4b61      	ldr	r3, [pc, #388]	; (8001d90 <main+0x15b0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2b0a      	cmp	r3, #10
 8001c10:	d82c      	bhi.n	8001c6c <main+0x148c>
 8001c12:	009a      	lsls	r2, r3, #2
 8001c14:	4b60      	ldr	r3, [pc, #384]	; (8001d98 <main+0x15b8>)
 8001c16:	18d3      	adds	r3, r2, r3
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	469f      	mov	pc, r3
                {
                case 1:
                  curr_pwm = cn1_one;
 8001c1c:	4b58      	ldr	r3, [pc, #352]	; (8001d80 <main+0x15a0>)
 8001c1e:	2237      	movs	r2, #55	; 0x37
 8001c20:	601a      	str	r2, [r3, #0]
                  break;
 8001c22:	e024      	b.n	8001c6e <main+0x148e>
                case 2:
                  curr_pwm = cn2_one;
 8001c24:	4b56      	ldr	r3, [pc, #344]	; (8001d80 <main+0x15a0>)
 8001c26:	2220      	movs	r2, #32
 8001c28:	601a      	str	r2, [r3, #0]
                  break;
 8001c2a:	e020      	b.n	8001c6e <main+0x148e>
                case 3:
                  curr_pwm = cn3_one;
 8001c2c:	4b54      	ldr	r3, [pc, #336]	; (8001d80 <main+0x15a0>)
 8001c2e:	220d      	movs	r2, #13
 8001c30:	601a      	str	r2, [r3, #0]
                  break;
 8001c32:	e01c      	b.n	8001c6e <main+0x148e>
                case 4:
                  curr_pwm = cn4_one;
 8001c34:	4b52      	ldr	r3, [pc, #328]	; (8001d80 <main+0x15a0>)
 8001c36:	2203      	movs	r2, #3
 8001c38:	601a      	str	r2, [r3, #0]
                  break;
 8001c3a:	e018      	b.n	8001c6e <main+0x148e>
                case 5:
                  curr_pwm = cn5_one;
 8001c3c:	4b50      	ldr	r3, [pc, #320]	; (8001d80 <main+0x15a0>)
 8001c3e:	2202      	movs	r2, #2
 8001c40:	601a      	str	r2, [r3, #0]
                  break;
 8001c42:	e014      	b.n	8001c6e <main+0x148e>
                case 6:
                  curr_pwm = cn6_one;
 8001c44:	4b4e      	ldr	r3, [pc, #312]	; (8001d80 <main+0x15a0>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	601a      	str	r2, [r3, #0]
                  break;
 8001c4a:	e010      	b.n	8001c6e <main+0x148e>
                case 7:
                  curr_pwm = cn7_one;
 8001c4c:	4b4c      	ldr	r3, [pc, #304]	; (8001d80 <main+0x15a0>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	601a      	str	r2, [r3, #0]
                  break;
 8001c52:	e00c      	b.n	8001c6e <main+0x148e>
                case 8:
                  curr_pwm = cn8_one;
 8001c54:	4b4a      	ldr	r3, [pc, #296]	; (8001d80 <main+0x15a0>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	601a      	str	r2, [r3, #0]
                  break;
 8001c5a:	e008      	b.n	8001c6e <main+0x148e>
                case 9:
                  curr_pwm = cn9_one;
 8001c5c:	4b48      	ldr	r3, [pc, #288]	; (8001d80 <main+0x15a0>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	601a      	str	r2, [r3, #0]
                  break;
 8001c62:	e004      	b.n	8001c6e <main+0x148e>
                case 10:
                  curr_pwm = cn10_one;
 8001c64:	4b46      	ldr	r3, [pc, #280]	; (8001d80 <main+0x15a0>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
                  break;
 8001c6a:	e000      	b.n	8001c6e <main+0x148e>

                default:
                  break;
 8001c6c:	46c0      	nop			; (mov r8, r8)
                }

                if (depth_status == 1)
 8001c6e:	4b45      	ldr	r3, [pc, #276]	; (8001d84 <main+0x15a4>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d127      	bne.n	8001cc6 <main+0x14e6>
                {
                  if (endo_status == 1)
 8001c76:	4b44      	ldr	r3, [pc, #272]	; (8001d88 <main+0x15a8>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d111      	bne.n	8001ca2 <main+0x14c2>
                  {
                    led_pwm_setvalue(inner_warm, ten);
 8001c7e:	210a      	movs	r1, #10
 8001c80:	2001      	movs	r0, #1
 8001c82:	f7fe fd7b 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, ten);
 8001c86:	210a      	movs	r1, #10
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f7fe fd77 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8001c8e:	2164      	movs	r1, #100	; 0x64
 8001c90:	2003      	movs	r0, #3
 8001c92:	f7fe fd73 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8001c96:	2164      	movs	r1, #100	; 0x64
 8001c98:	2002      	movs	r0, #2
 8001c9a:	f7fe fd6f 	bl	800077c <led_pwm_setvalue>
 8001c9e:	f000 fec3 	bl	8002a28 <main+0x2248>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, ten);
 8001ca2:	210a      	movs	r1, #10
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	f7fe fd69 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, ten);
 8001caa:	210a      	movs	r1, #10
 8001cac:	2000      	movs	r0, #0
 8001cae:	f7fe fd65 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, ten);
 8001cb2:	210a      	movs	r1, #10
 8001cb4:	2003      	movs	r0, #3
 8001cb6:	f7fe fd61 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, ten);
 8001cba:	210a      	movs	r1, #10
 8001cbc:	2002      	movs	r0, #2
 8001cbe:	f7fe fd5d 	bl	800077c <led_pwm_setvalue>
 8001cc2:	f000 feb1 	bl	8002a28 <main+0x2248>

                else
                {

                  // color_status = res_min - step_size_color * 5;
                  if (endo_status == 1)
 8001cc6:	4b30      	ldr	r3, [pc, #192]	; (8001d88 <main+0x15a8>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d113      	bne.n	8001cf6 <main+0x1516>
                  {
                    led_pwm_setvalue(inner_warm, curr_pwm);
 8001cce:	4b2c      	ldr	r3, [pc, #176]	; (8001d80 <main+0x15a0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	0019      	movs	r1, r3
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	f7fe fd51 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_off);
 8001cda:	2164      	movs	r1, #100	; 0x64
 8001cdc:	2000      	movs	r0, #0
 8001cde:	f7fe fd4d 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8001ce2:	2164      	movs	r1, #100	; 0x64
 8001ce4:	2002      	movs	r0, #2
 8001ce6:	f7fe fd49 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8001cea:	2164      	movs	r1, #100	; 0x64
 8001cec:	2003      	movs	r0, #3
 8001cee:	f7fe fd45 	bl	800077c <led_pwm_setvalue>
 8001cf2:	f000 fe99 	bl	8002a28 <main+0x2248>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, curr_pwm);
 8001cf6:	4b22      	ldr	r3, [pc, #136]	; (8001d80 <main+0x15a0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	f7fe fd3d 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_off);
 8001d02:	2164      	movs	r1, #100	; 0x64
 8001d04:	2000      	movs	r0, #0
 8001d06:	f7fe fd39 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8001d0a:	2164      	movs	r1, #100	; 0x64
 8001d0c:	2002      	movs	r0, #2
 8001d0e:	f7fe fd35 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, curr_pwm);
 8001d12:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <main+0x15a0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	0019      	movs	r1, r3
 8001d18:	2003      	movs	r0, #3
 8001d1a:	f7fe fd2f 	bl	800077c <led_pwm_setvalue>
 8001d1e:	f000 fe83 	bl	8002a28 <main+0x2248>
                  }
                }
              }
              else if (Rx_data[3] == '0')
 8001d22:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <main+0x15ac>)
 8001d24:	78db      	ldrb	r3, [r3, #3]
 8001d26:	2b30      	cmp	r3, #48	; 0x30
 8001d28:	d001      	beq.n	8001d2e <main+0x154e>
 8001d2a:	f000 fe7d 	bl	8002a28 <main+0x2248>
              {
                color_polarity = _zero;
 8001d2e:	1dfb      	adds	r3, r7, #7
 8001d30:	2202      	movs	r2, #2
 8001d32:	701a      	strb	r2, [r3, #0]
                color_status = res_min - step_size_color * 1;
 8001d34:	4b19      	ldr	r3, [pc, #100]	; (8001d9c <main+0x15bc>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <main+0x15c0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	b25a      	sxtb	r2, r3
 8001d46:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <main+0x15c4>)
 8001d48:	701a      	strb	r2, [r3, #0]
                if (depth_status == 1)
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <main+0x15a4>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d13c      	bne.n	8001dcc <main+0x15ec>
                {
                  if (endo_status == 1)
 8001d52:	4b0d      	ldr	r3, [pc, #52]	; (8001d88 <main+0x15a8>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d126      	bne.n	8001da8 <main+0x15c8>
                  {
                    led_pwm_setvalue(inner_warm, all_on);
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	f7fe fd0d 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_on);
 8001d62:	2100      	movs	r1, #0
 8001d64:	2000      	movs	r0, #0
 8001d66:	f7fe fd09 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8001d6a:	2164      	movs	r1, #100	; 0x64
 8001d6c:	2003      	movs	r0, #3
 8001d6e:	f7fe fd05 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8001d72:	2164      	movs	r1, #100	; 0x64
 8001d74:	2002      	movs	r0, #2
 8001d76:	f7fe fd01 	bl	800077c <led_pwm_setvalue>
 8001d7a:	f000 fe55 	bl	8002a28 <main+0x2248>
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	20000048 	.word	0x20000048
 8001d84:	20000042 	.word	0x20000042
 8001d88:	20000043 	.word	0x20000043
 8001d8c:	20000168 	.word	0x20000168
 8001d90:	2000004c 	.word	0x2000004c
 8001d94:	080062d0 	.word	0x080062d0
 8001d98:	080062fc 	.word	0x080062fc
 8001d9c:	20000174 	.word	0x20000174
 8001da0:	20000004 	.word	0x20000004
 8001da4:	20000040 	.word	0x20000040
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, all_on);
 8001da8:	2100      	movs	r1, #0
 8001daa:	2001      	movs	r0, #1
 8001dac:	f7fe fce6 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, all_on);
 8001db0:	2100      	movs	r1, #0
 8001db2:	2000      	movs	r0, #0
 8001db4:	f7fe fce2 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_on);
 8001db8:	2100      	movs	r1, #0
 8001dba:	2003      	movs	r0, #3
 8001dbc:	f7fe fcde 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_on);
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	2002      	movs	r0, #2
 8001dc4:	f7fe fcda 	bl	800077c <led_pwm_setvalue>
 8001dc8:	f000 fe2e 	bl	8002a28 <main+0x2248>
                  }
                }

                else
                {
                  color_status = last_status;
 8001dcc:	4be1      	ldr	r3, [pc, #900]	; (8002154 <main+0x1974>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	569a      	ldrsb	r2, [r3, r2]
 8001dd2:	4be1      	ldr	r3, [pc, #900]	; (8002158 <main+0x1978>)
 8001dd4:	701a      	strb	r2, [r3, #0]

                  if (endo_status == 1)
 8001dd6:	4be1      	ldr	r3, [pc, #900]	; (800215c <main+0x197c>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d117      	bne.n	8001e0e <main+0x162e>
                  {
                    led_pwm_setvalue(inner_warm, last_status);
 8001dde:	4bdd      	ldr	r3, [pc, #884]	; (8002154 <main+0x1974>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	b25b      	sxtb	r3, r3
 8001de4:	0019      	movs	r1, r3
 8001de6:	2001      	movs	r0, #1
 8001de8:	f7fe fcc8 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, last_status);
 8001dec:	4bd9      	ldr	r3, [pc, #868]	; (8002154 <main+0x1974>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	b25b      	sxtb	r3, r3
 8001df2:	0019      	movs	r1, r3
 8001df4:	2000      	movs	r0, #0
 8001df6:	f7fe fcc1 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8001dfa:	2164      	movs	r1, #100	; 0x64
 8001dfc:	2003      	movs	r0, #3
 8001dfe:	f7fe fcbd 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8001e02:	2164      	movs	r1, #100	; 0x64
 8001e04:	2002      	movs	r0, #2
 8001e06:	f7fe fcb9 	bl	800077c <led_pwm_setvalue>
 8001e0a:	f000 fe0d 	bl	8002a28 <main+0x2248>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, last_status);
 8001e0e:	4bd1      	ldr	r3, [pc, #836]	; (8002154 <main+0x1974>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	b25b      	sxtb	r3, r3
 8001e14:	0019      	movs	r1, r3
 8001e16:	2001      	movs	r0, #1
 8001e18:	f7fe fcb0 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, last_status);
 8001e1c:	4bcd      	ldr	r3, [pc, #820]	; (8002154 <main+0x1974>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	b25b      	sxtb	r3, r3
 8001e22:	0019      	movs	r1, r3
 8001e24:	2000      	movs	r0, #0
 8001e26:	f7fe fca9 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, last_status);
 8001e2a:	4bca      	ldr	r3, [pc, #808]	; (8002154 <main+0x1974>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	b25b      	sxtb	r3, r3
 8001e30:	0019      	movs	r1, r3
 8001e32:	2003      	movs	r0, #3
 8001e34:	f7fe fca2 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, last_status);
 8001e38:	4bc6      	ldr	r3, [pc, #792]	; (8002154 <main+0x1974>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	b25b      	sxtb	r3, r3
 8001e3e:	0019      	movs	r1, r3
 8001e40:	2002      	movs	r0, #2
 8001e42:	f7fe fc9b 	bl	800077c <led_pwm_setvalue>
 8001e46:	f000 fdef 	bl	8002a28 <main+0x2248>
                  }
                }
              }
            }

            else if (Rx_data[2] == '+') //@c+5#
 8001e4a:	4bc5      	ldr	r3, [pc, #788]	; (8002160 <main+0x1980>)
 8001e4c:	789b      	ldrb	r3, [r3, #2]
 8001e4e:	2b2b      	cmp	r3, #43	; 0x2b
 8001e50:	d001      	beq.n	8001e56 <main+0x1676>
 8001e52:	f000 fde9 	bl	8002a28 <main+0x2248>
            {

              // in  t_avg = (res_min + res_max) / 2;
              // int avg = (res_max - last_status)/5;
              avg = last_status - 15; // res_max - 5*step_size_color;
 8001e56:	4bbf      	ldr	r3, [pc, #764]	; (8002154 <main+0x1974>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	b25b      	sxtb	r3, r3
 8001e5c:	3b0f      	subs	r3, #15
 8001e5e:	603b      	str	r3, [r7, #0]
              color_polarity = _plus;
 8001e60:	1dfb      	adds	r3, r7, #7
 8001e62:	2201      	movs	r2, #1
 8001e64:	701a      	strb	r2, [r3, #0]
              // color_status = res_min - step_size_color * 1;
              if (Rx_data[3] == '5' && depth_status != 1)
 8001e66:	4bbe      	ldr	r3, [pc, #760]	; (8002160 <main+0x1980>)
 8001e68:	78db      	ldrb	r3, [r3, #3]
 8001e6a:	2b35      	cmp	r3, #53	; 0x35
 8001e6c:	d000      	beq.n	8001e70 <main+0x1690>
 8001e6e:	e098      	b.n	8001fa2 <main+0x17c2>
 8001e70:	4bbc      	ldr	r3, [pc, #752]	; (8002164 <main+0x1984>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d100      	bne.n	8001e7a <main+0x169a>
 8001e78:	e093      	b.n	8001fa2 <main+0x17c2>
              {
                color_polarity = _plus;
 8001e7a:	1dfb      	adds	r3, r7, #7
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]
                // color_status = res_min - step_size_color * 1;

                switch (last_inten_pos)
 8001e80:	4bb9      	ldr	r3, [pc, #740]	; (8002168 <main+0x1988>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b0a      	cmp	r3, #10
 8001e86:	d82c      	bhi.n	8001ee2 <main+0x1702>
 8001e88:	009a      	lsls	r2, r3, #2
 8001e8a:	4bb8      	ldr	r3, [pc, #736]	; (800216c <main+0x198c>)
 8001e8c:	18d3      	adds	r3, r2, r3
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	469f      	mov	pc, r3
                {
                case 1:
                  curr_pwm = cp1_five;
 8001e92:	4bb7      	ldr	r3, [pc, #732]	; (8002170 <main+0x1990>)
 8001e94:	223b      	movs	r2, #59	; 0x3b
 8001e96:	601a      	str	r2, [r3, #0]
                  break;
 8001e98:	e024      	b.n	8001ee4 <main+0x1704>
                case 2:
                  curr_pwm = cp2_five;
 8001e9a:	4bb5      	ldr	r3, [pc, #724]	; (8002170 <main+0x1990>)
 8001e9c:	222d      	movs	r2, #45	; 0x2d
 8001e9e:	601a      	str	r2, [r3, #0]
                  break;
 8001ea0:	e020      	b.n	8001ee4 <main+0x1704>
                case 3:
                  curr_pwm = cp3_five;
 8001ea2:	4bb3      	ldr	r3, [pc, #716]	; (8002170 <main+0x1990>)
 8001ea4:	2221      	movs	r2, #33	; 0x21
 8001ea6:	601a      	str	r2, [r3, #0]
                  break;
 8001ea8:	e01c      	b.n	8001ee4 <main+0x1704>
                case 4:
                  curr_pwm = cp4_five;
 8001eaa:	4bb1      	ldr	r3, [pc, #708]	; (8002170 <main+0x1990>)
 8001eac:	2214      	movs	r2, #20
 8001eae:	601a      	str	r2, [r3, #0]
                  break;
 8001eb0:	e018      	b.n	8001ee4 <main+0x1704>
                case 5:
                  curr_pwm = cp5_five;
 8001eb2:	4baf      	ldr	r3, [pc, #700]	; (8002170 <main+0x1990>)
 8001eb4:	220c      	movs	r2, #12
 8001eb6:	601a      	str	r2, [r3, #0]
                  break;
 8001eb8:	e014      	b.n	8001ee4 <main+0x1704>
                case 6:
                  curr_pwm = cp6_five;
 8001eba:	4bad      	ldr	r3, [pc, #692]	; (8002170 <main+0x1990>)
 8001ebc:	220a      	movs	r2, #10
 8001ebe:	601a      	str	r2, [r3, #0]
                  break;
 8001ec0:	e010      	b.n	8001ee4 <main+0x1704>
                case 7:
                  curr_pwm = cp7_five;
 8001ec2:	4bab      	ldr	r3, [pc, #684]	; (8002170 <main+0x1990>)
 8001ec4:	2205      	movs	r2, #5
 8001ec6:	601a      	str	r2, [r3, #0]
                  break;
 8001ec8:	e00c      	b.n	8001ee4 <main+0x1704>
                case 8:
                  curr_pwm = cp8_five;
 8001eca:	4ba9      	ldr	r3, [pc, #676]	; (8002170 <main+0x1990>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
                  break;
 8001ed0:	e008      	b.n	8001ee4 <main+0x1704>
                case 9:
                  curr_pwm = cp9_five;
 8001ed2:	4ba7      	ldr	r3, [pc, #668]	; (8002170 <main+0x1990>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
                  break;
 8001ed8:	e004      	b.n	8001ee4 <main+0x1704>
                case 10:
                  curr_pwm = cp10_five;
 8001eda:	4ba5      	ldr	r3, [pc, #660]	; (8002170 <main+0x1990>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
                  break;
 8001ee0:	e000      	b.n	8001ee4 <main+0x1704>

                default:
                  break;
 8001ee2:	46c0      	nop			; (mov r8, r8)
                }
                last_clr_status = curr_pwm;
 8001ee4:	4ba2      	ldr	r3, [pc, #648]	; (8002170 <main+0x1990>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	b25a      	sxtb	r2, r3
 8001eea:	4ba2      	ldr	r3, [pc, #648]	; (8002174 <main+0x1994>)
 8001eec:	701a      	strb	r2, [r3, #0]

                if (depth_status == 1)
 8001eee:	4b9d      	ldr	r3, [pc, #628]	; (8002164 <main+0x1984>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d127      	bne.n	8001f46 <main+0x1766>
                {
                  if (endo_status == 1)
 8001ef6:	4b99      	ldr	r3, [pc, #612]	; (800215c <main+0x197c>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d111      	bne.n	8001f22 <main+0x1742>
                  {
                    led_pwm_setvalue(inner_warm, all_off);
 8001efe:	2164      	movs	r1, #100	; 0x64
 8001f00:	2001      	movs	r0, #1
 8001f02:	f7fe fc3b 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, ten);
 8001f06:	210a      	movs	r1, #10
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f7fe fc37 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8001f0e:	2164      	movs	r1, #100	; 0x64
 8001f10:	2003      	movs	r0, #3
 8001f12:	f7fe fc33 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8001f16:	2164      	movs	r1, #100	; 0x64
 8001f18:	2002      	movs	r0, #2
 8001f1a:	f7fe fc2f 	bl	800077c <led_pwm_setvalue>
                if (depth_status == 1)
 8001f1e:	f000 fd83 	bl	8002a28 <main+0x2248>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, ten);
 8001f22:	210a      	movs	r1, #10
 8001f24:	2001      	movs	r0, #1
 8001f26:	f7fe fc29 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, ten);
 8001f2a:	210a      	movs	r1, #10
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	f7fe fc25 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, ten);
 8001f32:	210a      	movs	r1, #10
 8001f34:	2003      	movs	r0, #3
 8001f36:	f7fe fc21 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, ten);
 8001f3a:	210a      	movs	r1, #10
 8001f3c:	2002      	movs	r0, #2
 8001f3e:	f7fe fc1d 	bl	800077c <led_pwm_setvalue>
                if (depth_status == 1)
 8001f42:	f000 fd71 	bl	8002a28 <main+0x2248>
                }

                else
                {
                  // color_status = avg + step_size_color * 1;
                  if (endo_status == 1)
 8001f46:	4b85      	ldr	r3, [pc, #532]	; (800215c <main+0x197c>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d113      	bne.n	8001f76 <main+0x1796>
                  {
                    led_pwm_setvalue(inner_white, curr_pwm);
 8001f4e:	4b88      	ldr	r3, [pc, #544]	; (8002170 <main+0x1990>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	0019      	movs	r1, r3
 8001f54:	2000      	movs	r0, #0
 8001f56:	f7fe fc11 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_warm, all_off);
 8001f5a:	2164      	movs	r1, #100	; 0x64
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	f7fe fc0d 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 8001f62:	2164      	movs	r1, #100	; 0x64
 8001f64:	2002      	movs	r0, #2
 8001f66:	f7fe fc09 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8001f6a:	2164      	movs	r1, #100	; 0x64
 8001f6c:	2003      	movs	r0, #3
 8001f6e:	f7fe fc05 	bl	800077c <led_pwm_setvalue>
                if (depth_status == 1)
 8001f72:	f000 fd59 	bl	8002a28 <main+0x2248>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_white, curr_pwm);
 8001f76:	4b7e      	ldr	r3, [pc, #504]	; (8002170 <main+0x1990>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	0019      	movs	r1, r3
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f7fe fbfd 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_warm, all_off);
 8001f82:	2164      	movs	r1, #100	; 0x64
 8001f84:	2001      	movs	r0, #1
 8001f86:	f7fe fbf9 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, curr_pwm);
 8001f8a:	4b79      	ldr	r3, [pc, #484]	; (8002170 <main+0x1990>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	0019      	movs	r1, r3
 8001f90:	2002      	movs	r0, #2
 8001f92:	f7fe fbf3 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8001f96:	2164      	movs	r1, #100	; 0x64
 8001f98:	2003      	movs	r0, #3
 8001f9a:	f7fe fbef 	bl	800077c <led_pwm_setvalue>
                if (depth_status == 1)
 8001f9e:	f000 fd43 	bl	8002a28 <main+0x2248>
                  }
                }
              }
              else if (Rx_data[3] == '4')
 8001fa2:	4b6f      	ldr	r3, [pc, #444]	; (8002160 <main+0x1980>)
 8001fa4:	78db      	ldrb	r3, [r3, #3]
 8001fa6:	2b34      	cmp	r3, #52	; 0x34
 8001fa8:	d000      	beq.n	8001fac <main+0x17cc>
 8001faa:	e08e      	b.n	80020ca <main+0x18ea>
              {
                color_polarity = _plus;
 8001fac:	1dfb      	adds	r3, r7, #7
 8001fae:	2201      	movs	r2, #1
 8001fb0:	701a      	strb	r2, [r3, #0]
                // color_status = res_min - step_size_color * 1;
                switch (last_inten_pos)
 8001fb2:	4b6d      	ldr	r3, [pc, #436]	; (8002168 <main+0x1988>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b0a      	cmp	r3, #10
 8001fb8:	d82c      	bhi.n	8002014 <main+0x1834>
 8001fba:	009a      	lsls	r2, r3, #2
 8001fbc:	4b6e      	ldr	r3, [pc, #440]	; (8002178 <main+0x1998>)
 8001fbe:	18d3      	adds	r3, r2, r3
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	469f      	mov	pc, r3
                {
                case 1:
                  curr_pwm = cp1_four;
 8001fc4:	4b6a      	ldr	r3, [pc, #424]	; (8002170 <main+0x1990>)
 8001fc6:	223d      	movs	r2, #61	; 0x3d
 8001fc8:	601a      	str	r2, [r3, #0]
                  break;
 8001fca:	e024      	b.n	8002016 <main+0x1836>
                case 2:
                  curr_pwm = cp2_four;
 8001fcc:	4b68      	ldr	r3, [pc, #416]	; (8002170 <main+0x1990>)
 8001fce:	222f      	movs	r2, #47	; 0x2f
 8001fd0:	601a      	str	r2, [r3, #0]
                  break;
 8001fd2:	e020      	b.n	8002016 <main+0x1836>
                case 3:
                  curr_pwm = cp3_four;
 8001fd4:	4b66      	ldr	r3, [pc, #408]	; (8002170 <main+0x1990>)
 8001fd6:	2223      	movs	r2, #35	; 0x23
 8001fd8:	601a      	str	r2, [r3, #0]
                  break;
 8001fda:	e01c      	b.n	8002016 <main+0x1836>
                case 4:
                  curr_pwm = cp4_four;
 8001fdc:	4b64      	ldr	r3, [pc, #400]	; (8002170 <main+0x1990>)
 8001fde:	2216      	movs	r2, #22
 8001fe0:	601a      	str	r2, [r3, #0]
                  break;
 8001fe2:	e018      	b.n	8002016 <main+0x1836>
                case 5:
                  curr_pwm = cp5_four;
 8001fe4:	4b62      	ldr	r3, [pc, #392]	; (8002170 <main+0x1990>)
 8001fe6:	220d      	movs	r2, #13
 8001fe8:	601a      	str	r2, [r3, #0]
                  break;
 8001fea:	e014      	b.n	8002016 <main+0x1836>
                case 6:
                  curr_pwm = cp6_four;
 8001fec:	4b60      	ldr	r3, [pc, #384]	; (8002170 <main+0x1990>)
 8001fee:	220b      	movs	r2, #11
 8001ff0:	601a      	str	r2, [r3, #0]
                  break;
 8001ff2:	e010      	b.n	8002016 <main+0x1836>
                case 7:
                  curr_pwm = cp7_four;
 8001ff4:	4b5e      	ldr	r3, [pc, #376]	; (8002170 <main+0x1990>)
 8001ff6:	2206      	movs	r2, #6
 8001ff8:	601a      	str	r2, [r3, #0]
                  break;
 8001ffa:	e00c      	b.n	8002016 <main+0x1836>
                case 8:
                  curr_pwm = cp8_four;
 8001ffc:	4b5c      	ldr	r3, [pc, #368]	; (8002170 <main+0x1990>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
                  break;
 8002002:	e008      	b.n	8002016 <main+0x1836>
                case 9:
                  curr_pwm = cp9_four;
 8002004:	4b5a      	ldr	r3, [pc, #360]	; (8002170 <main+0x1990>)
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
                  break;
 800200a:	e004      	b.n	8002016 <main+0x1836>
                case 10:
                  curr_pwm = cp10_four;
 800200c:	4b58      	ldr	r3, [pc, #352]	; (8002170 <main+0x1990>)
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
                  break;
 8002012:	e000      	b.n	8002016 <main+0x1836>

                default:
                  break;
 8002014:	46c0      	nop			; (mov r8, r8)
                }

                if (depth_status == 1)
 8002016:	4b53      	ldr	r3, [pc, #332]	; (8002164 <main+0x1984>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d127      	bne.n	800206e <main+0x188e>
                {
                  if (endo_status == 1)
 800201e:	4b4f      	ldr	r3, [pc, #316]	; (800215c <main+0x197c>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d111      	bne.n	800204a <main+0x186a>
                  {
                    led_pwm_setvalue(inner_warm, all_off);
 8002026:	2164      	movs	r1, #100	; 0x64
 8002028:	2001      	movs	r0, #1
 800202a:	f7fe fba7 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, ten);
 800202e:	210a      	movs	r1, #10
 8002030:	2000      	movs	r0, #0
 8002032:	f7fe fba3 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8002036:	2164      	movs	r1, #100	; 0x64
 8002038:	2003      	movs	r0, #3
 800203a:	f7fe fb9f 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 800203e:	2164      	movs	r1, #100	; 0x64
 8002040:	2002      	movs	r0, #2
 8002042:	f7fe fb9b 	bl	800077c <led_pwm_setvalue>
 8002046:	f000 fcef 	bl	8002a28 <main+0x2248>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, ten);
 800204a:	210a      	movs	r1, #10
 800204c:	2001      	movs	r0, #1
 800204e:	f7fe fb95 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, ten);
 8002052:	210a      	movs	r1, #10
 8002054:	2000      	movs	r0, #0
 8002056:	f7fe fb91 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, ten);
 800205a:	210a      	movs	r1, #10
 800205c:	2003      	movs	r0, #3
 800205e:	f7fe fb8d 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, ten);
 8002062:	210a      	movs	r1, #10
 8002064:	2002      	movs	r0, #2
 8002066:	f7fe fb89 	bl	800077c <led_pwm_setvalue>
 800206a:	f000 fcdd 	bl	8002a28 <main+0x2248>
                }

                else
                {
                  // color_status = avg + step_size_color * 1;
                  if (endo_status == 1)
 800206e:	4b3b      	ldr	r3, [pc, #236]	; (800215c <main+0x197c>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d113      	bne.n	800209e <main+0x18be>
                  {
                    led_pwm_setvalue(inner_white, curr_pwm);
 8002076:	4b3e      	ldr	r3, [pc, #248]	; (8002170 <main+0x1990>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	0019      	movs	r1, r3
 800207c:	2000      	movs	r0, #0
 800207e:	f7fe fb7d 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_warm, all_off);
 8002082:	2164      	movs	r1, #100	; 0x64
 8002084:	2001      	movs	r0, #1
 8002086:	f7fe fb79 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 800208a:	2164      	movs	r1, #100	; 0x64
 800208c:	2002      	movs	r0, #2
 800208e:	f7fe fb75 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8002092:	2164      	movs	r1, #100	; 0x64
 8002094:	2003      	movs	r0, #3
 8002096:	f7fe fb71 	bl	800077c <led_pwm_setvalue>
 800209a:	f000 fcc5 	bl	8002a28 <main+0x2248>
                  }

                  else
                  {
                    led_pwm_setvalue(inner_white, curr_pwm);
 800209e:	4b34      	ldr	r3, [pc, #208]	; (8002170 <main+0x1990>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	0019      	movs	r1, r3
 80020a4:	2000      	movs	r0, #0
 80020a6:	f7fe fb69 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_warm, all_off);
 80020aa:	2164      	movs	r1, #100	; 0x64
 80020ac:	2001      	movs	r0, #1
 80020ae:	f7fe fb65 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, curr_pwm);
 80020b2:	4b2f      	ldr	r3, [pc, #188]	; (8002170 <main+0x1990>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	0019      	movs	r1, r3
 80020b8:	2002      	movs	r0, #2
 80020ba:	f7fe fb5f 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 80020be:	2164      	movs	r1, #100	; 0x64
 80020c0:	2003      	movs	r0, #3
 80020c2:	f7fe fb5b 	bl	800077c <led_pwm_setvalue>
 80020c6:	f000 fcaf 	bl	8002a28 <main+0x2248>
                  }
                }
              }
              else if (Rx_data[3] == '3') //@c+5#
 80020ca:	4b25      	ldr	r3, [pc, #148]	; (8002160 <main+0x1980>)
 80020cc:	78db      	ldrb	r3, [r3, #3]
 80020ce:	2b33      	cmp	r3, #51	; 0x33
 80020d0:	d000      	beq.n	80020d4 <main+0x18f4>
 80020d2:	e0b4      	b.n	800223e <main+0x1a5e>
              {
                color_polarity = _plus;
 80020d4:	1dfb      	adds	r3, r7, #7
 80020d6:	2201      	movs	r2, #1
 80020d8:	701a      	strb	r2, [r3, #0]
                color_status = res_min - step_size_color * 1;
 80020da:	4b28      	ldr	r3, [pc, #160]	; (800217c <main+0x199c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	4b27      	ldr	r3, [pc, #156]	; (8002180 <main+0x19a0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	b25a      	sxtb	r2, r3
 80020ec:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <main+0x1978>)
 80020ee:	701a      	strb	r2, [r3, #0]
                switch (last_inten_pos)
 80020f0:	4b1d      	ldr	r3, [pc, #116]	; (8002168 <main+0x1988>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b0a      	cmp	r3, #10
 80020f6:	d847      	bhi.n	8002188 <main+0x19a8>
 80020f8:	009a      	lsls	r2, r3, #2
 80020fa:	4b22      	ldr	r3, [pc, #136]	; (8002184 <main+0x19a4>)
 80020fc:	18d3      	adds	r3, r2, r3
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	469f      	mov	pc, r3
                {
                case 1:
                  curr_pwm = cp1_three;
 8002102:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <main+0x1990>)
 8002104:	223f      	movs	r2, #63	; 0x3f
 8002106:	601a      	str	r2, [r3, #0]
                  break;
 8002108:	e03f      	b.n	800218a <main+0x19aa>
                case 2:
                  curr_pwm = cp2_three;
 800210a:	4b19      	ldr	r3, [pc, #100]	; (8002170 <main+0x1990>)
 800210c:	2231      	movs	r2, #49	; 0x31
 800210e:	601a      	str	r2, [r3, #0]
                  break;
 8002110:	e03b      	b.n	800218a <main+0x19aa>
                case 3:
                  curr_pwm = cp3_three;
 8002112:	4b17      	ldr	r3, [pc, #92]	; (8002170 <main+0x1990>)
 8002114:	2225      	movs	r2, #37	; 0x25
 8002116:	601a      	str	r2, [r3, #0]
                  break;
 8002118:	e037      	b.n	800218a <main+0x19aa>
                case 4:
                  curr_pwm = cp4_three;
 800211a:	4b15      	ldr	r3, [pc, #84]	; (8002170 <main+0x1990>)
 800211c:	2218      	movs	r2, #24
 800211e:	601a      	str	r2, [r3, #0]
                  break;
 8002120:	e033      	b.n	800218a <main+0x19aa>
                case 5:
                  curr_pwm = cp5_three;
 8002122:	4b13      	ldr	r3, [pc, #76]	; (8002170 <main+0x1990>)
 8002124:	220f      	movs	r2, #15
 8002126:	601a      	str	r2, [r3, #0]
                  break;
 8002128:	e02f      	b.n	800218a <main+0x19aa>
                case 6:
                  curr_pwm = cp6_three;
 800212a:	4b11      	ldr	r3, [pc, #68]	; (8002170 <main+0x1990>)
 800212c:	220b      	movs	r2, #11
 800212e:	601a      	str	r2, [r3, #0]
                  break;
 8002130:	e02b      	b.n	800218a <main+0x19aa>
                case 7:
                  curr_pwm = cp7_three;
 8002132:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <main+0x1990>)
 8002134:	2207      	movs	r2, #7
 8002136:	601a      	str	r2, [r3, #0]
                  break;
 8002138:	e027      	b.n	800218a <main+0x19aa>
                case 8:
                  curr_pwm = cp8_three;
 800213a:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <main+0x1990>)
 800213c:	2201      	movs	r2, #1
 800213e:	601a      	str	r2, [r3, #0]
                  break;
 8002140:	e023      	b.n	800218a <main+0x19aa>
                case 9:
                  curr_pwm = cp9_three;
 8002142:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <main+0x1990>)
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
                  break;
 8002148:	e01f      	b.n	800218a <main+0x19aa>
                case 10:
                  curr_pwm = cp10_three;
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <main+0x1990>)
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
                  break;
 8002150:	e01b      	b.n	800218a <main+0x19aa>
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	20000038 	.word	0x20000038
 8002158:	20000040 	.word	0x20000040
 800215c:	20000043 	.word	0x20000043
 8002160:	20000168 	.word	0x20000168
 8002164:	20000042 	.word	0x20000042
 8002168:	2000004c 	.word	0x2000004c
 800216c:	08006328 	.word	0x08006328
 8002170:	20000048 	.word	0x20000048
 8002174:	20000039 	.word	0x20000039
 8002178:	08006354 	.word	0x08006354
 800217c:	20000174 	.word	0x20000174
 8002180:	20000004 	.word	0x20000004
 8002184:	08006380 	.word	0x08006380

                default:
                  break;
 8002188:	46c0      	nop			; (mov r8, r8)
                }
                if (depth_status == 1)
 800218a:	4bdb      	ldr	r3, [pc, #876]	; (80024f8 <main+0x1d18>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d127      	bne.n	80021e2 <main+0x1a02>
                {
                  if (endo_status == 1)
 8002192:	4bda      	ldr	r3, [pc, #872]	; (80024fc <main+0x1d1c>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d111      	bne.n	80021be <main+0x19de>
                  {
                    led_pwm_setvalue(inner_warm, all_off);
 800219a:	2164      	movs	r1, #100	; 0x64
 800219c:	2001      	movs	r0, #1
 800219e:	f7fe faed 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, ten);
 80021a2:	210a      	movs	r1, #10
 80021a4:	2000      	movs	r0, #0
 80021a6:	f7fe fae9 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 80021aa:	2164      	movs	r1, #100	; 0x64
 80021ac:	2003      	movs	r0, #3
 80021ae:	f7fe fae5 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 80021b2:	2164      	movs	r1, #100	; 0x64
 80021b4:	2002      	movs	r0, #2
 80021b6:	f7fe fae1 	bl	800077c <led_pwm_setvalue>
 80021ba:	f000 fc35 	bl	8002a28 <main+0x2248>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, ten);
 80021be:	210a      	movs	r1, #10
 80021c0:	2001      	movs	r0, #1
 80021c2:	f7fe fadb 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, ten);
 80021c6:	210a      	movs	r1, #10
 80021c8:	2000      	movs	r0, #0
 80021ca:	f7fe fad7 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, ten);
 80021ce:	210a      	movs	r1, #10
 80021d0:	2003      	movs	r0, #3
 80021d2:	f7fe fad3 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, ten);
 80021d6:	210a      	movs	r1, #10
 80021d8:	2002      	movs	r0, #2
 80021da:	f7fe facf 	bl	800077c <led_pwm_setvalue>
 80021de:	f000 fc23 	bl	8002a28 <main+0x2248>
                }

                else
                {
                  // color_status = res_max + step_size_color * 3;
                  if (endo_status == 1)
 80021e2:	4bc6      	ldr	r3, [pc, #792]	; (80024fc <main+0x1d1c>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d113      	bne.n	8002212 <main+0x1a32>
                  {
                    led_pwm_setvalue(inner_white, curr_pwm);
 80021ea:	4bc5      	ldr	r3, [pc, #788]	; (8002500 <main+0x1d20>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	0019      	movs	r1, r3
 80021f0:	2000      	movs	r0, #0
 80021f2:	f7fe fac3 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_warm, all_off);
 80021f6:	2164      	movs	r1, #100	; 0x64
 80021f8:	2001      	movs	r0, #1
 80021fa:	f7fe fabf 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 80021fe:	2164      	movs	r1, #100	; 0x64
 8002200:	2002      	movs	r0, #2
 8002202:	f7fe fabb 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8002206:	2164      	movs	r1, #100	; 0x64
 8002208:	2003      	movs	r0, #3
 800220a:	f7fe fab7 	bl	800077c <led_pwm_setvalue>
 800220e:	f000 fc0b 	bl	8002a28 <main+0x2248>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_white, curr_pwm);
 8002212:	4bbb      	ldr	r3, [pc, #748]	; (8002500 <main+0x1d20>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	0019      	movs	r1, r3
 8002218:	2000      	movs	r0, #0
 800221a:	f7fe faaf 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_warm, all_off);
 800221e:	2164      	movs	r1, #100	; 0x64
 8002220:	2001      	movs	r0, #1
 8002222:	f7fe faab 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, curr_pwm);
 8002226:	4bb6      	ldr	r3, [pc, #728]	; (8002500 <main+0x1d20>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	0019      	movs	r1, r3
 800222c:	2002      	movs	r0, #2
 800222e:	f7fe faa5 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8002232:	2164      	movs	r1, #100	; 0x64
 8002234:	2003      	movs	r0, #3
 8002236:	f7fe faa1 	bl	800077c <led_pwm_setvalue>
 800223a:	f000 fbf5 	bl	8002a28 <main+0x2248>
                  }
                }
              }
              else if (Rx_data[3] == '2')
 800223e:	4bb1      	ldr	r3, [pc, #708]	; (8002504 <main+0x1d24>)
 8002240:	78db      	ldrb	r3, [r3, #3]
 8002242:	2b32      	cmp	r3, #50	; 0x32
 8002244:	d000      	beq.n	8002248 <main+0x1a68>
 8002246:	e096      	b.n	8002376 <main+0x1b96>
              {
                color_polarity = _plus;
 8002248:	1dfb      	adds	r3, r7, #7
 800224a:	2201      	movs	r2, #1
 800224c:	701a      	strb	r2, [r3, #0]
                color_status = res_min - step_size_color * 1;
 800224e:	4bae      	ldr	r3, [pc, #696]	; (8002508 <main+0x1d28>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	b2da      	uxtb	r2, r3
 8002254:	4bad      	ldr	r3, [pc, #692]	; (800250c <main+0x1d2c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	b2db      	uxtb	r3, r3
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	b2db      	uxtb	r3, r3
 800225e:	b25a      	sxtb	r2, r3
 8002260:	4bab      	ldr	r3, [pc, #684]	; (8002510 <main+0x1d30>)
 8002262:	701a      	strb	r2, [r3, #0]
                switch (last_inten_pos)
 8002264:	4bab      	ldr	r3, [pc, #684]	; (8002514 <main+0x1d34>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b0a      	cmp	r3, #10
 800226a:	d82c      	bhi.n	80022c6 <main+0x1ae6>
 800226c:	009a      	lsls	r2, r3, #2
 800226e:	4baa      	ldr	r3, [pc, #680]	; (8002518 <main+0x1d38>)
 8002270:	18d3      	adds	r3, r2, r3
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	469f      	mov	pc, r3
                {
                case 1:
                  curr_pwm = cp1_two;
 8002276:	4ba2      	ldr	r3, [pc, #648]	; (8002500 <main+0x1d20>)
 8002278:	2241      	movs	r2, #65	; 0x41
 800227a:	601a      	str	r2, [r3, #0]
                  break;
 800227c:	e024      	b.n	80022c8 <main+0x1ae8>
                case 2:
                  curr_pwm = cp2_two;
 800227e:	4ba0      	ldr	r3, [pc, #640]	; (8002500 <main+0x1d20>)
 8002280:	2233      	movs	r2, #51	; 0x33
 8002282:	601a      	str	r2, [r3, #0]
                  break;
 8002284:	e020      	b.n	80022c8 <main+0x1ae8>
                case 3:
                  curr_pwm = cp3_two;
 8002286:	4b9e      	ldr	r3, [pc, #632]	; (8002500 <main+0x1d20>)
 8002288:	2227      	movs	r2, #39	; 0x27
 800228a:	601a      	str	r2, [r3, #0]
                  break;
 800228c:	e01c      	b.n	80022c8 <main+0x1ae8>
                case 4:
                  curr_pwm = cp4_two;
 800228e:	4b9c      	ldr	r3, [pc, #624]	; (8002500 <main+0x1d20>)
 8002290:	221a      	movs	r2, #26
 8002292:	601a      	str	r2, [r3, #0]
                  break;
 8002294:	e018      	b.n	80022c8 <main+0x1ae8>
                case 5:
                  curr_pwm = cp5_two;
 8002296:	4b9a      	ldr	r3, [pc, #616]	; (8002500 <main+0x1d20>)
 8002298:	2211      	movs	r2, #17
 800229a:	601a      	str	r2, [r3, #0]
                  break;
 800229c:	e014      	b.n	80022c8 <main+0x1ae8>
                case 6:
                  curr_pwm = cp6_two;
 800229e:	4b98      	ldr	r3, [pc, #608]	; (8002500 <main+0x1d20>)
 80022a0:	220c      	movs	r2, #12
 80022a2:	601a      	str	r2, [r3, #0]
                  break;
 80022a4:	e010      	b.n	80022c8 <main+0x1ae8>
                case 7:
                  curr_pwm = cp7_two;
 80022a6:	4b96      	ldr	r3, [pc, #600]	; (8002500 <main+0x1d20>)
 80022a8:	2208      	movs	r2, #8
 80022aa:	601a      	str	r2, [r3, #0]
                  break;
 80022ac:	e00c      	b.n	80022c8 <main+0x1ae8>
                case 8:
                  curr_pwm = cp8_two;
 80022ae:	4b94      	ldr	r3, [pc, #592]	; (8002500 <main+0x1d20>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	601a      	str	r2, [r3, #0]
                  break;
 80022b4:	e008      	b.n	80022c8 <main+0x1ae8>
                case 9:
                  curr_pwm = cp9_two;
 80022b6:	4b92      	ldr	r3, [pc, #584]	; (8002500 <main+0x1d20>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
                  break;
 80022bc:	e004      	b.n	80022c8 <main+0x1ae8>
                case 10:
                  curr_pwm = cp10_two;
 80022be:	4b90      	ldr	r3, [pc, #576]	; (8002500 <main+0x1d20>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
                  break;
 80022c4:	e000      	b.n	80022c8 <main+0x1ae8>

                default:
                  break;
 80022c6:	46c0      	nop			; (mov r8, r8)
                }
                if (depth_status == 1)
 80022c8:	4b8b      	ldr	r3, [pc, #556]	; (80024f8 <main+0x1d18>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d126      	bne.n	800231e <main+0x1b3e>
                {
                  if (endo_status == 1)
 80022d0:	4b8a      	ldr	r3, [pc, #552]	; (80024fc <main+0x1d1c>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d111      	bne.n	80022fc <main+0x1b1c>
                  {
                    led_pwm_setvalue(inner_warm, all_off);
 80022d8:	2164      	movs	r1, #100	; 0x64
 80022da:	2001      	movs	r0, #1
 80022dc:	f7fe fa4e 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, ten);
 80022e0:	210a      	movs	r1, #10
 80022e2:	2000      	movs	r0, #0
 80022e4:	f7fe fa4a 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 80022e8:	2164      	movs	r1, #100	; 0x64
 80022ea:	2003      	movs	r0, #3
 80022ec:	f7fe fa46 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 80022f0:	2164      	movs	r1, #100	; 0x64
 80022f2:	2002      	movs	r0, #2
 80022f4:	f7fe fa42 	bl	800077c <led_pwm_setvalue>
 80022f8:	f000 fb96 	bl	8002a28 <main+0x2248>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, ten);
 80022fc:	210a      	movs	r1, #10
 80022fe:	2001      	movs	r0, #1
 8002300:	f7fe fa3c 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, ten);
 8002304:	210a      	movs	r1, #10
 8002306:	2000      	movs	r0, #0
 8002308:	f7fe fa38 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, ten);
 800230c:	210a      	movs	r1, #10
 800230e:	2003      	movs	r0, #3
 8002310:	f7fe fa34 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, ten);
 8002314:	210a      	movs	r1, #10
 8002316:	2002      	movs	r0, #2
 8002318:	f7fe fa30 	bl	800077c <led_pwm_setvalue>
 800231c:	e384      	b.n	8002a28 <main+0x2248>
                }

                else
                {
                  // color_status = res_max + step_size_color * 2;
                  if (endo_status == 1)
 800231e:	4b77      	ldr	r3, [pc, #476]	; (80024fc <main+0x1d1c>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d112      	bne.n	800234c <main+0x1b6c>
                  {
                    // led_pwm_setvalue(inner_white, avg + step_size_color * 4);
                    led_pwm_setvalue(inner_white, curr_pwm);
 8002326:	4b76      	ldr	r3, [pc, #472]	; (8002500 <main+0x1d20>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	0019      	movs	r1, r3
 800232c:	2000      	movs	r0, #0
 800232e:	f7fe fa25 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_warm, all_off);
 8002332:	2164      	movs	r1, #100	; 0x64
 8002334:	2001      	movs	r0, #1
 8002336:	f7fe fa21 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 800233a:	2164      	movs	r1, #100	; 0x64
 800233c:	2002      	movs	r0, #2
 800233e:	f7fe fa1d 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8002342:	2164      	movs	r1, #100	; 0x64
 8002344:	2003      	movs	r0, #3
 8002346:	f7fe fa19 	bl	800077c <led_pwm_setvalue>
 800234a:	e36d      	b.n	8002a28 <main+0x2248>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_white, curr_pwm);
 800234c:	4b6c      	ldr	r3, [pc, #432]	; (8002500 <main+0x1d20>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	0019      	movs	r1, r3
 8002352:	2000      	movs	r0, #0
 8002354:	f7fe fa12 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_warm, all_off);
 8002358:	2164      	movs	r1, #100	; 0x64
 800235a:	2001      	movs	r0, #1
 800235c:	f7fe fa0e 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, curr_pwm);
 8002360:	4b67      	ldr	r3, [pc, #412]	; (8002500 <main+0x1d20>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	0019      	movs	r1, r3
 8002366:	2002      	movs	r0, #2
 8002368:	f7fe fa08 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 800236c:	2164      	movs	r1, #100	; 0x64
 800236e:	2003      	movs	r0, #3
 8002370:	f7fe fa04 	bl	800077c <led_pwm_setvalue>
 8002374:	e358      	b.n	8002a28 <main+0x2248>
                  }
                }
              }
              else if (Rx_data[3] == '1')
 8002376:	4b63      	ldr	r3, [pc, #396]	; (8002504 <main+0x1d24>)
 8002378:	78db      	ldrb	r3, [r3, #3]
 800237a:	2b31      	cmp	r3, #49	; 0x31
 800237c:	d000      	beq.n	8002380 <main+0x1ba0>
 800237e:	e353      	b.n	8002a28 <main+0x2248>
              {
                color_polarity = _plus;
 8002380:	1dfb      	adds	r3, r7, #7
 8002382:	2201      	movs	r2, #1
 8002384:	701a      	strb	r2, [r3, #0]
                // color_status = res_min - step_size_color * 1;
                if (depth_status == 1)
 8002386:	4b5c      	ldr	r3, [pc, #368]	; (80024f8 <main+0x1d18>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d125      	bne.n	80023da <main+0x1bfa>
                {
                  if (endo_status == 1)
 800238e:	4b5b      	ldr	r3, [pc, #364]	; (80024fc <main+0x1d1c>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d110      	bne.n	80023b8 <main+0x1bd8>
                  {
                    led_pwm_setvalue(inner_warm, all_off);
 8002396:	2164      	movs	r1, #100	; 0x64
 8002398:	2001      	movs	r0, #1
 800239a:	f7fe f9ef 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, ten);
 800239e:	210a      	movs	r1, #10
 80023a0:	2000      	movs	r0, #0
 80023a2:	f7fe f9eb 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 80023a6:	2164      	movs	r1, #100	; 0x64
 80023a8:	2003      	movs	r0, #3
 80023aa:	f7fe f9e7 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 80023ae:	2164      	movs	r1, #100	; 0x64
 80023b0:	2002      	movs	r0, #2
 80023b2:	f7fe f9e3 	bl	800077c <led_pwm_setvalue>
 80023b6:	e337      	b.n	8002a28 <main+0x2248>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_warm, ten);
 80023b8:	210a      	movs	r1, #10
 80023ba:	2001      	movs	r0, #1
 80023bc:	f7fe f9de 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_white, ten);
 80023c0:	210a      	movs	r1, #10
 80023c2:	2000      	movs	r0, #0
 80023c4:	f7fe f9da 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, ten);
 80023c8:	210a      	movs	r1, #10
 80023ca:	2003      	movs	r0, #3
 80023cc:	f7fe f9d6 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, ten);
 80023d0:	210a      	movs	r1, #10
 80023d2:	2002      	movs	r0, #2
 80023d4:	f7fe f9d2 	bl	800077c <led_pwm_setvalue>
 80023d8:	e326      	b.n	8002a28 <main+0x2248>
                }

                else
                {
                  // color_status = res_max + step_size_color * 5;
                  switch (last_inten_pos)
 80023da:	4b4e      	ldr	r3, [pc, #312]	; (8002514 <main+0x1d34>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b0a      	cmp	r3, #10
 80023e0:	d82c      	bhi.n	800243c <main+0x1c5c>
 80023e2:	009a      	lsls	r2, r3, #2
 80023e4:	4b4d      	ldr	r3, [pc, #308]	; (800251c <main+0x1d3c>)
 80023e6:	18d3      	adds	r3, r2, r3
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	469f      	mov	pc, r3
                  {
                  case 1:
                    curr_pwm = cp1_one;
 80023ec:	4b44      	ldr	r3, [pc, #272]	; (8002500 <main+0x1d20>)
 80023ee:	2243      	movs	r2, #67	; 0x43
 80023f0:	601a      	str	r2, [r3, #0]
                    break;
 80023f2:	e024      	b.n	800243e <main+0x1c5e>
                  case 2:
                    curr_pwm = cp2_one;
 80023f4:	4b42      	ldr	r3, [pc, #264]	; (8002500 <main+0x1d20>)
 80023f6:	2235      	movs	r2, #53	; 0x35
 80023f8:	601a      	str	r2, [r3, #0]
                    break;
 80023fa:	e020      	b.n	800243e <main+0x1c5e>
                  case 3:
                    curr_pwm = cp3_one;
 80023fc:	4b40      	ldr	r3, [pc, #256]	; (8002500 <main+0x1d20>)
 80023fe:	2229      	movs	r2, #41	; 0x29
 8002400:	601a      	str	r2, [r3, #0]
                    break;
 8002402:	e01c      	b.n	800243e <main+0x1c5e>
                  case 4:
                    curr_pwm = cp4_one;
 8002404:	4b3e      	ldr	r3, [pc, #248]	; (8002500 <main+0x1d20>)
 8002406:	221c      	movs	r2, #28
 8002408:	601a      	str	r2, [r3, #0]
                    break;
 800240a:	e018      	b.n	800243e <main+0x1c5e>
                  case 5:
                    curr_pwm = cp5_one;
 800240c:	4b3c      	ldr	r3, [pc, #240]	; (8002500 <main+0x1d20>)
 800240e:	2212      	movs	r2, #18
 8002410:	601a      	str	r2, [r3, #0]
                    break;
 8002412:	e014      	b.n	800243e <main+0x1c5e>
                  case 6:
                    curr_pwm = cp6_one;
 8002414:	4b3a      	ldr	r3, [pc, #232]	; (8002500 <main+0x1d20>)
 8002416:	220c      	movs	r2, #12
 8002418:	601a      	str	r2, [r3, #0]
                    break;
 800241a:	e010      	b.n	800243e <main+0x1c5e>
                  case 7:
                    curr_pwm = cp7_one;
 800241c:	4b38      	ldr	r3, [pc, #224]	; (8002500 <main+0x1d20>)
 800241e:	2209      	movs	r2, #9
 8002420:	601a      	str	r2, [r3, #0]
                    break;
 8002422:	e00c      	b.n	800243e <main+0x1c5e>
                  case 8:
                    curr_pwm = cp8_one;
 8002424:	4b36      	ldr	r3, [pc, #216]	; (8002500 <main+0x1d20>)
 8002426:	2202      	movs	r2, #2
 8002428:	601a      	str	r2, [r3, #0]
                    break;
 800242a:	e008      	b.n	800243e <main+0x1c5e>
                  case 9:
                    curr_pwm = cp9_one;
 800242c:	4b34      	ldr	r3, [pc, #208]	; (8002500 <main+0x1d20>)
 800242e:	2201      	movs	r2, #1
 8002430:	601a      	str	r2, [r3, #0]
                    break;
 8002432:	e004      	b.n	800243e <main+0x1c5e>
                  case 10:
                    curr_pwm = cp10_one;
 8002434:	4b32      	ldr	r3, [pc, #200]	; (8002500 <main+0x1d20>)
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
                    break;
 800243a:	e000      	b.n	800243e <main+0x1c5e>

                  default:
                    break;
 800243c:	46c0      	nop			; (mov r8, r8)
                  }
                  if (endo_status == 1)
 800243e:	4b2f      	ldr	r3, [pc, #188]	; (80024fc <main+0x1d1c>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d112      	bne.n	800246c <main+0x1c8c>
                  {
                    led_pwm_setvalue(inner_white, curr_pwm);
 8002446:	4b2e      	ldr	r3, [pc, #184]	; (8002500 <main+0x1d20>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	0019      	movs	r1, r3
 800244c:	2000      	movs	r0, #0
 800244e:	f7fe f995 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_warm, all_off);
 8002452:	2164      	movs	r1, #100	; 0x64
 8002454:	2001      	movs	r0, #1
 8002456:	f7fe f991 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, all_off);
 800245a:	2164      	movs	r1, #100	; 0x64
 800245c:	2002      	movs	r0, #2
 800245e:	f7fe f98d 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 8002462:	2164      	movs	r1, #100	; 0x64
 8002464:	2003      	movs	r0, #3
 8002466:	f7fe f989 	bl	800077c <led_pwm_setvalue>
 800246a:	e2dd      	b.n	8002a28 <main+0x2248>
                  }
                  else
                  {
                    led_pwm_setvalue(inner_white, curr_pwm);
 800246c:	4b24      	ldr	r3, [pc, #144]	; (8002500 <main+0x1d20>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	0019      	movs	r1, r3
 8002472:	2000      	movs	r0, #0
 8002474:	f7fe f982 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(inner_warm, all_off);
 8002478:	2164      	movs	r1, #100	; 0x64
 800247a:	2001      	movs	r0, #1
 800247c:	f7fe f97e 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_white, curr_pwm);
 8002480:	4b1f      	ldr	r3, [pc, #124]	; (8002500 <main+0x1d20>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	0019      	movs	r1, r3
 8002486:	2002      	movs	r0, #2
 8002488:	f7fe f978 	bl	800077c <led_pwm_setvalue>
                    led_pwm_setvalue(outer_warm, all_off);
 800248c:	2164      	movs	r1, #100	; 0x64
 800248e:	2003      	movs	r0, #3
 8002490:	f7fe f974 	bl	800077c <led_pwm_setvalue>
 8002494:	e2c8      	b.n	8002a28 <main+0x2248>
              }
            }
          }
          else
          {
            color_polarity = _plus;
 8002496:	1dfb      	adds	r3, r7, #7
 8002498:	2201      	movs	r2, #1
 800249a:	701a      	strb	r2, [r3, #0]
            led_pwm_setvalue(inner_white, all_off);
 800249c:	2164      	movs	r1, #100	; 0x64
 800249e:	2000      	movs	r0, #0
 80024a0:	f7fe f96c 	bl	800077c <led_pwm_setvalue>
            led_pwm_setvalue(inner_warm, all_off);
 80024a4:	2164      	movs	r1, #100	; 0x64
 80024a6:	2001      	movs	r0, #1
 80024a8:	f7fe f968 	bl	800077c <led_pwm_setvalue>
            led_pwm_setvalue(outer_warm, all_off);
 80024ac:	2164      	movs	r1, #100	; 0x64
 80024ae:	2003      	movs	r0, #3
 80024b0:	f7fe f964 	bl	800077c <led_pwm_setvalue>
            led_pwm_setvalue(outer_white, all_off);
 80024b4:	2164      	movs	r1, #100	; 0x64
 80024b6:	2002      	movs	r0, #2
 80024b8:	f7fe f960 	bl	800077c <led_pwm_setvalue>
 80024bc:	e2b4      	b.n	8002a28 <main+0x2248>
          }
        }

        else if (Rx_data[1] == 'L') //@L_1#
 80024be:	4b11      	ldr	r3, [pc, #68]	; (8002504 <main+0x1d24>)
 80024c0:	785b      	ldrb	r3, [r3, #1]
 80024c2:	2b4c      	cmp	r3, #76	; 0x4c
 80024c4:	d165      	bne.n	8002592 <main+0x1db2>
        {
          // prgm_status = _lmp;
          if (Rx_data[3] == '0')
 80024c6:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <main+0x1d24>)
 80024c8:	78db      	ldrb	r3, [r3, #3]
 80024ca:	2b30      	cmp	r3, #48	; 0x30
 80024cc:	d12a      	bne.n	8002524 <main+0x1d44>
          {
            lamp_status = 0;
 80024ce:	4b14      	ldr	r3, [pc, #80]	; (8002520 <main+0x1d40>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
            led_pwm_setvalue(inner_warm, all_off);
 80024d4:	2164      	movs	r1, #100	; 0x64
 80024d6:	2001      	movs	r0, #1
 80024d8:	f7fe f950 	bl	800077c <led_pwm_setvalue>
            led_pwm_setvalue(inner_white, all_off);
 80024dc:	2164      	movs	r1, #100	; 0x64
 80024de:	2000      	movs	r0, #0
 80024e0:	f7fe f94c 	bl	800077c <led_pwm_setvalue>
            led_pwm_setvalue(outer_warm, all_off);
 80024e4:	2164      	movs	r1, #100	; 0x64
 80024e6:	2003      	movs	r0, #3
 80024e8:	f7fe f948 	bl	800077c <led_pwm_setvalue>
            led_pwm_setvalue(outer_white, all_off);
 80024ec:	2164      	movs	r1, #100	; 0x64
 80024ee:	2002      	movs	r0, #2
 80024f0:	f7fe f944 	bl	800077c <led_pwm_setvalue>
 80024f4:	e298      	b.n	8002a28 <main+0x2248>
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	20000042 	.word	0x20000042
 80024fc:	20000043 	.word	0x20000043
 8002500:	20000048 	.word	0x20000048
 8002504:	20000168 	.word	0x20000168
 8002508:	20000174 	.word	0x20000174
 800250c:	20000004 	.word	0x20000004
 8002510:	20000040 	.word	0x20000040
 8002514:	2000004c 	.word	0x2000004c
 8002518:	080063ac 	.word	0x080063ac
 800251c:	080063d8 	.word	0x080063d8
 8002520:	20000000 	.word	0x20000000
            // HAL_UART_Transmit(&huart1, "l on", 10, 100);
          }
          else
          {
            lamp_status = 1;
 8002524:	4bd9      	ldr	r3, [pc, #868]	; (800288c <main+0x20ac>)
 8002526:	2201      	movs	r2, #1
 8002528:	701a      	strb	r2, [r3, #0]
            // HAL_UART_Transmit(&huart1, "ps", 10, 100);

            if (depth_status == 0)
 800252a:	4bd9      	ldr	r3, [pc, #868]	; (8002890 <main+0x20b0>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d109      	bne.n	8002546 <main+0x1d66>
            {
              if (endo_status == 0)
 8002532:	4bd8      	ldr	r3, [pc, #864]	; (8002894 <main+0x20b4>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d102      	bne.n	8002540 <main+0x1d60>
              {
                // all prv
                glow_prv();
 800253a:	f7fd febd 	bl	80002b8 <glow_prv>
 800253e:	e273      	b.n	8002a28 <main+0x2248>
              }
              else
              {
                // inner prv
                glow_prv_inner();
 8002540:	f7fd ffd4 	bl	80004ec <glow_prv_inner>
 8002544:	e270      	b.n	8002a28 <main+0x2248>
              }
            }
            else
            {
              if (endo_status == 0)
 8002546:	4bd3      	ldr	r3, [pc, #844]	; (8002894 <main+0x20b4>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d110      	bne.n	8002570 <main+0x1d90>
              {
                // all on max
                led_pwm_setvalue(inner_warm, all_on);
 800254e:	2100      	movs	r1, #0
 8002550:	2001      	movs	r0, #1
 8002552:	f7fe f913 	bl	800077c <led_pwm_setvalue>
                led_pwm_setvalue(inner_white, all_on);
 8002556:	2100      	movs	r1, #0
 8002558:	2000      	movs	r0, #0
 800255a:	f7fe f90f 	bl	800077c <led_pwm_setvalue>
                led_pwm_setvalue(outer_warm, all_on);
 800255e:	2100      	movs	r1, #0
 8002560:	2003      	movs	r0, #3
 8002562:	f7fe f90b 	bl	800077c <led_pwm_setvalue>
                led_pwm_setvalue(outer_white, all_on);
 8002566:	2100      	movs	r1, #0
 8002568:	2002      	movs	r0, #2
 800256a:	f7fe f907 	bl	800077c <led_pwm_setvalue>
 800256e:	e25b      	b.n	8002a28 <main+0x2248>
              }
              else
              {
                // inner on max
                led_pwm_setvalue(inner_warm, all_on);
 8002570:	2100      	movs	r1, #0
 8002572:	2001      	movs	r0, #1
 8002574:	f7fe f902 	bl	800077c <led_pwm_setvalue>
                led_pwm_setvalue(inner_white, all_on);
 8002578:	2100      	movs	r1, #0
 800257a:	2000      	movs	r0, #0
 800257c:	f7fe f8fe 	bl	800077c <led_pwm_setvalue>
                led_pwm_setvalue(outer_warm, all_off);
 8002580:	2164      	movs	r1, #100	; 0x64
 8002582:	2003      	movs	r0, #3
 8002584:	f7fe f8fa 	bl	800077c <led_pwm_setvalue>
                led_pwm_setvalue(outer_white, all_off);
 8002588:	2164      	movs	r1, #100	; 0x64
 800258a:	2002      	movs	r0, #2
 800258c:	f7fe f8f6 	bl	800077c <led_pwm_setvalue>
 8002590:	e24a      	b.n	8002a28 <main+0x2248>
            //   break;
            // }
          }
        }

        else if (Rx_data[1] == 'E') // && (lamp_status == 1)
 8002592:	4bc1      	ldr	r3, [pc, #772]	; (8002898 <main+0x20b8>)
 8002594:	785b      	ldrb	r3, [r3, #1]
 8002596:	2b45      	cmp	r3, #69	; 0x45
 8002598:	d000      	beq.n	800259c <main+0x1dbc>
 800259a:	e11a      	b.n	80027d2 <main+0x1ff2>
        {
          prgm_status = _end;
 800259c:	4bbf      	ldr	r3, [pc, #764]	; (800289c <main+0x20bc>)
 800259e:	2203      	movs	r2, #3
 80025a0:	601a      	str	r2, [r3, #0]

          if (Rx_data[3] == '0')
 80025a2:	4bbd      	ldr	r3, [pc, #756]	; (8002898 <main+0x20b8>)
 80025a4:	78db      	ldrb	r3, [r3, #3]
 80025a6:	2b30      	cmp	r3, #48	; 0x30
 80025a8:	d000      	beq.n	80025ac <main+0x1dcc>
 80025aa:	e084      	b.n	80026b6 <main+0x1ed6>
          {
            // endo_status = 1;
            endo_status = 0;
 80025ac:	4bb9      	ldr	r3, [pc, #740]	; (8002894 <main+0x20b4>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]
            // // HAL_UART_Transmit(&huart1, "e0", 10, 100);
            if (depth_status == 0)
 80025b2:	4bb7      	ldr	r3, [pc, #732]	; (8002890 <main+0x20b0>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d16c      	bne.n	8002694 <main+0x1eb4>
            {
              if (lamp_status == 1)
 80025ba:	4bb4      	ldr	r3, [pc, #720]	; (800288c <main+0x20ac>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d157      	bne.n	8002672 <main+0x1e92>
              {
                // glow_prv();

                if (color_polarity == _zero)
 80025c2:	1dfb      	adds	r3, r7, #7
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d11c      	bne.n	8002604 <main+0x1e24>
                {
                  // prgm_status = _clr; alll prv based on intensity
                  led_pwm_setvalue(inner_warm, last_status);
 80025ca:	4bb5      	ldr	r3, [pc, #724]	; (80028a0 <main+0x20c0>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	b25b      	sxtb	r3, r3
 80025d0:	0019      	movs	r1, r3
 80025d2:	2001      	movs	r0, #1
 80025d4:	f7fe f8d2 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(inner_white, last_status);
 80025d8:	4bb1      	ldr	r3, [pc, #708]	; (80028a0 <main+0x20c0>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	b25b      	sxtb	r3, r3
 80025de:	0019      	movs	r1, r3
 80025e0:	2000      	movs	r0, #0
 80025e2:	f7fe f8cb 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_warm, last_status);
 80025e6:	4bae      	ldr	r3, [pc, #696]	; (80028a0 <main+0x20c0>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	b25b      	sxtb	r3, r3
 80025ec:	0019      	movs	r1, r3
 80025ee:	2003      	movs	r0, #3
 80025f0:	f7fe f8c4 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_white, last_status);
 80025f4:	4baa      	ldr	r3, [pc, #680]	; (80028a0 <main+0x20c0>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	b25b      	sxtb	r3, r3
 80025fa:	0019      	movs	r1, r3
 80025fc:	2002      	movs	r0, #2
 80025fe:	f7fe f8bd 	bl	800077c <led_pwm_setvalue>
 8002602:	e211      	b.n	8002a28 <main+0x2248>
                }
                else if (color_polarity == _plus)
 8002604:	1dfb      	adds	r3, r7, #7
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d116      	bne.n	800263a <main+0x1e5a>
                {
                  // prgm_status = _inten; only white
                  led_pwm_setvalue(inner_warm, all_off);
 800260c:	2164      	movs	r1, #100	; 0x64
 800260e:	2001      	movs	r0, #1
 8002610:	f7fe f8b4 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(inner_white, last_clr_status);
 8002614:	4ba3      	ldr	r3, [pc, #652]	; (80028a4 <main+0x20c4>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	b25b      	sxtb	r3, r3
 800261a:	0019      	movs	r1, r3
 800261c:	2000      	movs	r0, #0
 800261e:	f7fe f8ad 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_warm, all_off);
 8002622:	2164      	movs	r1, #100	; 0x64
 8002624:	2003      	movs	r0, #3
 8002626:	f7fe f8a9 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_white, last_clr_status);
 800262a:	4b9e      	ldr	r3, [pc, #632]	; (80028a4 <main+0x20c4>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	b25b      	sxtb	r3, r3
 8002630:	0019      	movs	r1, r3
 8002632:	2002      	movs	r0, #2
 8002634:	f7fe f8a2 	bl	800077c <led_pwm_setvalue>
 8002638:	e1f6      	b.n	8002a28 <main+0x2248>
                }
                else if (color_polarity == _minus)
 800263a:	1dfb      	adds	r3, r7, #7
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d000      	beq.n	8002644 <main+0x1e64>
 8002642:	e1f1      	b.n	8002a28 <main+0x2248>
                {
                  led_pwm_setvalue(inner_warm, last_clr_status);
 8002644:	4b97      	ldr	r3, [pc, #604]	; (80028a4 <main+0x20c4>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	b25b      	sxtb	r3, r3
 800264a:	0019      	movs	r1, r3
 800264c:	2001      	movs	r0, #1
 800264e:	f7fe f895 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(inner_white, all_off);
 8002652:	2164      	movs	r1, #100	; 0x64
 8002654:	2000      	movs	r0, #0
 8002656:	f7fe f891 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_warm, last_clr_status);
 800265a:	4b92      	ldr	r3, [pc, #584]	; (80028a4 <main+0x20c4>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	b25b      	sxtb	r3, r3
 8002660:	0019      	movs	r1, r3
 8002662:	2003      	movs	r0, #3
 8002664:	f7fe f88a 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_white, all_off);
 8002668:	2164      	movs	r1, #100	; 0x64
 800266a:	2002      	movs	r0, #2
 800266c:	f7fe f886 	bl	800077c <led_pwm_setvalue>
 8002670:	e1da      	b.n	8002a28 <main+0x2248>
              }

              else
              {
                // HAL_UART_Transmit(&huart1, "e1", 10, 100);
                led_pwm_setvalue(inner_warm, all_off);
 8002672:	2164      	movs	r1, #100	; 0x64
 8002674:	2001      	movs	r0, #1
 8002676:	f7fe f881 	bl	800077c <led_pwm_setvalue>
                led_pwm_setvalue(inner_white, all_off);
 800267a:	2164      	movs	r1, #100	; 0x64
 800267c:	2000      	movs	r0, #0
 800267e:	f7fe f87d 	bl	800077c <led_pwm_setvalue>
                led_pwm_setvalue(outer_warm, all_off);
 8002682:	2164      	movs	r1, #100	; 0x64
 8002684:	2003      	movs	r0, #3
 8002686:	f7fe f879 	bl	800077c <led_pwm_setvalue>
                led_pwm_setvalue(outer_white, all_off);
 800268a:	2164      	movs	r1, #100	; 0x64
 800268c:	2002      	movs	r0, #2
 800268e:	f7fe f875 	bl	800077c <led_pwm_setvalue>
 8002692:	e1c9      	b.n	8002a28 <main+0x2248>
              }
            }

            else
            {
              led_pwm_setvalue(inner_warm, all_on);
 8002694:	2100      	movs	r1, #0
 8002696:	2001      	movs	r0, #1
 8002698:	f7fe f870 	bl	800077c <led_pwm_setvalue>
              led_pwm_setvalue(inner_white, all_on);
 800269c:	2100      	movs	r1, #0
 800269e:	2000      	movs	r0, #0
 80026a0:	f7fe f86c 	bl	800077c <led_pwm_setvalue>
              led_pwm_setvalue(outer_warm, all_on);
 80026a4:	2100      	movs	r1, #0
 80026a6:	2003      	movs	r0, #3
 80026a8:	f7fe f868 	bl	800077c <led_pwm_setvalue>
              led_pwm_setvalue(outer_white, all_on);
 80026ac:	2100      	movs	r1, #0
 80026ae:	2002      	movs	r0, #2
 80026b0:	f7fe f864 	bl	800077c <led_pwm_setvalue>
 80026b4:	e1b8      	b.n	8002a28 <main+0x2248>
            }
          }
          else // inner only
          {
            endo_status = 1;
 80026b6:	4b77      	ldr	r3, [pc, #476]	; (8002894 <main+0x20b4>)
 80026b8:	2201      	movs	r2, #1
 80026ba:	701a      	strb	r2, [r3, #0]
            if (depth_status == 0)
 80026bc:	4b74      	ldr	r3, [pc, #464]	; (8002890 <main+0x20b0>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d160      	bne.n	8002786 <main+0x1fa6>
            {
              if (lamp_status == 1)
 80026c4:	4b71      	ldr	r3, [pc, #452]	; (800288c <main+0x20ac>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d14b      	bne.n	8002764 <main+0x1f84>
              {
                // glow_prv_inner();
                if (color_polarity == _zero)
 80026cc:	1dfb      	adds	r3, r7, #7
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d116      	bne.n	8002702 <main+0x1f22>
                {
                  // prgm_status = _clr; alll prv based on intensity
                  led_pwm_setvalue(inner_warm, last_status);
 80026d4:	4b72      	ldr	r3, [pc, #456]	; (80028a0 <main+0x20c0>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	b25b      	sxtb	r3, r3
 80026da:	0019      	movs	r1, r3
 80026dc:	2001      	movs	r0, #1
 80026de:	f7fe f84d 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(inner_white, last_status);
 80026e2:	4b6f      	ldr	r3, [pc, #444]	; (80028a0 <main+0x20c0>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	b25b      	sxtb	r3, r3
 80026e8:	0019      	movs	r1, r3
 80026ea:	2000      	movs	r0, #0
 80026ec:	f7fe f846 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_warm, all_off);
 80026f0:	2164      	movs	r1, #100	; 0x64
 80026f2:	2003      	movs	r0, #3
 80026f4:	f7fe f842 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_white, all_off);
 80026f8:	2164      	movs	r1, #100	; 0x64
 80026fa:	2002      	movs	r0, #2
 80026fc:	f7fe f83e 	bl	800077c <led_pwm_setvalue>
 8002700:	e192      	b.n	8002a28 <main+0x2248>
                }
                else if (color_polarity == _plus)
 8002702:	1dfb      	adds	r3, r7, #7
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d113      	bne.n	8002732 <main+0x1f52>
                {
                  // prgm_status = _inten; only white
                  led_pwm_setvalue(inner_warm, all_off);
 800270a:	2164      	movs	r1, #100	; 0x64
 800270c:	2001      	movs	r0, #1
 800270e:	f7fe f835 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(inner_white, last_clr_status);
 8002712:	4b64      	ldr	r3, [pc, #400]	; (80028a4 <main+0x20c4>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	b25b      	sxtb	r3, r3
 8002718:	0019      	movs	r1, r3
 800271a:	2000      	movs	r0, #0
 800271c:	f7fe f82e 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_warm, all_off);
 8002720:	2164      	movs	r1, #100	; 0x64
 8002722:	2003      	movs	r0, #3
 8002724:	f7fe f82a 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_white, all_off);
 8002728:	2164      	movs	r1, #100	; 0x64
 800272a:	2002      	movs	r0, #2
 800272c:	f7fe f826 	bl	800077c <led_pwm_setvalue>
 8002730:	e17a      	b.n	8002a28 <main+0x2248>
                }
                else if (color_polarity == _minus)
 8002732:	1dfb      	adds	r3, r7, #7
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d000      	beq.n	800273c <main+0x1f5c>
 800273a:	e175      	b.n	8002a28 <main+0x2248>
                {
                  led_pwm_setvalue(inner_warm, last_clr_status);
 800273c:	4b59      	ldr	r3, [pc, #356]	; (80028a4 <main+0x20c4>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	b25b      	sxtb	r3, r3
 8002742:	0019      	movs	r1, r3
 8002744:	2001      	movs	r0, #1
 8002746:	f7fe f819 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(inner_white, all_off);
 800274a:	2164      	movs	r1, #100	; 0x64
 800274c:	2000      	movs	r0, #0
 800274e:	f7fe f815 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_warm, all_off);
 8002752:	2164      	movs	r1, #100	; 0x64
 8002754:	2003      	movs	r0, #3
 8002756:	f7fe f811 	bl	800077c <led_pwm_setvalue>
                  led_pwm_setvalue(outer_white, all_off);
 800275a:	2164      	movs	r1, #100	; 0x64
 800275c:	2002      	movs	r0, #2
 800275e:	f7fe f80d 	bl	800077c <led_pwm_setvalue>
 8002762:	e161      	b.n	8002a28 <main+0x2248>
                }
              }
              else
              {
                led_pwm_setvalue(inner_warm, all_off);
 8002764:	2164      	movs	r1, #100	; 0x64
 8002766:	2001      	movs	r0, #1
 8002768:	f7fe f808 	bl	800077c <led_pwm_setvalue>
                led_pwm_setvalue(inner_white, all_off);
 800276c:	2164      	movs	r1, #100	; 0x64
 800276e:	2000      	movs	r0, #0
 8002770:	f7fe f804 	bl	800077c <led_pwm_setvalue>
                led_pwm_setvalue(outer_warm, all_off);
 8002774:	2164      	movs	r1, #100	; 0x64
 8002776:	2003      	movs	r0, #3
 8002778:	f7fe f800 	bl	800077c <led_pwm_setvalue>
                led_pwm_setvalue(outer_white, all_off);
 800277c:	2164      	movs	r1, #100	; 0x64
 800277e:	2002      	movs	r0, #2
 8002780:	f7fd fffc 	bl	800077c <led_pwm_setvalue>
 8002784:	e150      	b.n	8002a28 <main+0x2248>

            else
            {
              // HAL_UART_Transmit(&huart1, "e1", 10, 100);
              // endo_status = 0;
              if (lamp_status == 1)
 8002786:	4b41      	ldr	r3, [pc, #260]	; (800288c <main+0x20ac>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d110      	bne.n	80027b0 <main+0x1fd0>
              {
                led_pwm_setvalue(inner_warm, all_on);
 800278e:	2100      	movs	r1, #0
 8002790:	2001      	movs	r0, #1
 8002792:	f7fd fff3 	bl	800077c <led_pwm_setvalue>
                led_pwm_setvalue(inner_white, all_on);
 8002796:	2100      	movs	r1, #0
 8002798:	2000      	movs	r0, #0
 800279a:	f7fd ffef 	bl	800077c <led_pwm_setvalue>
                led_pwm_setvalue(outer_warm, all_off);
 800279e:	2164      	movs	r1, #100	; 0x64
 80027a0:	2003      	movs	r0, #3
 80027a2:	f7fd ffeb 	bl	800077c <led_pwm_setvalue>
                led_pwm_setvalue(outer_white, all_off);
 80027a6:	2164      	movs	r1, #100	; 0x64
 80027a8:	2002      	movs	r0, #2
 80027aa:	f7fd ffe7 	bl	800077c <led_pwm_setvalue>
 80027ae:	e13b      	b.n	8002a28 <main+0x2248>
              }
              else
              {
                led_pwm_setvalue(inner_warm, all_off);
 80027b0:	2164      	movs	r1, #100	; 0x64
 80027b2:	2001      	movs	r0, #1
 80027b4:	f7fd ffe2 	bl	800077c <led_pwm_setvalue>
                led_pwm_setvalue(inner_white, all_off);
 80027b8:	2164      	movs	r1, #100	; 0x64
 80027ba:	2000      	movs	r0, #0
 80027bc:	f7fd ffde 	bl	800077c <led_pwm_setvalue>
                led_pwm_setvalue(outer_warm, all_off);
 80027c0:	2164      	movs	r1, #100	; 0x64
 80027c2:	2003      	movs	r0, #3
 80027c4:	f7fd ffda 	bl	800077c <led_pwm_setvalue>
                led_pwm_setvalue(outer_white, all_off);
 80027c8:	2164      	movs	r1, #100	; 0x64
 80027ca:	2002      	movs	r0, #2
 80027cc:	f7fd ffd6 	bl	800077c <led_pwm_setvalue>
 80027d0:	e12a      	b.n	8002a28 <main+0x2248>
              }
            }
          }
        }

        else if (Rx_data[1] == 'D') //  && (lamp_status == 1)
 80027d2:	4b31      	ldr	r3, [pc, #196]	; (8002898 <main+0x20b8>)
 80027d4:	785b      	ldrb	r3, [r3, #1]
 80027d6:	2b44      	cmp	r3, #68	; 0x44
 80027d8:	d000      	beq.n	80027dc <main+0x1ffc>
 80027da:	e0a3      	b.n	8002924 <main+0x2144>
        {

          prgm_status = _dep;
 80027dc:	4b2f      	ldr	r3, [pc, #188]	; (800289c <main+0x20bc>)
 80027de:	2204      	movs	r2, #4
 80027e0:	601a      	str	r2, [r3, #0]
          if (Rx_data[3] == '0')
 80027e2:	4b2d      	ldr	r3, [pc, #180]	; (8002898 <main+0x20b8>)
 80027e4:	78db      	ldrb	r3, [r3, #3]
 80027e6:	2b30      	cmp	r3, #48	; 0x30
 80027e8:	d15e      	bne.n	80028a8 <main+0x20c8>
          {

            depth_status = 0;
 80027ea:	4b29      	ldr	r3, [pc, #164]	; (8002890 <main+0x20b0>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]
            if (lamp_status == 1)
 80027f0:	4b26      	ldr	r3, [pc, #152]	; (800288c <main+0x20ac>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d137      	bne.n	8002868 <main+0x2088>
            {
              if (endo_status == 1)
 80027f8:	4b26      	ldr	r3, [pc, #152]	; (8002894 <main+0x20b4>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d116      	bne.n	800282e <main+0x204e>
              {
                led_pwm_setvalue(inner_warm, last_status);
 8002800:	4b27      	ldr	r3, [pc, #156]	; (80028a0 <main+0x20c0>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	b25b      	sxtb	r3, r3
 8002806:	0019      	movs	r1, r3
 8002808:	2001      	movs	r0, #1
 800280a:	f7fd ffb7 	bl	800077c <led_pwm_setvalue>
                led_pwm_setvalue(inner_white, last_status);
 800280e:	4b24      	ldr	r3, [pc, #144]	; (80028a0 <main+0x20c0>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	b25b      	sxtb	r3, r3
 8002814:	0019      	movs	r1, r3
 8002816:	2000      	movs	r0, #0
 8002818:	f7fd ffb0 	bl	800077c <led_pwm_setvalue>
                led_pwm_setvalue(outer_warm, all_off);
 800281c:	2164      	movs	r1, #100	; 0x64
 800281e:	2003      	movs	r0, #3
 8002820:	f7fd ffac 	bl	800077c <led_pwm_setvalue>
                led_pwm_setvalue(outer_white, all_off);
 8002824:	2164      	movs	r1, #100	; 0x64
 8002826:	2002      	movs	r0, #2
 8002828:	f7fd ffa8 	bl	800077c <led_pwm_setvalue>
 800282c:	e0fc      	b.n	8002a28 <main+0x2248>
              }
              else
              {
                led_pwm_setvalue(inner_warm, last_status);
 800282e:	4b1c      	ldr	r3, [pc, #112]	; (80028a0 <main+0x20c0>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	b25b      	sxtb	r3, r3
 8002834:	0019      	movs	r1, r3
 8002836:	2001      	movs	r0, #1
 8002838:	f7fd ffa0 	bl	800077c <led_pwm_setvalue>
                led_pwm_setvalue(inner_white, last_status);
 800283c:	4b18      	ldr	r3, [pc, #96]	; (80028a0 <main+0x20c0>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	b25b      	sxtb	r3, r3
 8002842:	0019      	movs	r1, r3
 8002844:	2000      	movs	r0, #0
 8002846:	f7fd ff99 	bl	800077c <led_pwm_setvalue>
                led_pwm_setvalue(outer_warm, last_status);
 800284a:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <main+0x20c0>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	b25b      	sxtb	r3, r3
 8002850:	0019      	movs	r1, r3
 8002852:	2003      	movs	r0, #3
 8002854:	f7fd ff92 	bl	800077c <led_pwm_setvalue>
                led_pwm_setvalue(outer_white, last_status);
 8002858:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <main+0x20c0>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	b25b      	sxtb	r3, r3
 800285e:	0019      	movs	r1, r3
 8002860:	2002      	movs	r0, #2
 8002862:	f7fd ff8b 	bl	800077c <led_pwm_setvalue>
 8002866:	e0df      	b.n	8002a28 <main+0x2248>
              }
            }
            else
            {
              led_pwm_setvalue(inner_warm, all_off);
 8002868:	2164      	movs	r1, #100	; 0x64
 800286a:	2001      	movs	r0, #1
 800286c:	f7fd ff86 	bl	800077c <led_pwm_setvalue>
              led_pwm_setvalue(inner_white, all_off);
 8002870:	2164      	movs	r1, #100	; 0x64
 8002872:	2000      	movs	r0, #0
 8002874:	f7fd ff82 	bl	800077c <led_pwm_setvalue>
              led_pwm_setvalue(outer_warm, all_off);
 8002878:	2164      	movs	r1, #100	; 0x64
 800287a:	2003      	movs	r0, #3
 800287c:	f7fd ff7e 	bl	800077c <led_pwm_setvalue>
              led_pwm_setvalue(outer_white, all_off);
 8002880:	2164      	movs	r1, #100	; 0x64
 8002882:	2002      	movs	r0, #2
 8002884:	f7fd ff7a 	bl	800077c <led_pwm_setvalue>
 8002888:	e0ce      	b.n	8002a28 <main+0x2248>
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	20000000 	.word	0x20000000
 8002890:	20000042 	.word	0x20000042
 8002894:	20000043 	.word	0x20000043
 8002898:	20000168 	.word	0x20000168
 800289c:	2000003c 	.word	0x2000003c
 80028a0:	20000038 	.word	0x20000038
 80028a4:	20000039 	.word	0x20000039
            }
          }
          else // if (Rx_data[3] == '1' && (lamp_status == 1))
          {
            depth_status = 1;
 80028a8:	4b62      	ldr	r3, [pc, #392]	; (8002a34 <main+0x2254>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	701a      	strb	r2, [r3, #0]
            if (lamp_status == 1)
 80028ae:	4b62      	ldr	r3, [pc, #392]	; (8002a38 <main+0x2258>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d125      	bne.n	8002902 <main+0x2122>
            {
              if (endo_status == 1)
 80028b6:	4b61      	ldr	r3, [pc, #388]	; (8002a3c <main+0x225c>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d110      	bne.n	80028e0 <main+0x2100>
              {
                led_pwm_setvalue(inner_warm, all_on);
 80028be:	2100      	movs	r1, #0
 80028c0:	2001      	movs	r0, #1
 80028c2:	f7fd ff5b 	bl	800077c <led_pwm_setvalue>
                led_pwm_setvalue(inner_white, all_on);
 80028c6:	2100      	movs	r1, #0
 80028c8:	2000      	movs	r0, #0
 80028ca:	f7fd ff57 	bl	800077c <led_pwm_setvalue>
                led_pwm_setvalue(outer_warm, all_off);
 80028ce:	2164      	movs	r1, #100	; 0x64
 80028d0:	2003      	movs	r0, #3
 80028d2:	f7fd ff53 	bl	800077c <led_pwm_setvalue>
                led_pwm_setvalue(outer_white, all_off);
 80028d6:	2164      	movs	r1, #100	; 0x64
 80028d8:	2002      	movs	r0, #2
 80028da:	f7fd ff4f 	bl	800077c <led_pwm_setvalue>
 80028de:	e0a3      	b.n	8002a28 <main+0x2248>
              }
              else
              {
                led_pwm_setvalue(inner_warm, all_on);
 80028e0:	2100      	movs	r1, #0
 80028e2:	2001      	movs	r0, #1
 80028e4:	f7fd ff4a 	bl	800077c <led_pwm_setvalue>
                led_pwm_setvalue(inner_white, all_on);
 80028e8:	2100      	movs	r1, #0
 80028ea:	2000      	movs	r0, #0
 80028ec:	f7fd ff46 	bl	800077c <led_pwm_setvalue>
                led_pwm_setvalue(outer_warm, all_on);
 80028f0:	2100      	movs	r1, #0
 80028f2:	2003      	movs	r0, #3
 80028f4:	f7fd ff42 	bl	800077c <led_pwm_setvalue>
                led_pwm_setvalue(outer_white, all_on);
 80028f8:	2100      	movs	r1, #0
 80028fa:	2002      	movs	r0, #2
 80028fc:	f7fd ff3e 	bl	800077c <led_pwm_setvalue>
 8002900:	e092      	b.n	8002a28 <main+0x2248>
              }
            }
            else
            {
              led_pwm_setvalue(inner_warm, all_off);
 8002902:	2164      	movs	r1, #100	; 0x64
 8002904:	2001      	movs	r0, #1
 8002906:	f7fd ff39 	bl	800077c <led_pwm_setvalue>
              led_pwm_setvalue(inner_white, all_off);
 800290a:	2164      	movs	r1, #100	; 0x64
 800290c:	2000      	movs	r0, #0
 800290e:	f7fd ff35 	bl	800077c <led_pwm_setvalue>
              led_pwm_setvalue(outer_warm, all_off);
 8002912:	2164      	movs	r1, #100	; 0x64
 8002914:	2003      	movs	r0, #3
 8002916:	f7fd ff31 	bl	800077c <led_pwm_setvalue>
              led_pwm_setvalue(outer_white, all_off);
 800291a:	2164      	movs	r1, #100	; 0x64
 800291c:	2002      	movs	r0, #2
 800291e:	f7fd ff2d 	bl	800077c <led_pwm_setvalue>
 8002922:	e081      	b.n	8002a28 <main+0x2248>
            }
          }
        }

        else if (Rx_data[1] == 'F')
 8002924:	4b46      	ldr	r3, [pc, #280]	; (8002a40 <main+0x2260>)
 8002926:	785b      	ldrb	r3, [r3, #1]
 8002928:	2b46      	cmp	r3, #70	; 0x46
 800292a:	d000      	beq.n	800292e <main+0x214e>
 800292c:	e07c      	b.n	8002a28 <main+0x2248>
        {
          if (Rx_data[3] == '1')
 800292e:	4b44      	ldr	r3, [pc, #272]	; (8002a40 <main+0x2260>)
 8002930:	78db      	ldrb	r3, [r3, #3]
 8002932:	2b31      	cmp	r3, #49	; 0x31
 8002934:	d124      	bne.n	8002980 <main+0x21a0>
          {
            if (lamp_status == 1)
 8002936:	4b40      	ldr	r3, [pc, #256]	; (8002a38 <main+0x2258>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d110      	bne.n	8002960 <main+0x2180>
            {
              led_pwm_setvalue(inner_warm, 100 - 15);
 800293e:	2155      	movs	r1, #85	; 0x55
 8002940:	2001      	movs	r0, #1
 8002942:	f7fd ff1b 	bl	800077c <led_pwm_setvalue>
              led_pwm_setvalue(inner_white, 100 - 15);
 8002946:	2155      	movs	r1, #85	; 0x55
 8002948:	2000      	movs	r0, #0
 800294a:	f7fd ff17 	bl	800077c <led_pwm_setvalue>
              led_pwm_setvalue(outer_warm, 100 - 15);
 800294e:	2155      	movs	r1, #85	; 0x55
 8002950:	2003      	movs	r0, #3
 8002952:	f7fd ff13 	bl	800077c <led_pwm_setvalue>
              led_pwm_setvalue(outer_white, 100 - 15);
 8002956:	2155      	movs	r1, #85	; 0x55
 8002958:	2002      	movs	r0, #2
 800295a:	f7fd ff0f 	bl	800077c <led_pwm_setvalue>
 800295e:	e00f      	b.n	8002980 <main+0x21a0>
            }
            else
            {
              led_pwm_setvalue(inner_warm, all_off);
 8002960:	2164      	movs	r1, #100	; 0x64
 8002962:	2001      	movs	r0, #1
 8002964:	f7fd ff0a 	bl	800077c <led_pwm_setvalue>
              led_pwm_setvalue(inner_white, all_off);
 8002968:	2164      	movs	r1, #100	; 0x64
 800296a:	2000      	movs	r0, #0
 800296c:	f7fd ff06 	bl	800077c <led_pwm_setvalue>
              led_pwm_setvalue(outer_warm, all_off);
 8002970:	2164      	movs	r1, #100	; 0x64
 8002972:	2003      	movs	r0, #3
 8002974:	f7fd ff02 	bl	800077c <led_pwm_setvalue>
              led_pwm_setvalue(outer_white, all_off);
 8002978:	2164      	movs	r1, #100	; 0x64
 800297a:	2002      	movs	r0, #2
 800297c:	f7fd fefe 	bl	800077c <led_pwm_setvalue>
            }
          }
          if (Rx_data[3] == '2')
 8002980:	4b2f      	ldr	r3, [pc, #188]	; (8002a40 <main+0x2260>)
 8002982:	78db      	ldrb	r3, [r3, #3]
 8002984:	2b32      	cmp	r3, #50	; 0x32
 8002986:	d124      	bne.n	80029d2 <main+0x21f2>
          {
            if (lamp_status == 1)
 8002988:	4b2b      	ldr	r3, [pc, #172]	; (8002a38 <main+0x2258>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d110      	bne.n	80029b2 <main+0x21d2>
            {
              led_pwm_setvalue(inner_warm, 100 - 50);
 8002990:	2132      	movs	r1, #50	; 0x32
 8002992:	2001      	movs	r0, #1
 8002994:	f7fd fef2 	bl	800077c <led_pwm_setvalue>
              led_pwm_setvalue(inner_white, 100 - 50);
 8002998:	2132      	movs	r1, #50	; 0x32
 800299a:	2000      	movs	r0, #0
 800299c:	f7fd feee 	bl	800077c <led_pwm_setvalue>
              led_pwm_setvalue(outer_warm, 100 - 50);
 80029a0:	2132      	movs	r1, #50	; 0x32
 80029a2:	2003      	movs	r0, #3
 80029a4:	f7fd feea 	bl	800077c <led_pwm_setvalue>
              led_pwm_setvalue(outer_white, 100 - 50);
 80029a8:	2132      	movs	r1, #50	; 0x32
 80029aa:	2002      	movs	r0, #2
 80029ac:	f7fd fee6 	bl	800077c <led_pwm_setvalue>
 80029b0:	e00f      	b.n	80029d2 <main+0x21f2>
            }
            else
            {
              led_pwm_setvalue(inner_warm, all_off);
 80029b2:	2164      	movs	r1, #100	; 0x64
 80029b4:	2001      	movs	r0, #1
 80029b6:	f7fd fee1 	bl	800077c <led_pwm_setvalue>
              led_pwm_setvalue(inner_white, all_off);
 80029ba:	2164      	movs	r1, #100	; 0x64
 80029bc:	2000      	movs	r0, #0
 80029be:	f7fd fedd 	bl	800077c <led_pwm_setvalue>
              led_pwm_setvalue(outer_warm, all_off);
 80029c2:	2164      	movs	r1, #100	; 0x64
 80029c4:	2003      	movs	r0, #3
 80029c6:	f7fd fed9 	bl	800077c <led_pwm_setvalue>
              led_pwm_setvalue(outer_white, all_off);
 80029ca:	2164      	movs	r1, #100	; 0x64
 80029cc:	2002      	movs	r0, #2
 80029ce:	f7fd fed5 	bl	800077c <led_pwm_setvalue>
            }
          }
          if (Rx_data[3] == '3')
 80029d2:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <main+0x2260>)
 80029d4:	78db      	ldrb	r3, [r3, #3]
 80029d6:	2b33      	cmp	r3, #51	; 0x33
 80029d8:	d126      	bne.n	8002a28 <main+0x2248>
          {
            if (lamp_status == 1)
 80029da:	4b17      	ldr	r3, [pc, #92]	; (8002a38 <main+0x2258>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d110      	bne.n	8002a04 <main+0x2224>
            {
              led_pwm_setvalue(inner_warm, all_on);
 80029e2:	2100      	movs	r1, #0
 80029e4:	2001      	movs	r0, #1
 80029e6:	f7fd fec9 	bl	800077c <led_pwm_setvalue>
              led_pwm_setvalue(inner_white, all_on);
 80029ea:	2100      	movs	r1, #0
 80029ec:	2000      	movs	r0, #0
 80029ee:	f7fd fec5 	bl	800077c <led_pwm_setvalue>
              led_pwm_setvalue(outer_warm, all_on);
 80029f2:	2100      	movs	r1, #0
 80029f4:	2003      	movs	r0, #3
 80029f6:	f7fd fec1 	bl	800077c <led_pwm_setvalue>
              led_pwm_setvalue(outer_white, all_on);
 80029fa:	2100      	movs	r1, #0
 80029fc:	2002      	movs	r0, #2
 80029fe:	f7fd febd 	bl	800077c <led_pwm_setvalue>
 8002a02:	e011      	b.n	8002a28 <main+0x2248>
            }
            else
            {
              led_pwm_setvalue(inner_warm, all_off);
 8002a04:	2164      	movs	r1, #100	; 0x64
 8002a06:	2001      	movs	r0, #1
 8002a08:	f7fd feb8 	bl	800077c <led_pwm_setvalue>
              led_pwm_setvalue(inner_white, all_off);
 8002a0c:	2164      	movs	r1, #100	; 0x64
 8002a0e:	2000      	movs	r0, #0
 8002a10:	f7fd feb4 	bl	800077c <led_pwm_setvalue>
              led_pwm_setvalue(outer_warm, all_off);
 8002a14:	2164      	movs	r1, #100	; 0x64
 8002a16:	2003      	movs	r0, #3
 8002a18:	f7fd feb0 	bl	800077c <led_pwm_setvalue>
              led_pwm_setvalue(outer_white, all_off);
 8002a1c:	2164      	movs	r1, #100	; 0x64
 8002a1e:	2002      	movs	r0, #2
 8002a20:	f7fd feac 	bl	800077c <led_pwm_setvalue>
 8002a24:	e000      	b.n	8002a28 <main+0x2248>
              break;
 8002a26:	46c0      	nop			; (mov r8, r8)
          }
        }
      }
    }
    //	      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
    HAL_Delay(100);
 8002a28:	2064      	movs	r0, #100	; 0x64
 8002a2a:	f000 fbeb 	bl	8003204 <HAL_Delay>
  {
 8002a2e:	f7fd ff42 	bl	80008b6 <main+0xd6>
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	20000042 	.word	0x20000042
 8002a38:	20000000 	.word	0x20000000
 8002a3c:	20000043 	.word	0x20000043
 8002a40:	20000168 	.word	0x20000168

08002a44 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002a44:	b590      	push	{r4, r7, lr}
 8002a46:	b095      	sub	sp, #84	; 0x54
 8002a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a4a:	2420      	movs	r4, #32
 8002a4c:	193b      	adds	r3, r7, r4
 8002a4e:	0018      	movs	r0, r3
 8002a50:	2330      	movs	r3, #48	; 0x30
 8002a52:	001a      	movs	r2, r3
 8002a54:	2100      	movs	r1, #0
 8002a56:	f003 fbd1 	bl	80061fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a5a:	2310      	movs	r3, #16
 8002a5c:	18fb      	adds	r3, r7, r3
 8002a5e:	0018      	movs	r0, r3
 8002a60:	2310      	movs	r3, #16
 8002a62:	001a      	movs	r2, r3
 8002a64:	2100      	movs	r1, #0
 8002a66:	f003 fbc9 	bl	80061fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a6a:	003b      	movs	r3, r7
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	2310      	movs	r3, #16
 8002a70:	001a      	movs	r2, r3
 8002a72:	2100      	movs	r1, #0
 8002a74:	f003 fbc2 	bl	80061fc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a78:	0021      	movs	r1, r4
 8002a7a:	187b      	adds	r3, r7, r1
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a80:	187b      	adds	r3, r7, r1
 8002a82:	2201      	movs	r2, #1
 8002a84:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a86:	187b      	adds	r3, r7, r1
 8002a88:	2210      	movs	r2, #16
 8002a8a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a8c:	187b      	adds	r3, r7, r1
 8002a8e:	2202      	movs	r2, #2
 8002a90:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a92:	187b      	adds	r3, r7, r1
 8002a94:	2200      	movs	r2, #0
 8002a96:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002a98:	187b      	adds	r3, r7, r1
 8002a9a:	22a0      	movs	r2, #160	; 0xa0
 8002a9c:	0392      	lsls	r2, r2, #14
 8002a9e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002aa0:	187b      	adds	r3, r7, r1
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aa6:	187b      	adds	r3, r7, r1
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f000 fe9b 	bl	80037e4 <HAL_RCC_OscConfig>
 8002aae:	1e03      	subs	r3, r0, #0
 8002ab0:	d001      	beq.n	8002ab6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002ab2:	f000 f997 	bl	8002de4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8002ab6:	2110      	movs	r1, #16
 8002ab8:	187b      	adds	r3, r7, r1
 8002aba:	2207      	movs	r2, #7
 8002abc:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002abe:	187b      	adds	r3, r7, r1
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ac4:	187b      	adds	r3, r7, r1
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002aca:	187b      	adds	r3, r7, r1
 8002acc:	2200      	movs	r2, #0
 8002ace:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002ad0:	187b      	adds	r3, r7, r1
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f001 f99f 	bl	8003e18 <HAL_RCC_ClockConfig>
 8002ada:	1e03      	subs	r3, r0, #0
 8002adc:	d001      	beq.n	8002ae2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002ade:	f000 f981 	bl	8002de4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ae2:	003b      	movs	r3, r7
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002ae8:	003b      	movs	r3, r7
 8002aea:	2200      	movs	r2, #0
 8002aec:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002aee:	003b      	movs	r3, r7
 8002af0:	0018      	movs	r0, r3
 8002af2:	f001 fad5 	bl	80040a0 <HAL_RCCEx_PeriphCLKConfig>
 8002af6:	1e03      	subs	r3, r0, #0
 8002af8:	d001      	beq.n	8002afe <SystemClock_Config+0xba>
  {
    Error_Handler();
 8002afa:	f000 f973 	bl	8002de4 <Error_Handler>
  }
}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	46bd      	mov	sp, r7
 8002b02:	b015      	add	sp, #84	; 0x54
 8002b04:	bd90      	pop	{r4, r7, pc}
	...

08002b08 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b092      	sub	sp, #72	; 0x48
 8002b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b0e:	2340      	movs	r3, #64	; 0x40
 8002b10:	18fb      	adds	r3, r7, r3
 8002b12:	0018      	movs	r0, r3
 8002b14:	2308      	movs	r3, #8
 8002b16:	001a      	movs	r2, r3
 8002b18:	2100      	movs	r1, #0
 8002b1a:	f003 fb6f 	bl	80061fc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b1e:	2324      	movs	r3, #36	; 0x24
 8002b20:	18fb      	adds	r3, r7, r3
 8002b22:	0018      	movs	r0, r3
 8002b24:	231c      	movs	r3, #28
 8002b26:	001a      	movs	r2, r3
 8002b28:	2100      	movs	r1, #0
 8002b2a:	f003 fb67 	bl	80061fc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b2e:	1d3b      	adds	r3, r7, #4
 8002b30:	0018      	movs	r0, r3
 8002b32:	2320      	movs	r3, #32
 8002b34:	001a      	movs	r2, r3
 8002b36:	2100      	movs	r1, #0
 8002b38:	f003 fb60 	bl	80061fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b3c:	4b40      	ldr	r3, [pc, #256]	; (8002c40 <MX_TIM1_Init+0x138>)
 8002b3e:	4a41      	ldr	r2, [pc, #260]	; (8002c44 <MX_TIM1_Init+0x13c>)
 8002b40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48 - 1;
 8002b42:	4b3f      	ldr	r3, [pc, #252]	; (8002c40 <MX_TIM1_Init+0x138>)
 8002b44:	222f      	movs	r2, #47	; 0x2f
 8002b46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b48:	4b3d      	ldr	r3, [pc, #244]	; (8002c40 <MX_TIM1_Init+0x138>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100 - 1;
 8002b4e:	4b3c      	ldr	r3, [pc, #240]	; (8002c40 <MX_TIM1_Init+0x138>)
 8002b50:	2263      	movs	r2, #99	; 0x63
 8002b52:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b54:	4b3a      	ldr	r3, [pc, #232]	; (8002c40 <MX_TIM1_Init+0x138>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b5a:	4b39      	ldr	r3, [pc, #228]	; (8002c40 <MX_TIM1_Init+0x138>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b60:	4b37      	ldr	r3, [pc, #220]	; (8002c40 <MX_TIM1_Init+0x138>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002b66:	4b36      	ldr	r3, [pc, #216]	; (8002c40 <MX_TIM1_Init+0x138>)
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f001 fb67 	bl	800423c <HAL_TIM_PWM_Init>
 8002b6e:	1e03      	subs	r3, r0, #0
 8002b70:	d001      	beq.n	8002b76 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002b72:	f000 f937 	bl	8002de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b76:	2140      	movs	r1, #64	; 0x40
 8002b78:	187b      	adds	r3, r7, r1
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b7e:	187b      	adds	r3, r7, r1
 8002b80:	2200      	movs	r2, #0
 8002b82:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b84:	187a      	adds	r2, r7, r1
 8002b86:	4b2e      	ldr	r3, [pc, #184]	; (8002c40 <MX_TIM1_Init+0x138>)
 8002b88:	0011      	movs	r1, r2
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f002 f8c0 	bl	8004d10 <HAL_TIMEx_MasterConfigSynchronization>
 8002b90:	1e03      	subs	r3, r0, #0
 8002b92:	d001      	beq.n	8002b98 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002b94:	f000 f926 	bl	8002de4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b98:	2124      	movs	r1, #36	; 0x24
 8002b9a:	187b      	adds	r3, r7, r1
 8002b9c:	2260      	movs	r2, #96	; 0x60
 8002b9e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002ba0:	187b      	adds	r3, r7, r1
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ba6:	187b      	adds	r3, r7, r1
 8002ba8:	2200      	movs	r2, #0
 8002baa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bac:	187b      	adds	r3, r7, r1
 8002bae:	2200      	movs	r2, #0
 8002bb0:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bb2:	187b      	adds	r3, r7, r1
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002bb8:	187b      	adds	r3, r7, r1
 8002bba:	2200      	movs	r2, #0
 8002bbc:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002bbe:	187b      	adds	r3, r7, r1
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002bc4:	1879      	adds	r1, r7, r1
 8002bc6:	4b1e      	ldr	r3, [pc, #120]	; (8002c40 <MX_TIM1_Init+0x138>)
 8002bc8:	2208      	movs	r2, #8
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f001 fd42 	bl	8004654 <HAL_TIM_PWM_ConfigChannel>
 8002bd0:	1e03      	subs	r3, r0, #0
 8002bd2:	d001      	beq.n	8002bd8 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8002bd4:	f000 f906 	bl	8002de4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002bd8:	2324      	movs	r3, #36	; 0x24
 8002bda:	18f9      	adds	r1, r7, r3
 8002bdc:	4b18      	ldr	r3, [pc, #96]	; (8002c40 <MX_TIM1_Init+0x138>)
 8002bde:	220c      	movs	r2, #12
 8002be0:	0018      	movs	r0, r3
 8002be2:	f001 fd37 	bl	8004654 <HAL_TIM_PWM_ConfigChannel>
 8002be6:	1e03      	subs	r3, r0, #0
 8002be8:	d001      	beq.n	8002bee <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 8002bea:	f000 f8fb 	bl	8002de4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002bee:	1d3b      	adds	r3, r7, #4
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002bf4:	1d3b      	adds	r3, r7, #4
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002bfa:	1d3b      	adds	r3, r7, #4
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c00:	1d3b      	adds	r3, r7, #4
 8002c02:	2200      	movs	r2, #0
 8002c04:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c06:	1d3b      	adds	r3, r7, #4
 8002c08:	2200      	movs	r2, #0
 8002c0a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c0c:	1d3b      	adds	r3, r7, #4
 8002c0e:	2280      	movs	r2, #128	; 0x80
 8002c10:	0192      	lsls	r2, r2, #6
 8002c12:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c14:	1d3b      	adds	r3, r7, #4
 8002c16:	2200      	movs	r2, #0
 8002c18:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c1a:	1d3a      	adds	r2, r7, #4
 8002c1c:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <MX_TIM1_Init+0x138>)
 8002c1e:	0011      	movs	r1, r2
 8002c20:	0018      	movs	r0, r3
 8002c22:	f002 f8c7 	bl	8004db4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c26:	1e03      	subs	r3, r0, #0
 8002c28:	d001      	beq.n	8002c2e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8002c2a:	f000 f8db 	bl	8002de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002c2e:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <MX_TIM1_Init+0x138>)
 8002c30:	0018      	movs	r0, r3
 8002c32:	f000 f93d 	bl	8002eb0 <HAL_TIM_MspPostInit>
}
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	b012      	add	sp, #72	; 0x48
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	20000050 	.word	0x20000050
 8002c44:	40012c00 	.word	0x40012c00

08002c48 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08a      	sub	sp, #40	; 0x28
 8002c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c4e:	2320      	movs	r3, #32
 8002c50:	18fb      	adds	r3, r7, r3
 8002c52:	0018      	movs	r0, r3
 8002c54:	2308      	movs	r3, #8
 8002c56:	001a      	movs	r2, r3
 8002c58:	2100      	movs	r1, #0
 8002c5a:	f003 facf 	bl	80061fc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c5e:	1d3b      	adds	r3, r7, #4
 8002c60:	0018      	movs	r0, r3
 8002c62:	231c      	movs	r3, #28
 8002c64:	001a      	movs	r2, r3
 8002c66:	2100      	movs	r1, #0
 8002c68:	f003 fac8 	bl	80061fc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c6c:	4b29      	ldr	r3, [pc, #164]	; (8002d14 <MX_TIM3_Init+0xcc>)
 8002c6e:	4a2a      	ldr	r2, [pc, #168]	; (8002d18 <MX_TIM3_Init+0xd0>)
 8002c70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48 - 1;
 8002c72:	4b28      	ldr	r3, [pc, #160]	; (8002d14 <MX_TIM3_Init+0xcc>)
 8002c74:	222f      	movs	r2, #47	; 0x2f
 8002c76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c78:	4b26      	ldr	r3, [pc, #152]	; (8002d14 <MX_TIM3_Init+0xcc>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100 - 1;
 8002c7e:	4b25      	ldr	r3, [pc, #148]	; (8002d14 <MX_TIM3_Init+0xcc>)
 8002c80:	2263      	movs	r2, #99	; 0x63
 8002c82:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c84:	4b23      	ldr	r3, [pc, #140]	; (8002d14 <MX_TIM3_Init+0xcc>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c8a:	4b22      	ldr	r3, [pc, #136]	; (8002d14 <MX_TIM3_Init+0xcc>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002c90:	4b20      	ldr	r3, [pc, #128]	; (8002d14 <MX_TIM3_Init+0xcc>)
 8002c92:	0018      	movs	r0, r3
 8002c94:	f001 fad2 	bl	800423c <HAL_TIM_PWM_Init>
 8002c98:	1e03      	subs	r3, r0, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002c9c:	f000 f8a2 	bl	8002de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ca0:	2120      	movs	r1, #32
 8002ca2:	187b      	adds	r3, r7, r1
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ca8:	187b      	adds	r3, r7, r1
 8002caa:	2200      	movs	r2, #0
 8002cac:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002cae:	187a      	adds	r2, r7, r1
 8002cb0:	4b18      	ldr	r3, [pc, #96]	; (8002d14 <MX_TIM3_Init+0xcc>)
 8002cb2:	0011      	movs	r1, r2
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f002 f82b 	bl	8004d10 <HAL_TIMEx_MasterConfigSynchronization>
 8002cba:	1e03      	subs	r3, r0, #0
 8002cbc:	d001      	beq.n	8002cc2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002cbe:	f000 f891 	bl	8002de4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cc2:	1d3b      	adds	r3, r7, #4
 8002cc4:	2260      	movs	r2, #96	; 0x60
 8002cc6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002cc8:	1d3b      	adds	r3, r7, #4
 8002cca:	2200      	movs	r2, #0
 8002ccc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cce:	1d3b      	adds	r3, r7, #4
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cd4:	1d3b      	adds	r3, r7, #4
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cda:	1d39      	adds	r1, r7, #4
 8002cdc:	4b0d      	ldr	r3, [pc, #52]	; (8002d14 <MX_TIM3_Init+0xcc>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f001 fcb7 	bl	8004654 <HAL_TIM_PWM_ConfigChannel>
 8002ce6:	1e03      	subs	r3, r0, #0
 8002ce8:	d001      	beq.n	8002cee <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8002cea:	f000 f87b 	bl	8002de4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002cee:	1d39      	adds	r1, r7, #4
 8002cf0:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <MX_TIM3_Init+0xcc>)
 8002cf2:	220c      	movs	r2, #12
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f001 fcad 	bl	8004654 <HAL_TIM_PWM_ConfigChannel>
 8002cfa:	1e03      	subs	r3, r0, #0
 8002cfc:	d001      	beq.n	8002d02 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8002cfe:	f000 f871 	bl	8002de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002d02:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <MX_TIM3_Init+0xcc>)
 8002d04:	0018      	movs	r0, r3
 8002d06:	f000 f8d3 	bl	8002eb0 <HAL_TIM_MspPostInit>
}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b00a      	add	sp, #40	; 0x28
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	20000098 	.word	0x20000098
 8002d18:	40000400 	.word	0x40000400

08002d1c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d20:	4b14      	ldr	r3, [pc, #80]	; (8002d74 <MX_USART1_UART_Init+0x58>)
 8002d22:	4a15      	ldr	r2, [pc, #84]	; (8002d78 <MX_USART1_UART_Init+0x5c>)
 8002d24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002d26:	4b13      	ldr	r3, [pc, #76]	; (8002d74 <MX_USART1_UART_Init+0x58>)
 8002d28:	2296      	movs	r2, #150	; 0x96
 8002d2a:	0192      	lsls	r2, r2, #6
 8002d2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d2e:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <MX_USART1_UART_Init+0x58>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d34:	4b0f      	ldr	r3, [pc, #60]	; (8002d74 <MX_USART1_UART_Init+0x58>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <MX_USART1_UART_Init+0x58>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d40:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <MX_USART1_UART_Init+0x58>)
 8002d42:	220c      	movs	r2, #12
 8002d44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d46:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <MX_USART1_UART_Init+0x58>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d4c:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <MX_USART1_UART_Init+0x58>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d52:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <MX_USART1_UART_Init+0x58>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d58:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <MX_USART1_UART_Init+0x58>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d5e:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <MX_USART1_UART_Init+0x58>)
 8002d60:	0018      	movs	r0, r3
 8002d62:	f002 f895 	bl	8004e90 <HAL_UART_Init>
 8002d66:	1e03      	subs	r3, r0, #0
 8002d68:	d001      	beq.n	8002d6e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002d6a:	f000 f83b 	bl	8002de4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	200000e0 	.word	0x200000e0
 8002d78:	40013800 	.word	0x40013800

08002d7c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d82:	4b17      	ldr	r3, [pc, #92]	; (8002de0 <MX_GPIO_Init+0x64>)
 8002d84:	695a      	ldr	r2, [r3, #20]
 8002d86:	4b16      	ldr	r3, [pc, #88]	; (8002de0 <MX_GPIO_Init+0x64>)
 8002d88:	2180      	movs	r1, #128	; 0x80
 8002d8a:	03c9      	lsls	r1, r1, #15
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	615a      	str	r2, [r3, #20]
 8002d90:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <MX_GPIO_Init+0x64>)
 8002d92:	695a      	ldr	r2, [r3, #20]
 8002d94:	2380      	movs	r3, #128	; 0x80
 8002d96:	03db      	lsls	r3, r3, #15
 8002d98:	4013      	ands	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9e:	4b10      	ldr	r3, [pc, #64]	; (8002de0 <MX_GPIO_Init+0x64>)
 8002da0:	695a      	ldr	r2, [r3, #20]
 8002da2:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <MX_GPIO_Init+0x64>)
 8002da4:	2180      	movs	r1, #128	; 0x80
 8002da6:	0289      	lsls	r1, r1, #10
 8002da8:	430a      	orrs	r2, r1
 8002daa:	615a      	str	r2, [r3, #20]
 8002dac:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <MX_GPIO_Init+0x64>)
 8002dae:	695a      	ldr	r2, [r3, #20]
 8002db0:	2380      	movs	r3, #128	; 0x80
 8002db2:	029b      	lsls	r3, r3, #10
 8002db4:	4013      	ands	r3, r2
 8002db6:	60bb      	str	r3, [r7, #8]
 8002db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dba:	4b09      	ldr	r3, [pc, #36]	; (8002de0 <MX_GPIO_Init+0x64>)
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <MX_GPIO_Init+0x64>)
 8002dc0:	2180      	movs	r1, #128	; 0x80
 8002dc2:	02c9      	lsls	r1, r1, #11
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	615a      	str	r2, [r3, #20]
 8002dc8:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <MX_GPIO_Init+0x64>)
 8002dca:	695a      	ldr	r2, [r3, #20]
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	02db      	lsls	r3, r3, #11
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	607b      	str	r3, [r7, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	b004      	add	sp, #16
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	40021000 	.word	0x40021000

08002de4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002de8:	b672      	cpsid	i
}
 8002dea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dec:	e7fe      	b.n	8002dec <Error_Handler+0x8>
	...

08002df0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002df6:	4b0f      	ldr	r3, [pc, #60]	; (8002e34 <HAL_MspInit+0x44>)
 8002df8:	699a      	ldr	r2, [r3, #24]
 8002dfa:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <HAL_MspInit+0x44>)
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	619a      	str	r2, [r3, #24]
 8002e02:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <HAL_MspInit+0x44>)
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	2201      	movs	r2, #1
 8002e08:	4013      	ands	r3, r2
 8002e0a:	607b      	str	r3, [r7, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e0e:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <HAL_MspInit+0x44>)
 8002e10:	69da      	ldr	r2, [r3, #28]
 8002e12:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <HAL_MspInit+0x44>)
 8002e14:	2180      	movs	r1, #128	; 0x80
 8002e16:	0549      	lsls	r1, r1, #21
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	61da      	str	r2, [r3, #28]
 8002e1c:	4b05      	ldr	r3, [pc, #20]	; (8002e34 <HAL_MspInit+0x44>)
 8002e1e:	69da      	ldr	r2, [r3, #28]
 8002e20:	2380      	movs	r3, #128	; 0x80
 8002e22:	055b      	lsls	r3, r3, #21
 8002e24:	4013      	ands	r3, r2
 8002e26:	603b      	str	r3, [r7, #0]
 8002e28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	b002      	add	sp, #8
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	40021000 	.word	0x40021000

08002e38 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a17      	ldr	r2, [pc, #92]	; (8002ea4 <HAL_TIM_PWM_MspInit+0x6c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d10e      	bne.n	8002e68 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e4a:	4b17      	ldr	r3, [pc, #92]	; (8002ea8 <HAL_TIM_PWM_MspInit+0x70>)
 8002e4c:	699a      	ldr	r2, [r3, #24]
 8002e4e:	4b16      	ldr	r3, [pc, #88]	; (8002ea8 <HAL_TIM_PWM_MspInit+0x70>)
 8002e50:	2180      	movs	r1, #128	; 0x80
 8002e52:	0109      	lsls	r1, r1, #4
 8002e54:	430a      	orrs	r2, r1
 8002e56:	619a      	str	r2, [r3, #24]
 8002e58:	4b13      	ldr	r3, [pc, #76]	; (8002ea8 <HAL_TIM_PWM_MspInit+0x70>)
 8002e5a:	699a      	ldr	r2, [r3, #24]
 8002e5c:	2380      	movs	r3, #128	; 0x80
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	4013      	ands	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002e66:	e018      	b.n	8002e9a <HAL_TIM_PWM_MspInit+0x62>
  else if(htim_pwm->Instance==TIM3)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a0f      	ldr	r2, [pc, #60]	; (8002eac <HAL_TIM_PWM_MspInit+0x74>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d113      	bne.n	8002e9a <HAL_TIM_PWM_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e72:	4b0d      	ldr	r3, [pc, #52]	; (8002ea8 <HAL_TIM_PWM_MspInit+0x70>)
 8002e74:	69da      	ldr	r2, [r3, #28]
 8002e76:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <HAL_TIM_PWM_MspInit+0x70>)
 8002e78:	2102      	movs	r1, #2
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	61da      	str	r2, [r3, #28]
 8002e7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <HAL_TIM_PWM_MspInit+0x70>)
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	2202      	movs	r2, #2
 8002e84:	4013      	ands	r3, r2
 8002e86:	60bb      	str	r3, [r7, #8]
 8002e88:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	2010      	movs	r0, #16
 8002e90:	f000 fa88 	bl	80033a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002e94:	2010      	movs	r0, #16
 8002e96:	f000 fa9a 	bl	80033ce <HAL_NVIC_EnableIRQ>
}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	b004      	add	sp, #16
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	40012c00 	.word	0x40012c00
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	40000400 	.word	0x40000400

08002eb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002eb0:	b590      	push	{r4, r7, lr}
 8002eb2:	b08b      	sub	sp, #44	; 0x2c
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb8:	2414      	movs	r4, #20
 8002eba:	193b      	adds	r3, r7, r4
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	2314      	movs	r3, #20
 8002ec0:	001a      	movs	r2, r3
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	f003 f99a 	bl	80061fc <memset>
  if(htim->Instance==TIM1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a3d      	ldr	r2, [pc, #244]	; (8002fc4 <HAL_TIM_MspPostInit+0x114>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d126      	bne.n	8002f20 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed2:	4b3d      	ldr	r3, [pc, #244]	; (8002fc8 <HAL_TIM_MspPostInit+0x118>)
 8002ed4:	695a      	ldr	r2, [r3, #20]
 8002ed6:	4b3c      	ldr	r3, [pc, #240]	; (8002fc8 <HAL_TIM_MspPostInit+0x118>)
 8002ed8:	2180      	movs	r1, #128	; 0x80
 8002eda:	0289      	lsls	r1, r1, #10
 8002edc:	430a      	orrs	r2, r1
 8002ede:	615a      	str	r2, [r3, #20]
 8002ee0:	4b39      	ldr	r3, [pc, #228]	; (8002fc8 <HAL_TIM_MspPostInit+0x118>)
 8002ee2:	695a      	ldr	r2, [r3, #20]
 8002ee4:	2380      	movs	r3, #128	; 0x80
 8002ee6:	029b      	lsls	r3, r3, #10
 8002ee8:	4013      	ands	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
 8002eec:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002eee:	193b      	adds	r3, r7, r4
 8002ef0:	22c0      	movs	r2, #192	; 0xc0
 8002ef2:	0112      	lsls	r2, r2, #4
 8002ef4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef6:	0021      	movs	r1, r4
 8002ef8:	187b      	adds	r3, r7, r1
 8002efa:	2202      	movs	r2, #2
 8002efc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efe:	187b      	adds	r3, r7, r1
 8002f00:	2200      	movs	r2, #0
 8002f02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f04:	187b      	adds	r3, r7, r1
 8002f06:	2200      	movs	r2, #0
 8002f08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002f0a:	187b      	adds	r3, r7, r1
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f10:	187a      	adds	r2, r7, r1
 8002f12:	2390      	movs	r3, #144	; 0x90
 8002f14:	05db      	lsls	r3, r3, #23
 8002f16:	0011      	movs	r1, r2
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f000 faf3 	bl	8003504 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002f1e:	e04d      	b.n	8002fbc <HAL_TIM_MspPostInit+0x10c>
  else if(htim->Instance==TIM3)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a29      	ldr	r2, [pc, #164]	; (8002fcc <HAL_TIM_MspPostInit+0x11c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d148      	bne.n	8002fbc <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f2a:	4b27      	ldr	r3, [pc, #156]	; (8002fc8 <HAL_TIM_MspPostInit+0x118>)
 8002f2c:	695a      	ldr	r2, [r3, #20]
 8002f2e:	4b26      	ldr	r3, [pc, #152]	; (8002fc8 <HAL_TIM_MspPostInit+0x118>)
 8002f30:	2180      	movs	r1, #128	; 0x80
 8002f32:	0289      	lsls	r1, r1, #10
 8002f34:	430a      	orrs	r2, r1
 8002f36:	615a      	str	r2, [r3, #20]
 8002f38:	4b23      	ldr	r3, [pc, #140]	; (8002fc8 <HAL_TIM_MspPostInit+0x118>)
 8002f3a:	695a      	ldr	r2, [r3, #20]
 8002f3c:	2380      	movs	r3, #128	; 0x80
 8002f3e:	029b      	lsls	r3, r3, #10
 8002f40:	4013      	ands	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f46:	4b20      	ldr	r3, [pc, #128]	; (8002fc8 <HAL_TIM_MspPostInit+0x118>)
 8002f48:	695a      	ldr	r2, [r3, #20]
 8002f4a:	4b1f      	ldr	r3, [pc, #124]	; (8002fc8 <HAL_TIM_MspPostInit+0x118>)
 8002f4c:	2180      	movs	r1, #128	; 0x80
 8002f4e:	02c9      	lsls	r1, r1, #11
 8002f50:	430a      	orrs	r2, r1
 8002f52:	615a      	str	r2, [r3, #20]
 8002f54:	4b1c      	ldr	r3, [pc, #112]	; (8002fc8 <HAL_TIM_MspPostInit+0x118>)
 8002f56:	695a      	ldr	r2, [r3, #20]
 8002f58:	2380      	movs	r3, #128	; 0x80
 8002f5a:	02db      	lsls	r3, r3, #11
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	60bb      	str	r3, [r7, #8]
 8002f60:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f62:	2414      	movs	r4, #20
 8002f64:	193b      	adds	r3, r7, r4
 8002f66:	2240      	movs	r2, #64	; 0x40
 8002f68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6a:	193b      	adds	r3, r7, r4
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	193b      	adds	r3, r7, r4
 8002f72:	2200      	movs	r2, #0
 8002f74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f76:	193b      	adds	r3, r7, r4
 8002f78:	2200      	movs	r2, #0
 8002f7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002f7c:	193b      	adds	r3, r7, r4
 8002f7e:	2201      	movs	r2, #1
 8002f80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f82:	193a      	adds	r2, r7, r4
 8002f84:	2390      	movs	r3, #144	; 0x90
 8002f86:	05db      	lsls	r3, r3, #23
 8002f88:	0011      	movs	r1, r2
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f000 faba 	bl	8003504 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002f90:	0021      	movs	r1, r4
 8002f92:	187b      	adds	r3, r7, r1
 8002f94:	2202      	movs	r2, #2
 8002f96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f98:	187b      	adds	r3, r7, r1
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9e:	187b      	adds	r3, r7, r1
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa4:	187b      	adds	r3, r7, r1
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002faa:	187b      	adds	r3, r7, r1
 8002fac:	2201      	movs	r2, #1
 8002fae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fb0:	187b      	adds	r3, r7, r1
 8002fb2:	4a07      	ldr	r2, [pc, #28]	; (8002fd0 <HAL_TIM_MspPostInit+0x120>)
 8002fb4:	0019      	movs	r1, r3
 8002fb6:	0010      	movs	r0, r2
 8002fb8:	f000 faa4 	bl	8003504 <HAL_GPIO_Init>
}
 8002fbc:	46c0      	nop			; (mov r8, r8)
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	b00b      	add	sp, #44	; 0x2c
 8002fc2:	bd90      	pop	{r4, r7, pc}
 8002fc4:	40012c00 	.word	0x40012c00
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	40000400 	.word	0x40000400
 8002fd0:	48000400 	.word	0x48000400

08002fd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fd4:	b590      	push	{r4, r7, lr}
 8002fd6:	b08b      	sub	sp, #44	; 0x2c
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fdc:	2414      	movs	r4, #20
 8002fde:	193b      	adds	r3, r7, r4
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	2314      	movs	r3, #20
 8002fe4:	001a      	movs	r2, r3
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	f003 f908 	bl	80061fc <memset>
  if(huart->Instance==USART1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a20      	ldr	r2, [pc, #128]	; (8003074 <HAL_UART_MspInit+0xa0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d13a      	bne.n	800306c <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ff6:	4b20      	ldr	r3, [pc, #128]	; (8003078 <HAL_UART_MspInit+0xa4>)
 8002ff8:	699a      	ldr	r2, [r3, #24]
 8002ffa:	4b1f      	ldr	r3, [pc, #124]	; (8003078 <HAL_UART_MspInit+0xa4>)
 8002ffc:	2180      	movs	r1, #128	; 0x80
 8002ffe:	01c9      	lsls	r1, r1, #7
 8003000:	430a      	orrs	r2, r1
 8003002:	619a      	str	r2, [r3, #24]
 8003004:	4b1c      	ldr	r3, [pc, #112]	; (8003078 <HAL_UART_MspInit+0xa4>)
 8003006:	699a      	ldr	r2, [r3, #24]
 8003008:	2380      	movs	r3, #128	; 0x80
 800300a:	01db      	lsls	r3, r3, #7
 800300c:	4013      	ands	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
 8003010:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003012:	4b19      	ldr	r3, [pc, #100]	; (8003078 <HAL_UART_MspInit+0xa4>)
 8003014:	695a      	ldr	r2, [r3, #20]
 8003016:	4b18      	ldr	r3, [pc, #96]	; (8003078 <HAL_UART_MspInit+0xa4>)
 8003018:	2180      	movs	r1, #128	; 0x80
 800301a:	0289      	lsls	r1, r1, #10
 800301c:	430a      	orrs	r2, r1
 800301e:	615a      	str	r2, [r3, #20]
 8003020:	4b15      	ldr	r3, [pc, #84]	; (8003078 <HAL_UART_MspInit+0xa4>)
 8003022:	695a      	ldr	r2, [r3, #20]
 8003024:	2380      	movs	r3, #128	; 0x80
 8003026:	029b      	lsls	r3, r3, #10
 8003028:	4013      	ands	r3, r2
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800302e:	0021      	movs	r1, r4
 8003030:	187b      	adds	r3, r7, r1
 8003032:	220c      	movs	r2, #12
 8003034:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003036:	187b      	adds	r3, r7, r1
 8003038:	2202      	movs	r2, #2
 800303a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303c:	187b      	adds	r3, r7, r1
 800303e:	2200      	movs	r2, #0
 8003040:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003042:	187b      	adds	r3, r7, r1
 8003044:	2203      	movs	r2, #3
 8003046:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003048:	187b      	adds	r3, r7, r1
 800304a:	2201      	movs	r2, #1
 800304c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800304e:	187a      	adds	r2, r7, r1
 8003050:	2390      	movs	r3, #144	; 0x90
 8003052:	05db      	lsls	r3, r3, #23
 8003054:	0011      	movs	r1, r2
 8003056:	0018      	movs	r0, r3
 8003058:	f000 fa54 	bl	8003504 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800305c:	2200      	movs	r2, #0
 800305e:	2100      	movs	r1, #0
 8003060:	201b      	movs	r0, #27
 8003062:	f000 f99f 	bl	80033a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003066:	201b      	movs	r0, #27
 8003068:	f000 f9b1 	bl	80033ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800306c:	46c0      	nop			; (mov r8, r8)
 800306e:	46bd      	mov	sp, r7
 8003070:	b00b      	add	sp, #44	; 0x2c
 8003072:	bd90      	pop	{r4, r7, pc}
 8003074:	40013800 	.word	0x40013800
 8003078:	40021000 	.word	0x40021000

0800307c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003080:	e7fe      	b.n	8003080 <NMI_Handler+0x4>

08003082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003086:	e7fe      	b.n	8003086 <HardFault_Handler+0x4>

08003088 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800308c:	46c0      	nop			; (mov r8, r8)
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030a0:	f000 f894 	bl	80031cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030a4:	46c0      	nop			; (mov r8, r8)
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80030b0:	4b03      	ldr	r3, [pc, #12]	; (80030c0 <TIM3_IRQHandler+0x14>)
 80030b2:	0018      	movs	r0, r3
 80030b4:	f001 f9b8 	bl	8004428 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80030b8:	46c0      	nop			; (mov r8, r8)
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	20000098 	.word	0x20000098

080030c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80030c8:	4b03      	ldr	r3, [pc, #12]	; (80030d8 <USART1_IRQHandler+0x14>)
 80030ca:	0018      	movs	r0, r3
 80030cc:	f001 ff8c 	bl	8004fe8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80030d0:	46c0      	nop			; (mov r8, r8)
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	200000e0 	.word	0x200000e0

080030dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80030e0:	46c0      	nop			; (mov r8, r8)
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80030e8:	480d      	ldr	r0, [pc, #52]	; (8003120 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80030ea:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80030ec:	f7ff fff6 	bl	80030dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030f0:	480c      	ldr	r0, [pc, #48]	; (8003124 <LoopForever+0x6>)
  ldr r1, =_edata
 80030f2:	490d      	ldr	r1, [pc, #52]	; (8003128 <LoopForever+0xa>)
  ldr r2, =_sidata
 80030f4:	4a0d      	ldr	r2, [pc, #52]	; (800312c <LoopForever+0xe>)
  movs r3, #0
 80030f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030f8:	e002      	b.n	8003100 <LoopCopyDataInit>

080030fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030fe:	3304      	adds	r3, #4

08003100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003104:	d3f9      	bcc.n	80030fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003106:	4a0a      	ldr	r2, [pc, #40]	; (8003130 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003108:	4c0a      	ldr	r4, [pc, #40]	; (8003134 <LoopForever+0x16>)
  movs r3, #0
 800310a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800310c:	e001      	b.n	8003112 <LoopFillZerobss>

0800310e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800310e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003110:	3204      	adds	r2, #4

08003112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003114:	d3fb      	bcc.n	800310e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003116:	f003 f84d 	bl	80061b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800311a:	f7fd fb61 	bl	80007e0 <main>

0800311e <LoopForever>:

LoopForever:
    b LoopForever
 800311e:	e7fe      	b.n	800311e <LoopForever>
  ldr   r0, =_estack
 8003120:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8003124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003128:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800312c:	08006444 	.word	0x08006444
  ldr r2, =_sbss
 8003130:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8003134:	2000017c 	.word	0x2000017c

08003138 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003138:	e7fe      	b.n	8003138 <ADC1_IRQHandler>
	...

0800313c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003140:	4b07      	ldr	r3, [pc, #28]	; (8003160 <HAL_Init+0x24>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	4b06      	ldr	r3, [pc, #24]	; (8003160 <HAL_Init+0x24>)
 8003146:	2110      	movs	r1, #16
 8003148:	430a      	orrs	r2, r1
 800314a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800314c:	2003      	movs	r0, #3
 800314e:	f000 f809 	bl	8003164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003152:	f7ff fe4d 	bl	8002df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	0018      	movs	r0, r3
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	40022000 	.word	0x40022000

08003164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003164:	b590      	push	{r4, r7, lr}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800316c:	4b14      	ldr	r3, [pc, #80]	; (80031c0 <HAL_InitTick+0x5c>)
 800316e:	681c      	ldr	r4, [r3, #0]
 8003170:	4b14      	ldr	r3, [pc, #80]	; (80031c4 <HAL_InitTick+0x60>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	0019      	movs	r1, r3
 8003176:	23fa      	movs	r3, #250	; 0xfa
 8003178:	0098      	lsls	r0, r3, #2
 800317a:	f7fc ffc5 	bl	8000108 <__udivsi3>
 800317e:	0003      	movs	r3, r0
 8003180:	0019      	movs	r1, r3
 8003182:	0020      	movs	r0, r4
 8003184:	f7fc ffc0 	bl	8000108 <__udivsi3>
 8003188:	0003      	movs	r3, r0
 800318a:	0018      	movs	r0, r3
 800318c:	f000 f92f 	bl	80033ee <HAL_SYSTICK_Config>
 8003190:	1e03      	subs	r3, r0, #0
 8003192:	d001      	beq.n	8003198 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e00f      	b.n	80031b8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b03      	cmp	r3, #3
 800319c:	d80b      	bhi.n	80031b6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	2301      	movs	r3, #1
 80031a2:	425b      	negs	r3, r3
 80031a4:	2200      	movs	r2, #0
 80031a6:	0018      	movs	r0, r3
 80031a8:	f000 f8fc 	bl	80033a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031ac:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <HAL_InitTick+0x64>)
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	e000      	b.n	80031b8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
}
 80031b8:	0018      	movs	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	b003      	add	sp, #12
 80031be:	bd90      	pop	{r4, r7, pc}
 80031c0:	20000008 	.word	0x20000008
 80031c4:	20000010 	.word	0x20000010
 80031c8:	2000000c 	.word	0x2000000c

080031cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031d0:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <HAL_IncTick+0x1c>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	001a      	movs	r2, r3
 80031d6:	4b05      	ldr	r3, [pc, #20]	; (80031ec <HAL_IncTick+0x20>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	18d2      	adds	r2, r2, r3
 80031dc:	4b03      	ldr	r3, [pc, #12]	; (80031ec <HAL_IncTick+0x20>)
 80031de:	601a      	str	r2, [r3, #0]
}
 80031e0:	46c0      	nop			; (mov r8, r8)
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	20000010 	.word	0x20000010
 80031ec:	20000178 	.word	0x20000178

080031f0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  return uwTick;
 80031f4:	4b02      	ldr	r3, [pc, #8]	; (8003200 <HAL_GetTick+0x10>)
 80031f6:	681b      	ldr	r3, [r3, #0]
}
 80031f8:	0018      	movs	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	20000178 	.word	0x20000178

08003204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800320c:	f7ff fff0 	bl	80031f0 <HAL_GetTick>
 8003210:	0003      	movs	r3, r0
 8003212:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	3301      	adds	r3, #1
 800321c:	d005      	beq.n	800322a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800321e:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <HAL_Delay+0x44>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	001a      	movs	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	189b      	adds	r3, r3, r2
 8003228:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	f7ff ffe0 	bl	80031f0 <HAL_GetTick>
 8003230:	0002      	movs	r2, r0
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	429a      	cmp	r2, r3
 800323a:	d8f7      	bhi.n	800322c <HAL_Delay+0x28>
  {
  }
}
 800323c:	46c0      	nop			; (mov r8, r8)
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	46bd      	mov	sp, r7
 8003242:	b004      	add	sp, #16
 8003244:	bd80      	pop	{r7, pc}
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	20000010 	.word	0x20000010

0800324c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	0002      	movs	r2, r0
 8003254:	1dfb      	adds	r3, r7, #7
 8003256:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003258:	1dfb      	adds	r3, r7, #7
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b7f      	cmp	r3, #127	; 0x7f
 800325e:	d809      	bhi.n	8003274 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003260:	1dfb      	adds	r3, r7, #7
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	001a      	movs	r2, r3
 8003266:	231f      	movs	r3, #31
 8003268:	401a      	ands	r2, r3
 800326a:	4b04      	ldr	r3, [pc, #16]	; (800327c <__NVIC_EnableIRQ+0x30>)
 800326c:	2101      	movs	r1, #1
 800326e:	4091      	lsls	r1, r2
 8003270:	000a      	movs	r2, r1
 8003272:	601a      	str	r2, [r3, #0]
  }
}
 8003274:	46c0      	nop			; (mov r8, r8)
 8003276:	46bd      	mov	sp, r7
 8003278:	b002      	add	sp, #8
 800327a:	bd80      	pop	{r7, pc}
 800327c:	e000e100 	.word	0xe000e100

08003280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003280:	b590      	push	{r4, r7, lr}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	0002      	movs	r2, r0
 8003288:	6039      	str	r1, [r7, #0]
 800328a:	1dfb      	adds	r3, r7, #7
 800328c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800328e:	1dfb      	adds	r3, r7, #7
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b7f      	cmp	r3, #127	; 0x7f
 8003294:	d828      	bhi.n	80032e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003296:	4a2f      	ldr	r2, [pc, #188]	; (8003354 <__NVIC_SetPriority+0xd4>)
 8003298:	1dfb      	adds	r3, r7, #7
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	b25b      	sxtb	r3, r3
 800329e:	089b      	lsrs	r3, r3, #2
 80032a0:	33c0      	adds	r3, #192	; 0xc0
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	589b      	ldr	r3, [r3, r2]
 80032a6:	1dfa      	adds	r2, r7, #7
 80032a8:	7812      	ldrb	r2, [r2, #0]
 80032aa:	0011      	movs	r1, r2
 80032ac:	2203      	movs	r2, #3
 80032ae:	400a      	ands	r2, r1
 80032b0:	00d2      	lsls	r2, r2, #3
 80032b2:	21ff      	movs	r1, #255	; 0xff
 80032b4:	4091      	lsls	r1, r2
 80032b6:	000a      	movs	r2, r1
 80032b8:	43d2      	mvns	r2, r2
 80032ba:	401a      	ands	r2, r3
 80032bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	019b      	lsls	r3, r3, #6
 80032c2:	22ff      	movs	r2, #255	; 0xff
 80032c4:	401a      	ands	r2, r3
 80032c6:	1dfb      	adds	r3, r7, #7
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	0018      	movs	r0, r3
 80032cc:	2303      	movs	r3, #3
 80032ce:	4003      	ands	r3, r0
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032d4:	481f      	ldr	r0, [pc, #124]	; (8003354 <__NVIC_SetPriority+0xd4>)
 80032d6:	1dfb      	adds	r3, r7, #7
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	b25b      	sxtb	r3, r3
 80032dc:	089b      	lsrs	r3, r3, #2
 80032de:	430a      	orrs	r2, r1
 80032e0:	33c0      	adds	r3, #192	; 0xc0
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80032e6:	e031      	b.n	800334c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032e8:	4a1b      	ldr	r2, [pc, #108]	; (8003358 <__NVIC_SetPriority+0xd8>)
 80032ea:	1dfb      	adds	r3, r7, #7
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	0019      	movs	r1, r3
 80032f0:	230f      	movs	r3, #15
 80032f2:	400b      	ands	r3, r1
 80032f4:	3b08      	subs	r3, #8
 80032f6:	089b      	lsrs	r3, r3, #2
 80032f8:	3306      	adds	r3, #6
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	18d3      	adds	r3, r2, r3
 80032fe:	3304      	adds	r3, #4
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	1dfa      	adds	r2, r7, #7
 8003304:	7812      	ldrb	r2, [r2, #0]
 8003306:	0011      	movs	r1, r2
 8003308:	2203      	movs	r2, #3
 800330a:	400a      	ands	r2, r1
 800330c:	00d2      	lsls	r2, r2, #3
 800330e:	21ff      	movs	r1, #255	; 0xff
 8003310:	4091      	lsls	r1, r2
 8003312:	000a      	movs	r2, r1
 8003314:	43d2      	mvns	r2, r2
 8003316:	401a      	ands	r2, r3
 8003318:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	019b      	lsls	r3, r3, #6
 800331e:	22ff      	movs	r2, #255	; 0xff
 8003320:	401a      	ands	r2, r3
 8003322:	1dfb      	adds	r3, r7, #7
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	0018      	movs	r0, r3
 8003328:	2303      	movs	r3, #3
 800332a:	4003      	ands	r3, r0
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003330:	4809      	ldr	r0, [pc, #36]	; (8003358 <__NVIC_SetPriority+0xd8>)
 8003332:	1dfb      	adds	r3, r7, #7
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	001c      	movs	r4, r3
 8003338:	230f      	movs	r3, #15
 800333a:	4023      	ands	r3, r4
 800333c:	3b08      	subs	r3, #8
 800333e:	089b      	lsrs	r3, r3, #2
 8003340:	430a      	orrs	r2, r1
 8003342:	3306      	adds	r3, #6
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	18c3      	adds	r3, r0, r3
 8003348:	3304      	adds	r3, #4
 800334a:	601a      	str	r2, [r3, #0]
}
 800334c:	46c0      	nop			; (mov r8, r8)
 800334e:	46bd      	mov	sp, r7
 8003350:	b003      	add	sp, #12
 8003352:	bd90      	pop	{r4, r7, pc}
 8003354:	e000e100 	.word	0xe000e100
 8003358:	e000ed00 	.word	0xe000ed00

0800335c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	1e5a      	subs	r2, r3, #1
 8003368:	2380      	movs	r3, #128	; 0x80
 800336a:	045b      	lsls	r3, r3, #17
 800336c:	429a      	cmp	r2, r3
 800336e:	d301      	bcc.n	8003374 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003370:	2301      	movs	r3, #1
 8003372:	e010      	b.n	8003396 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003374:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <SysTick_Config+0x44>)
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	3a01      	subs	r2, #1
 800337a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800337c:	2301      	movs	r3, #1
 800337e:	425b      	negs	r3, r3
 8003380:	2103      	movs	r1, #3
 8003382:	0018      	movs	r0, r3
 8003384:	f7ff ff7c 	bl	8003280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003388:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <SysTick_Config+0x44>)
 800338a:	2200      	movs	r2, #0
 800338c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800338e:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <SysTick_Config+0x44>)
 8003390:	2207      	movs	r2, #7
 8003392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003394:	2300      	movs	r3, #0
}
 8003396:	0018      	movs	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	b002      	add	sp, #8
 800339c:	bd80      	pop	{r7, pc}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	e000e010 	.word	0xe000e010

080033a4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	607a      	str	r2, [r7, #4]
 80033ae:	210f      	movs	r1, #15
 80033b0:	187b      	adds	r3, r7, r1
 80033b2:	1c02      	adds	r2, r0, #0
 80033b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	187b      	adds	r3, r7, r1
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	b25b      	sxtb	r3, r3
 80033be:	0011      	movs	r1, r2
 80033c0:	0018      	movs	r0, r3
 80033c2:	f7ff ff5d 	bl	8003280 <__NVIC_SetPriority>
}
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	46bd      	mov	sp, r7
 80033ca:	b004      	add	sp, #16
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	0002      	movs	r2, r0
 80033d6:	1dfb      	adds	r3, r7, #7
 80033d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033da:	1dfb      	adds	r3, r7, #7
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	b25b      	sxtb	r3, r3
 80033e0:	0018      	movs	r0, r3
 80033e2:	f7ff ff33 	bl	800324c <__NVIC_EnableIRQ>
}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	46bd      	mov	sp, r7
 80033ea:	b002      	add	sp, #8
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	0018      	movs	r0, r3
 80033fa:	f7ff ffaf 	bl	800335c <SysTick_Config>
 80033fe:	0003      	movs	r3, r0
}
 8003400:	0018      	movs	r0, r3
 8003402:	46bd      	mov	sp, r7
 8003404:	b002      	add	sp, #8
 8003406:	bd80      	pop	{r7, pc}

08003408 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2221      	movs	r2, #33	; 0x21
 8003414:	5c9b      	ldrb	r3, [r3, r2]
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d008      	beq.n	800342e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2204      	movs	r2, #4
 8003420:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2220      	movs	r2, #32
 8003426:	2100      	movs	r1, #0
 8003428:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e020      	b.n	8003470 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	210e      	movs	r1, #14
 800343a:	438a      	bics	r2, r1
 800343c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2101      	movs	r1, #1
 800344a:	438a      	bics	r2, r1
 800344c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003456:	2101      	movs	r1, #1
 8003458:	4091      	lsls	r1, r2
 800345a:	000a      	movs	r2, r1
 800345c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2221      	movs	r2, #33	; 0x21
 8003462:	2101      	movs	r1, #1
 8003464:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2220      	movs	r2, #32
 800346a:	2100      	movs	r1, #0
 800346c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	0018      	movs	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	b002      	add	sp, #8
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003480:	210f      	movs	r1, #15
 8003482:	187b      	adds	r3, r7, r1
 8003484:	2200      	movs	r2, #0
 8003486:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2221      	movs	r2, #33	; 0x21
 800348c:	5c9b      	ldrb	r3, [r3, r2]
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d006      	beq.n	80034a2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2204      	movs	r2, #4
 8003498:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800349a:	187b      	adds	r3, r7, r1
 800349c:	2201      	movs	r2, #1
 800349e:	701a      	strb	r2, [r3, #0]
 80034a0:	e028      	b.n	80034f4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	210e      	movs	r1, #14
 80034ae:	438a      	bics	r2, r1
 80034b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2101      	movs	r1, #1
 80034be:	438a      	bics	r2, r1
 80034c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ca:	2101      	movs	r1, #1
 80034cc:	4091      	lsls	r1, r2
 80034ce:	000a      	movs	r2, r1
 80034d0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2221      	movs	r2, #33	; 0x21
 80034d6:	2101      	movs	r1, #1
 80034d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	2100      	movs	r1, #0
 80034e0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d004      	beq.n	80034f4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	0010      	movs	r0, r2
 80034f2:	4798      	blx	r3
    }
  }
  return status;
 80034f4:	230f      	movs	r3, #15
 80034f6:	18fb      	adds	r3, r7, r3
 80034f8:	781b      	ldrb	r3, [r3, #0]
}
 80034fa:	0018      	movs	r0, r3
 80034fc:	46bd      	mov	sp, r7
 80034fe:	b004      	add	sp, #16
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003512:	e14f      	b.n	80037b4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2101      	movs	r1, #1
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	4091      	lsls	r1, r2
 800351e:	000a      	movs	r2, r1
 8003520:	4013      	ands	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d100      	bne.n	800352c <HAL_GPIO_Init+0x28>
 800352a:	e140      	b.n	80037ae <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2203      	movs	r2, #3
 8003532:	4013      	ands	r3, r2
 8003534:	2b01      	cmp	r3, #1
 8003536:	d005      	beq.n	8003544 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2203      	movs	r2, #3
 800353e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003540:	2b02      	cmp	r3, #2
 8003542:	d130      	bne.n	80035a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	2203      	movs	r2, #3
 8003550:	409a      	lsls	r2, r3
 8003552:	0013      	movs	r3, r2
 8003554:	43da      	mvns	r2, r3
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	4013      	ands	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	409a      	lsls	r2, r3
 8003566:	0013      	movs	r3, r2
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	4313      	orrs	r3, r2
 800356c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800357a:	2201      	movs	r2, #1
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	409a      	lsls	r2, r3
 8003580:	0013      	movs	r3, r2
 8003582:	43da      	mvns	r2, r3
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4013      	ands	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	091b      	lsrs	r3, r3, #4
 8003590:	2201      	movs	r2, #1
 8003592:	401a      	ands	r2, r3
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	409a      	lsls	r2, r3
 8003598:	0013      	movs	r3, r2
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2203      	movs	r2, #3
 80035ac:	4013      	ands	r3, r2
 80035ae:	2b03      	cmp	r3, #3
 80035b0:	d017      	beq.n	80035e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	2203      	movs	r2, #3
 80035be:	409a      	lsls	r2, r3
 80035c0:	0013      	movs	r3, r2
 80035c2:	43da      	mvns	r2, r3
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4013      	ands	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	409a      	lsls	r2, r3
 80035d4:	0013      	movs	r3, r2
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2203      	movs	r2, #3
 80035e8:	4013      	ands	r3, r2
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d123      	bne.n	8003636 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	08da      	lsrs	r2, r3, #3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3208      	adds	r2, #8
 80035f6:	0092      	lsls	r2, r2, #2
 80035f8:	58d3      	ldr	r3, [r2, r3]
 80035fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	2207      	movs	r2, #7
 8003600:	4013      	ands	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	220f      	movs	r2, #15
 8003606:	409a      	lsls	r2, r3
 8003608:	0013      	movs	r3, r2
 800360a:	43da      	mvns	r2, r3
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	4013      	ands	r3, r2
 8003610:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	691a      	ldr	r2, [r3, #16]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2107      	movs	r1, #7
 800361a:	400b      	ands	r3, r1
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	409a      	lsls	r2, r3
 8003620:	0013      	movs	r3, r2
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4313      	orrs	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	08da      	lsrs	r2, r3, #3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3208      	adds	r2, #8
 8003630:	0092      	lsls	r2, r2, #2
 8003632:	6939      	ldr	r1, [r7, #16]
 8003634:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	2203      	movs	r2, #3
 8003642:	409a      	lsls	r2, r3
 8003644:	0013      	movs	r3, r2
 8003646:	43da      	mvns	r2, r3
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	4013      	ands	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2203      	movs	r2, #3
 8003654:	401a      	ands	r2, r3
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	409a      	lsls	r2, r3
 800365c:	0013      	movs	r3, r2
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	23c0      	movs	r3, #192	; 0xc0
 8003670:	029b      	lsls	r3, r3, #10
 8003672:	4013      	ands	r3, r2
 8003674:	d100      	bne.n	8003678 <HAL_GPIO_Init+0x174>
 8003676:	e09a      	b.n	80037ae <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003678:	4b54      	ldr	r3, [pc, #336]	; (80037cc <HAL_GPIO_Init+0x2c8>)
 800367a:	699a      	ldr	r2, [r3, #24]
 800367c:	4b53      	ldr	r3, [pc, #332]	; (80037cc <HAL_GPIO_Init+0x2c8>)
 800367e:	2101      	movs	r1, #1
 8003680:	430a      	orrs	r2, r1
 8003682:	619a      	str	r2, [r3, #24]
 8003684:	4b51      	ldr	r3, [pc, #324]	; (80037cc <HAL_GPIO_Init+0x2c8>)
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	2201      	movs	r2, #1
 800368a:	4013      	ands	r3, r2
 800368c:	60bb      	str	r3, [r7, #8]
 800368e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003690:	4a4f      	ldr	r2, [pc, #316]	; (80037d0 <HAL_GPIO_Init+0x2cc>)
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	089b      	lsrs	r3, r3, #2
 8003696:	3302      	adds	r3, #2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	589b      	ldr	r3, [r3, r2]
 800369c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2203      	movs	r2, #3
 80036a2:	4013      	ands	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	220f      	movs	r2, #15
 80036a8:	409a      	lsls	r2, r3
 80036aa:	0013      	movs	r3, r2
 80036ac:	43da      	mvns	r2, r3
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	4013      	ands	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	2390      	movs	r3, #144	; 0x90
 80036b8:	05db      	lsls	r3, r3, #23
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d013      	beq.n	80036e6 <HAL_GPIO_Init+0x1e2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a44      	ldr	r2, [pc, #272]	; (80037d4 <HAL_GPIO_Init+0x2d0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00d      	beq.n	80036e2 <HAL_GPIO_Init+0x1de>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a43      	ldr	r2, [pc, #268]	; (80037d8 <HAL_GPIO_Init+0x2d4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d007      	beq.n	80036de <HAL_GPIO_Init+0x1da>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a42      	ldr	r2, [pc, #264]	; (80037dc <HAL_GPIO_Init+0x2d8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d101      	bne.n	80036da <HAL_GPIO_Init+0x1d6>
 80036d6:	2303      	movs	r3, #3
 80036d8:	e006      	b.n	80036e8 <HAL_GPIO_Init+0x1e4>
 80036da:	2305      	movs	r3, #5
 80036dc:	e004      	b.n	80036e8 <HAL_GPIO_Init+0x1e4>
 80036de:	2302      	movs	r3, #2
 80036e0:	e002      	b.n	80036e8 <HAL_GPIO_Init+0x1e4>
 80036e2:	2301      	movs	r3, #1
 80036e4:	e000      	b.n	80036e8 <HAL_GPIO_Init+0x1e4>
 80036e6:	2300      	movs	r3, #0
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	2103      	movs	r1, #3
 80036ec:	400a      	ands	r2, r1
 80036ee:	0092      	lsls	r2, r2, #2
 80036f0:	4093      	lsls	r3, r2
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036f8:	4935      	ldr	r1, [pc, #212]	; (80037d0 <HAL_GPIO_Init+0x2cc>)
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	089b      	lsrs	r3, r3, #2
 80036fe:	3302      	adds	r3, #2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003706:	4b36      	ldr	r3, [pc, #216]	; (80037e0 <HAL_GPIO_Init+0x2dc>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	43da      	mvns	r2, r3
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	4013      	ands	r3, r2
 8003714:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	2380      	movs	r3, #128	; 0x80
 800371c:	035b      	lsls	r3, r3, #13
 800371e:	4013      	ands	r3, r2
 8003720:	d003      	beq.n	800372a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4313      	orrs	r3, r2
 8003728:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800372a:	4b2d      	ldr	r3, [pc, #180]	; (80037e0 <HAL_GPIO_Init+0x2dc>)
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003730:	4b2b      	ldr	r3, [pc, #172]	; (80037e0 <HAL_GPIO_Init+0x2dc>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	43da      	mvns	r2, r3
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	4013      	ands	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	2380      	movs	r3, #128	; 0x80
 8003746:	039b      	lsls	r3, r3, #14
 8003748:	4013      	ands	r3, r2
 800374a:	d003      	beq.n	8003754 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4313      	orrs	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003754:	4b22      	ldr	r3, [pc, #136]	; (80037e0 <HAL_GPIO_Init+0x2dc>)
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800375a:	4b21      	ldr	r3, [pc, #132]	; (80037e0 <HAL_GPIO_Init+0x2dc>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	43da      	mvns	r2, r3
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	4013      	ands	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	2380      	movs	r3, #128	; 0x80
 8003770:	029b      	lsls	r3, r3, #10
 8003772:	4013      	ands	r3, r2
 8003774:	d003      	beq.n	800377e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4313      	orrs	r3, r2
 800377c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800377e:	4b18      	ldr	r3, [pc, #96]	; (80037e0 <HAL_GPIO_Init+0x2dc>)
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003784:	4b16      	ldr	r3, [pc, #88]	; (80037e0 <HAL_GPIO_Init+0x2dc>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	43da      	mvns	r2, r3
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	4013      	ands	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	2380      	movs	r3, #128	; 0x80
 800379a:	025b      	lsls	r3, r3, #9
 800379c:	4013      	ands	r3, r2
 800379e:	d003      	beq.n	80037a8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80037a8:	4b0d      	ldr	r3, [pc, #52]	; (80037e0 <HAL_GPIO_Init+0x2dc>)
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	3301      	adds	r3, #1
 80037b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	40da      	lsrs	r2, r3
 80037bc:	1e13      	subs	r3, r2, #0
 80037be:	d000      	beq.n	80037c2 <HAL_GPIO_Init+0x2be>
 80037c0:	e6a8      	b.n	8003514 <HAL_GPIO_Init+0x10>
  } 
}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	46c0      	nop			; (mov r8, r8)
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b006      	add	sp, #24
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40021000 	.word	0x40021000
 80037d0:	40010000 	.word	0x40010000
 80037d4:	48000400 	.word	0x48000400
 80037d8:	48000800 	.word	0x48000800
 80037dc:	48000c00 	.word	0x48000c00
 80037e0:	40010400 	.word	0x40010400

080037e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e301      	b.n	8003dfa <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2201      	movs	r2, #1
 80037fc:	4013      	ands	r3, r2
 80037fe:	d100      	bne.n	8003802 <HAL_RCC_OscConfig+0x1e>
 8003800:	e08d      	b.n	800391e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003802:	4bc3      	ldr	r3, [pc, #780]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	220c      	movs	r2, #12
 8003808:	4013      	ands	r3, r2
 800380a:	2b04      	cmp	r3, #4
 800380c:	d00e      	beq.n	800382c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800380e:	4bc0      	ldr	r3, [pc, #768]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	220c      	movs	r2, #12
 8003814:	4013      	ands	r3, r2
 8003816:	2b08      	cmp	r3, #8
 8003818:	d116      	bne.n	8003848 <HAL_RCC_OscConfig+0x64>
 800381a:	4bbd      	ldr	r3, [pc, #756]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	2380      	movs	r3, #128	; 0x80
 8003820:	025b      	lsls	r3, r3, #9
 8003822:	401a      	ands	r2, r3
 8003824:	2380      	movs	r3, #128	; 0x80
 8003826:	025b      	lsls	r3, r3, #9
 8003828:	429a      	cmp	r2, r3
 800382a:	d10d      	bne.n	8003848 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800382c:	4bb8      	ldr	r3, [pc, #736]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	2380      	movs	r3, #128	; 0x80
 8003832:	029b      	lsls	r3, r3, #10
 8003834:	4013      	ands	r3, r2
 8003836:	d100      	bne.n	800383a <HAL_RCC_OscConfig+0x56>
 8003838:	e070      	b.n	800391c <HAL_RCC_OscConfig+0x138>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d000      	beq.n	8003844 <HAL_RCC_OscConfig+0x60>
 8003842:	e06b      	b.n	800391c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e2d8      	b.n	8003dfa <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d107      	bne.n	8003860 <HAL_RCC_OscConfig+0x7c>
 8003850:	4baf      	ldr	r3, [pc, #700]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	4bae      	ldr	r3, [pc, #696]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 8003856:	2180      	movs	r1, #128	; 0x80
 8003858:	0249      	lsls	r1, r1, #9
 800385a:	430a      	orrs	r2, r1
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	e02f      	b.n	80038c0 <HAL_RCC_OscConfig+0xdc>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10c      	bne.n	8003882 <HAL_RCC_OscConfig+0x9e>
 8003868:	4ba9      	ldr	r3, [pc, #676]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	4ba8      	ldr	r3, [pc, #672]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 800386e:	49a9      	ldr	r1, [pc, #676]	; (8003b14 <HAL_RCC_OscConfig+0x330>)
 8003870:	400a      	ands	r2, r1
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	4ba6      	ldr	r3, [pc, #664]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	4ba5      	ldr	r3, [pc, #660]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 800387a:	49a7      	ldr	r1, [pc, #668]	; (8003b18 <HAL_RCC_OscConfig+0x334>)
 800387c:	400a      	ands	r2, r1
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	e01e      	b.n	80038c0 <HAL_RCC_OscConfig+0xdc>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b05      	cmp	r3, #5
 8003888:	d10e      	bne.n	80038a8 <HAL_RCC_OscConfig+0xc4>
 800388a:	4ba1      	ldr	r3, [pc, #644]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	4ba0      	ldr	r3, [pc, #640]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 8003890:	2180      	movs	r1, #128	; 0x80
 8003892:	02c9      	lsls	r1, r1, #11
 8003894:	430a      	orrs	r2, r1
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	4b9d      	ldr	r3, [pc, #628]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	4b9c      	ldr	r3, [pc, #624]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 800389e:	2180      	movs	r1, #128	; 0x80
 80038a0:	0249      	lsls	r1, r1, #9
 80038a2:	430a      	orrs	r2, r1
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	e00b      	b.n	80038c0 <HAL_RCC_OscConfig+0xdc>
 80038a8:	4b99      	ldr	r3, [pc, #612]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	4b98      	ldr	r3, [pc, #608]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 80038ae:	4999      	ldr	r1, [pc, #612]	; (8003b14 <HAL_RCC_OscConfig+0x330>)
 80038b0:	400a      	ands	r2, r1
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	4b96      	ldr	r3, [pc, #600]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	4b95      	ldr	r3, [pc, #596]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 80038ba:	4997      	ldr	r1, [pc, #604]	; (8003b18 <HAL_RCC_OscConfig+0x334>)
 80038bc:	400a      	ands	r2, r1
 80038be:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d014      	beq.n	80038f2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c8:	f7ff fc92 	bl	80031f0 <HAL_GetTick>
 80038cc:	0003      	movs	r3, r0
 80038ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038d2:	f7ff fc8d 	bl	80031f0 <HAL_GetTick>
 80038d6:	0002      	movs	r2, r0
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b64      	cmp	r3, #100	; 0x64
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e28a      	b.n	8003dfa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e4:	4b8a      	ldr	r3, [pc, #552]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	2380      	movs	r3, #128	; 0x80
 80038ea:	029b      	lsls	r3, r3, #10
 80038ec:	4013      	ands	r3, r2
 80038ee:	d0f0      	beq.n	80038d2 <HAL_RCC_OscConfig+0xee>
 80038f0:	e015      	b.n	800391e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f2:	f7ff fc7d 	bl	80031f0 <HAL_GetTick>
 80038f6:	0003      	movs	r3, r0
 80038f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038fc:	f7ff fc78 	bl	80031f0 <HAL_GetTick>
 8003900:	0002      	movs	r2, r0
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b64      	cmp	r3, #100	; 0x64
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e275      	b.n	8003dfa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800390e:	4b80      	ldr	r3, [pc, #512]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	2380      	movs	r3, #128	; 0x80
 8003914:	029b      	lsls	r3, r3, #10
 8003916:	4013      	ands	r3, r2
 8003918:	d1f0      	bne.n	80038fc <HAL_RCC_OscConfig+0x118>
 800391a:	e000      	b.n	800391e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800391c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2202      	movs	r2, #2
 8003924:	4013      	ands	r3, r2
 8003926:	d100      	bne.n	800392a <HAL_RCC_OscConfig+0x146>
 8003928:	e069      	b.n	80039fe <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800392a:	4b79      	ldr	r3, [pc, #484]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	220c      	movs	r2, #12
 8003930:	4013      	ands	r3, r2
 8003932:	d00b      	beq.n	800394c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003934:	4b76      	ldr	r3, [pc, #472]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	220c      	movs	r2, #12
 800393a:	4013      	ands	r3, r2
 800393c:	2b08      	cmp	r3, #8
 800393e:	d11c      	bne.n	800397a <HAL_RCC_OscConfig+0x196>
 8003940:	4b73      	ldr	r3, [pc, #460]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	2380      	movs	r3, #128	; 0x80
 8003946:	025b      	lsls	r3, r3, #9
 8003948:	4013      	ands	r3, r2
 800394a:	d116      	bne.n	800397a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800394c:	4b70      	ldr	r3, [pc, #448]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2202      	movs	r2, #2
 8003952:	4013      	ands	r3, r2
 8003954:	d005      	beq.n	8003962 <HAL_RCC_OscConfig+0x17e>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d001      	beq.n	8003962 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e24b      	b.n	8003dfa <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003962:	4b6b      	ldr	r3, [pc, #428]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	22f8      	movs	r2, #248	; 0xf8
 8003968:	4393      	bics	r3, r2
 800396a:	0019      	movs	r1, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	00da      	lsls	r2, r3, #3
 8003972:	4b67      	ldr	r3, [pc, #412]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 8003974:	430a      	orrs	r2, r1
 8003976:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003978:	e041      	b.n	80039fe <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d024      	beq.n	80039cc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003982:	4b63      	ldr	r3, [pc, #396]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	4b62      	ldr	r3, [pc, #392]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 8003988:	2101      	movs	r1, #1
 800398a:	430a      	orrs	r2, r1
 800398c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398e:	f7ff fc2f 	bl	80031f0 <HAL_GetTick>
 8003992:	0003      	movs	r3, r0
 8003994:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003998:	f7ff fc2a 	bl	80031f0 <HAL_GetTick>
 800399c:	0002      	movs	r2, r0
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e227      	b.n	8003dfa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039aa:	4b59      	ldr	r3, [pc, #356]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2202      	movs	r2, #2
 80039b0:	4013      	ands	r3, r2
 80039b2:	d0f1      	beq.n	8003998 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b4:	4b56      	ldr	r3, [pc, #344]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	22f8      	movs	r2, #248	; 0xf8
 80039ba:	4393      	bics	r3, r2
 80039bc:	0019      	movs	r1, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	00da      	lsls	r2, r3, #3
 80039c4:	4b52      	ldr	r3, [pc, #328]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 80039c6:	430a      	orrs	r2, r1
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	e018      	b.n	80039fe <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039cc:	4b50      	ldr	r3, [pc, #320]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	4b4f      	ldr	r3, [pc, #316]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 80039d2:	2101      	movs	r1, #1
 80039d4:	438a      	bics	r2, r1
 80039d6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d8:	f7ff fc0a 	bl	80031f0 <HAL_GetTick>
 80039dc:	0003      	movs	r3, r0
 80039de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039e2:	f7ff fc05 	bl	80031f0 <HAL_GetTick>
 80039e6:	0002      	movs	r2, r0
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e202      	b.n	8003dfa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039f4:	4b46      	ldr	r3, [pc, #280]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2202      	movs	r2, #2
 80039fa:	4013      	ands	r3, r2
 80039fc:	d1f1      	bne.n	80039e2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2208      	movs	r2, #8
 8003a04:	4013      	ands	r3, r2
 8003a06:	d036      	beq.n	8003a76 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d019      	beq.n	8003a44 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a10:	4b3f      	ldr	r3, [pc, #252]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 8003a12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a14:	4b3e      	ldr	r3, [pc, #248]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 8003a16:	2101      	movs	r1, #1
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a1c:	f7ff fbe8 	bl	80031f0 <HAL_GetTick>
 8003a20:	0003      	movs	r3, r0
 8003a22:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a24:	e008      	b.n	8003a38 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a26:	f7ff fbe3 	bl	80031f0 <HAL_GetTick>
 8003a2a:	0002      	movs	r2, r0
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e1e0      	b.n	8003dfa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a38:	4b35      	ldr	r3, [pc, #212]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	4013      	ands	r3, r2
 8003a40:	d0f1      	beq.n	8003a26 <HAL_RCC_OscConfig+0x242>
 8003a42:	e018      	b.n	8003a76 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a44:	4b32      	ldr	r3, [pc, #200]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 8003a46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a48:	4b31      	ldr	r3, [pc, #196]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	438a      	bics	r2, r1
 8003a4e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a50:	f7ff fbce 	bl	80031f0 <HAL_GetTick>
 8003a54:	0003      	movs	r3, r0
 8003a56:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a58:	e008      	b.n	8003a6c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a5a:	f7ff fbc9 	bl	80031f0 <HAL_GetTick>
 8003a5e:	0002      	movs	r2, r0
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e1c6      	b.n	8003dfa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a6c:	4b28      	ldr	r3, [pc, #160]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	2202      	movs	r2, #2
 8003a72:	4013      	ands	r3, r2
 8003a74:	d1f1      	bne.n	8003a5a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2204      	movs	r2, #4
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	d100      	bne.n	8003a82 <HAL_RCC_OscConfig+0x29e>
 8003a80:	e0b4      	b.n	8003bec <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a82:	201f      	movs	r0, #31
 8003a84:	183b      	adds	r3, r7, r0
 8003a86:	2200      	movs	r2, #0
 8003a88:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a8a:	4b21      	ldr	r3, [pc, #132]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 8003a8c:	69da      	ldr	r2, [r3, #28]
 8003a8e:	2380      	movs	r3, #128	; 0x80
 8003a90:	055b      	lsls	r3, r3, #21
 8003a92:	4013      	ands	r3, r2
 8003a94:	d110      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a96:	4b1e      	ldr	r3, [pc, #120]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 8003a98:	69da      	ldr	r2, [r3, #28]
 8003a9a:	4b1d      	ldr	r3, [pc, #116]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 8003a9c:	2180      	movs	r1, #128	; 0x80
 8003a9e:	0549      	lsls	r1, r1, #21
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	61da      	str	r2, [r3, #28]
 8003aa4:	4b1a      	ldr	r3, [pc, #104]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 8003aa6:	69da      	ldr	r2, [r3, #28]
 8003aa8:	2380      	movs	r3, #128	; 0x80
 8003aaa:	055b      	lsls	r3, r3, #21
 8003aac:	4013      	ands	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ab2:	183b      	adds	r3, r7, r0
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab8:	4b18      	ldr	r3, [pc, #96]	; (8003b1c <HAL_RCC_OscConfig+0x338>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	2380      	movs	r3, #128	; 0x80
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d11a      	bne.n	8003afa <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ac4:	4b15      	ldr	r3, [pc, #84]	; (8003b1c <HAL_RCC_OscConfig+0x338>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	4b14      	ldr	r3, [pc, #80]	; (8003b1c <HAL_RCC_OscConfig+0x338>)
 8003aca:	2180      	movs	r1, #128	; 0x80
 8003acc:	0049      	lsls	r1, r1, #1
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ad2:	f7ff fb8d 	bl	80031f0 <HAL_GetTick>
 8003ad6:	0003      	movs	r3, r0
 8003ad8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003adc:	f7ff fb88 	bl	80031f0 <HAL_GetTick>
 8003ae0:	0002      	movs	r2, r0
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b64      	cmp	r3, #100	; 0x64
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e185      	b.n	8003dfa <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aee:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <HAL_RCC_OscConfig+0x338>)
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	2380      	movs	r3, #128	; 0x80
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	4013      	ands	r3, r2
 8003af8:	d0f0      	beq.n	8003adc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d10e      	bne.n	8003b20 <HAL_RCC_OscConfig+0x33c>
 8003b02:	4b03      	ldr	r3, [pc, #12]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 8003b04:	6a1a      	ldr	r2, [r3, #32]
 8003b06:	4b02      	ldr	r3, [pc, #8]	; (8003b10 <HAL_RCC_OscConfig+0x32c>)
 8003b08:	2101      	movs	r1, #1
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	621a      	str	r2, [r3, #32]
 8003b0e:	e035      	b.n	8003b7c <HAL_RCC_OscConfig+0x398>
 8003b10:	40021000 	.word	0x40021000
 8003b14:	fffeffff 	.word	0xfffeffff
 8003b18:	fffbffff 	.word	0xfffbffff
 8003b1c:	40007000 	.word	0x40007000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10c      	bne.n	8003b42 <HAL_RCC_OscConfig+0x35e>
 8003b28:	4bb6      	ldr	r3, [pc, #728]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003b2a:	6a1a      	ldr	r2, [r3, #32]
 8003b2c:	4bb5      	ldr	r3, [pc, #724]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003b2e:	2101      	movs	r1, #1
 8003b30:	438a      	bics	r2, r1
 8003b32:	621a      	str	r2, [r3, #32]
 8003b34:	4bb3      	ldr	r3, [pc, #716]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003b36:	6a1a      	ldr	r2, [r3, #32]
 8003b38:	4bb2      	ldr	r3, [pc, #712]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003b3a:	2104      	movs	r1, #4
 8003b3c:	438a      	bics	r2, r1
 8003b3e:	621a      	str	r2, [r3, #32]
 8003b40:	e01c      	b.n	8003b7c <HAL_RCC_OscConfig+0x398>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2b05      	cmp	r3, #5
 8003b48:	d10c      	bne.n	8003b64 <HAL_RCC_OscConfig+0x380>
 8003b4a:	4bae      	ldr	r3, [pc, #696]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003b4c:	6a1a      	ldr	r2, [r3, #32]
 8003b4e:	4bad      	ldr	r3, [pc, #692]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003b50:	2104      	movs	r1, #4
 8003b52:	430a      	orrs	r2, r1
 8003b54:	621a      	str	r2, [r3, #32]
 8003b56:	4bab      	ldr	r3, [pc, #684]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003b58:	6a1a      	ldr	r2, [r3, #32]
 8003b5a:	4baa      	ldr	r3, [pc, #680]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	621a      	str	r2, [r3, #32]
 8003b62:	e00b      	b.n	8003b7c <HAL_RCC_OscConfig+0x398>
 8003b64:	4ba7      	ldr	r3, [pc, #668]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003b66:	6a1a      	ldr	r2, [r3, #32]
 8003b68:	4ba6      	ldr	r3, [pc, #664]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	438a      	bics	r2, r1
 8003b6e:	621a      	str	r2, [r3, #32]
 8003b70:	4ba4      	ldr	r3, [pc, #656]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003b72:	6a1a      	ldr	r2, [r3, #32]
 8003b74:	4ba3      	ldr	r3, [pc, #652]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003b76:	2104      	movs	r1, #4
 8003b78:	438a      	bics	r2, r1
 8003b7a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d014      	beq.n	8003bae <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b84:	f7ff fb34 	bl	80031f0 <HAL_GetTick>
 8003b88:	0003      	movs	r3, r0
 8003b8a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8c:	e009      	b.n	8003ba2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b8e:	f7ff fb2f 	bl	80031f0 <HAL_GetTick>
 8003b92:	0002      	movs	r2, r0
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	4a9b      	ldr	r2, [pc, #620]	; (8003e08 <HAL_RCC_OscConfig+0x624>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e12b      	b.n	8003dfa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba2:	4b98      	ldr	r3, [pc, #608]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	4013      	ands	r3, r2
 8003baa:	d0f0      	beq.n	8003b8e <HAL_RCC_OscConfig+0x3aa>
 8003bac:	e013      	b.n	8003bd6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bae:	f7ff fb1f 	bl	80031f0 <HAL_GetTick>
 8003bb2:	0003      	movs	r3, r0
 8003bb4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb6:	e009      	b.n	8003bcc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bb8:	f7ff fb1a 	bl	80031f0 <HAL_GetTick>
 8003bbc:	0002      	movs	r2, r0
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	4a91      	ldr	r2, [pc, #580]	; (8003e08 <HAL_RCC_OscConfig+0x624>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e116      	b.n	8003dfa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bcc:	4b8d      	ldr	r3, [pc, #564]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	d1f0      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bd6:	231f      	movs	r3, #31
 8003bd8:	18fb      	adds	r3, r7, r3
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d105      	bne.n	8003bec <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be0:	4b88      	ldr	r3, [pc, #544]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003be2:	69da      	ldr	r2, [r3, #28]
 8003be4:	4b87      	ldr	r3, [pc, #540]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003be6:	4989      	ldr	r1, [pc, #548]	; (8003e0c <HAL_RCC_OscConfig+0x628>)
 8003be8:	400a      	ands	r2, r1
 8003bea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2210      	movs	r2, #16
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	d063      	beq.n	8003cbe <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d12a      	bne.n	8003c54 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003bfe:	4b81      	ldr	r3, [pc, #516]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c02:	4b80      	ldr	r3, [pc, #512]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003c04:	2104      	movs	r1, #4
 8003c06:	430a      	orrs	r2, r1
 8003c08:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003c0a:	4b7e      	ldr	r3, [pc, #504]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003c0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c0e:	4b7d      	ldr	r3, [pc, #500]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003c10:	2101      	movs	r1, #1
 8003c12:	430a      	orrs	r2, r1
 8003c14:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c16:	f7ff faeb 	bl	80031f0 <HAL_GetTick>
 8003c1a:	0003      	movs	r3, r0
 8003c1c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003c20:	f7ff fae6 	bl	80031f0 <HAL_GetTick>
 8003c24:	0002      	movs	r2, r0
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e0e3      	b.n	8003dfa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003c32:	4b74      	ldr	r3, [pc, #464]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c36:	2202      	movs	r2, #2
 8003c38:	4013      	ands	r3, r2
 8003c3a:	d0f1      	beq.n	8003c20 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003c3c:	4b71      	ldr	r3, [pc, #452]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c40:	22f8      	movs	r2, #248	; 0xf8
 8003c42:	4393      	bics	r3, r2
 8003c44:	0019      	movs	r1, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	00da      	lsls	r2, r3, #3
 8003c4c:	4b6d      	ldr	r3, [pc, #436]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	635a      	str	r2, [r3, #52]	; 0x34
 8003c52:	e034      	b.n	8003cbe <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	3305      	adds	r3, #5
 8003c5a:	d111      	bne.n	8003c80 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003c5c:	4b69      	ldr	r3, [pc, #420]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003c5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c60:	4b68      	ldr	r3, [pc, #416]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003c62:	2104      	movs	r1, #4
 8003c64:	438a      	bics	r2, r1
 8003c66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003c68:	4b66      	ldr	r3, [pc, #408]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6c:	22f8      	movs	r2, #248	; 0xf8
 8003c6e:	4393      	bics	r3, r2
 8003c70:	0019      	movs	r1, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	00da      	lsls	r2, r3, #3
 8003c78:	4b62      	ldr	r3, [pc, #392]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	635a      	str	r2, [r3, #52]	; 0x34
 8003c7e:	e01e      	b.n	8003cbe <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003c80:	4b60      	ldr	r3, [pc, #384]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003c82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c84:	4b5f      	ldr	r3, [pc, #380]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003c86:	2104      	movs	r1, #4
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003c8c:	4b5d      	ldr	r3, [pc, #372]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003c8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c90:	4b5c      	ldr	r3, [pc, #368]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003c92:	2101      	movs	r1, #1
 8003c94:	438a      	bics	r2, r1
 8003c96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c98:	f7ff faaa 	bl	80031f0 <HAL_GetTick>
 8003c9c:	0003      	movs	r3, r0
 8003c9e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003ca2:	f7ff faa5 	bl	80031f0 <HAL_GetTick>
 8003ca6:	0002      	movs	r2, r0
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e0a2      	b.n	8003dfa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003cb4:	4b53      	ldr	r3, [pc, #332]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb8:	2202      	movs	r2, #2
 8003cba:	4013      	ands	r3, r2
 8003cbc:	d1f1      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d100      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x4e4>
 8003cc6:	e097      	b.n	8003df8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cc8:	4b4e      	ldr	r3, [pc, #312]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	220c      	movs	r2, #12
 8003cce:	4013      	ands	r3, r2
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d100      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x4f2>
 8003cd4:	e06b      	b.n	8003dae <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d14c      	bne.n	8003d78 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cde:	4b49      	ldr	r3, [pc, #292]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	4b48      	ldr	r3, [pc, #288]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003ce4:	494a      	ldr	r1, [pc, #296]	; (8003e10 <HAL_RCC_OscConfig+0x62c>)
 8003ce6:	400a      	ands	r2, r1
 8003ce8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cea:	f7ff fa81 	bl	80031f0 <HAL_GetTick>
 8003cee:	0003      	movs	r3, r0
 8003cf0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cf4:	f7ff fa7c 	bl	80031f0 <HAL_GetTick>
 8003cf8:	0002      	movs	r2, r0
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e079      	b.n	8003dfa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d06:	4b3f      	ldr	r3, [pc, #252]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	2380      	movs	r3, #128	; 0x80
 8003d0c:	049b      	lsls	r3, r3, #18
 8003d0e:	4013      	ands	r3, r2
 8003d10:	d1f0      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d12:	4b3c      	ldr	r3, [pc, #240]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	220f      	movs	r2, #15
 8003d18:	4393      	bics	r3, r2
 8003d1a:	0019      	movs	r1, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d20:	4b38      	ldr	r3, [pc, #224]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003d22:	430a      	orrs	r2, r1
 8003d24:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d26:	4b37      	ldr	r3, [pc, #220]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	4a3a      	ldr	r2, [pc, #232]	; (8003e14 <HAL_RCC_OscConfig+0x630>)
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	0019      	movs	r1, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	4b32      	ldr	r3, [pc, #200]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d40:	4b30      	ldr	r3, [pc, #192]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	4b2f      	ldr	r3, [pc, #188]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003d46:	2180      	movs	r1, #128	; 0x80
 8003d48:	0449      	lsls	r1, r1, #17
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4e:	f7ff fa4f 	bl	80031f0 <HAL_GetTick>
 8003d52:	0003      	movs	r3, r0
 8003d54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d58:	f7ff fa4a 	bl	80031f0 <HAL_GetTick>
 8003d5c:	0002      	movs	r2, r0
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e047      	b.n	8003dfa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d6a:	4b26      	ldr	r3, [pc, #152]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	2380      	movs	r3, #128	; 0x80
 8003d70:	049b      	lsls	r3, r3, #18
 8003d72:	4013      	ands	r3, r2
 8003d74:	d0f0      	beq.n	8003d58 <HAL_RCC_OscConfig+0x574>
 8003d76:	e03f      	b.n	8003df8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d78:	4b22      	ldr	r3, [pc, #136]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	4b21      	ldr	r3, [pc, #132]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003d7e:	4924      	ldr	r1, [pc, #144]	; (8003e10 <HAL_RCC_OscConfig+0x62c>)
 8003d80:	400a      	ands	r2, r1
 8003d82:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d84:	f7ff fa34 	bl	80031f0 <HAL_GetTick>
 8003d88:	0003      	movs	r3, r0
 8003d8a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d8e:	f7ff fa2f 	bl	80031f0 <HAL_GetTick>
 8003d92:	0002      	movs	r2, r0
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e02c      	b.n	8003dfa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003da0:	4b18      	ldr	r3, [pc, #96]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	2380      	movs	r3, #128	; 0x80
 8003da6:	049b      	lsls	r3, r3, #18
 8003da8:	4013      	ands	r3, r2
 8003daa:	d1f0      	bne.n	8003d8e <HAL_RCC_OscConfig+0x5aa>
 8003dac:	e024      	b.n	8003df8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d101      	bne.n	8003dba <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e01f      	b.n	8003dfa <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003dba:	4b12      	ldr	r3, [pc, #72]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003dc0:	4b10      	ldr	r3, [pc, #64]	; (8003e04 <HAL_RCC_OscConfig+0x620>)
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	2380      	movs	r3, #128	; 0x80
 8003dca:	025b      	lsls	r3, r3, #9
 8003dcc:	401a      	ands	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d10e      	bne.n	8003df4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	220f      	movs	r2, #15
 8003dda:	401a      	ands	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d107      	bne.n	8003df4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	23f0      	movs	r3, #240	; 0xf0
 8003de8:	039b      	lsls	r3, r3, #14
 8003dea:	401a      	ands	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d001      	beq.n	8003df8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e000      	b.n	8003dfa <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	b008      	add	sp, #32
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	40021000 	.word	0x40021000
 8003e08:	00001388 	.word	0x00001388
 8003e0c:	efffffff 	.word	0xefffffff
 8003e10:	feffffff 	.word	0xfeffffff
 8003e14:	ffc2ffff 	.word	0xffc2ffff

08003e18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0b3      	b.n	8003f94 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e2c:	4b5b      	ldr	r3, [pc, #364]	; (8003f9c <HAL_RCC_ClockConfig+0x184>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2201      	movs	r2, #1
 8003e32:	4013      	ands	r3, r2
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d911      	bls.n	8003e5e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3a:	4b58      	ldr	r3, [pc, #352]	; (8003f9c <HAL_RCC_ClockConfig+0x184>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	4393      	bics	r3, r2
 8003e42:	0019      	movs	r1, r3
 8003e44:	4b55      	ldr	r3, [pc, #340]	; (8003f9c <HAL_RCC_ClockConfig+0x184>)
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4c:	4b53      	ldr	r3, [pc, #332]	; (8003f9c <HAL_RCC_ClockConfig+0x184>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2201      	movs	r2, #1
 8003e52:	4013      	ands	r3, r2
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d001      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e09a      	b.n	8003f94 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2202      	movs	r2, #2
 8003e64:	4013      	ands	r3, r2
 8003e66:	d015      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2204      	movs	r2, #4
 8003e6e:	4013      	ands	r3, r2
 8003e70:	d006      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003e72:	4b4b      	ldr	r3, [pc, #300]	; (8003fa0 <HAL_RCC_ClockConfig+0x188>)
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	4b4a      	ldr	r3, [pc, #296]	; (8003fa0 <HAL_RCC_ClockConfig+0x188>)
 8003e78:	21e0      	movs	r1, #224	; 0xe0
 8003e7a:	00c9      	lsls	r1, r1, #3
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e80:	4b47      	ldr	r3, [pc, #284]	; (8003fa0 <HAL_RCC_ClockConfig+0x188>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	22f0      	movs	r2, #240	; 0xf0
 8003e86:	4393      	bics	r3, r2
 8003e88:	0019      	movs	r1, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	4b44      	ldr	r3, [pc, #272]	; (8003fa0 <HAL_RCC_ClockConfig+0x188>)
 8003e90:	430a      	orrs	r2, r1
 8003e92:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	d040      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d107      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea6:	4b3e      	ldr	r3, [pc, #248]	; (8003fa0 <HAL_RCC_ClockConfig+0x188>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	2380      	movs	r3, #128	; 0x80
 8003eac:	029b      	lsls	r3, r3, #10
 8003eae:	4013      	ands	r3, r2
 8003eb0:	d114      	bne.n	8003edc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e06e      	b.n	8003f94 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d107      	bne.n	8003ece <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ebe:	4b38      	ldr	r3, [pc, #224]	; (8003fa0 <HAL_RCC_ClockConfig+0x188>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	2380      	movs	r3, #128	; 0x80
 8003ec4:	049b      	lsls	r3, r3, #18
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d108      	bne.n	8003edc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e062      	b.n	8003f94 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ece:	4b34      	ldr	r3, [pc, #208]	; (8003fa0 <HAL_RCC_ClockConfig+0x188>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	d101      	bne.n	8003edc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e05b      	b.n	8003f94 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003edc:	4b30      	ldr	r3, [pc, #192]	; (8003fa0 <HAL_RCC_ClockConfig+0x188>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2203      	movs	r2, #3
 8003ee2:	4393      	bics	r3, r2
 8003ee4:	0019      	movs	r1, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	4b2d      	ldr	r3, [pc, #180]	; (8003fa0 <HAL_RCC_ClockConfig+0x188>)
 8003eec:	430a      	orrs	r2, r1
 8003eee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ef0:	f7ff f97e 	bl	80031f0 <HAL_GetTick>
 8003ef4:	0003      	movs	r3, r0
 8003ef6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef8:	e009      	b.n	8003f0e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003efa:	f7ff f979 	bl	80031f0 <HAL_GetTick>
 8003efe:	0002      	movs	r2, r0
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	4a27      	ldr	r2, [pc, #156]	; (8003fa4 <HAL_RCC_ClockConfig+0x18c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e042      	b.n	8003f94 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0e:	4b24      	ldr	r3, [pc, #144]	; (8003fa0 <HAL_RCC_ClockConfig+0x188>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	220c      	movs	r2, #12
 8003f14:	401a      	ands	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d1ec      	bne.n	8003efa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f20:	4b1e      	ldr	r3, [pc, #120]	; (8003f9c <HAL_RCC_ClockConfig+0x184>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2201      	movs	r2, #1
 8003f26:	4013      	ands	r3, r2
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d211      	bcs.n	8003f52 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2e:	4b1b      	ldr	r3, [pc, #108]	; (8003f9c <HAL_RCC_ClockConfig+0x184>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2201      	movs	r2, #1
 8003f34:	4393      	bics	r3, r2
 8003f36:	0019      	movs	r1, r3
 8003f38:	4b18      	ldr	r3, [pc, #96]	; (8003f9c <HAL_RCC_ClockConfig+0x184>)
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f40:	4b16      	ldr	r3, [pc, #88]	; (8003f9c <HAL_RCC_ClockConfig+0x184>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2201      	movs	r2, #1
 8003f46:	4013      	ands	r3, r2
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d001      	beq.n	8003f52 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e020      	b.n	8003f94 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2204      	movs	r2, #4
 8003f58:	4013      	ands	r3, r2
 8003f5a:	d009      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003f5c:	4b10      	ldr	r3, [pc, #64]	; (8003fa0 <HAL_RCC_ClockConfig+0x188>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	4a11      	ldr	r2, [pc, #68]	; (8003fa8 <HAL_RCC_ClockConfig+0x190>)
 8003f62:	4013      	ands	r3, r2
 8003f64:	0019      	movs	r1, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	4b0d      	ldr	r3, [pc, #52]	; (8003fa0 <HAL_RCC_ClockConfig+0x188>)
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003f70:	f000 f820 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 8003f74:	0001      	movs	r1, r0
 8003f76:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <HAL_RCC_ClockConfig+0x188>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	091b      	lsrs	r3, r3, #4
 8003f7c:	220f      	movs	r2, #15
 8003f7e:	4013      	ands	r3, r2
 8003f80:	4a0a      	ldr	r2, [pc, #40]	; (8003fac <HAL_RCC_ClockConfig+0x194>)
 8003f82:	5cd3      	ldrb	r3, [r2, r3]
 8003f84:	000a      	movs	r2, r1
 8003f86:	40da      	lsrs	r2, r3
 8003f88:	4b09      	ldr	r3, [pc, #36]	; (8003fb0 <HAL_RCC_ClockConfig+0x198>)
 8003f8a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003f8c:	2003      	movs	r0, #3
 8003f8e:	f7ff f8e9 	bl	8003164 <HAL_InitTick>
  
  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	0018      	movs	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	b004      	add	sp, #16
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40022000 	.word	0x40022000
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	00001388 	.word	0x00001388
 8003fa8:	fffff8ff 	.word	0xfffff8ff
 8003fac:	08006404 	.word	0x08006404
 8003fb0:	20000008 	.word	0x20000008

08003fb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	617b      	str	r3, [r7, #20]
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003fce:	4b20      	ldr	r3, [pc, #128]	; (8004050 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	220c      	movs	r2, #12
 8003fd8:	4013      	ands	r3, r2
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d002      	beq.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x30>
 8003fde:	2b08      	cmp	r3, #8
 8003fe0:	d003      	beq.n	8003fea <HAL_RCC_GetSysClockFreq+0x36>
 8003fe2:	e02c      	b.n	800403e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fe4:	4b1b      	ldr	r3, [pc, #108]	; (8004054 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003fe6:	613b      	str	r3, [r7, #16]
      break;
 8003fe8:	e02c      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	0c9b      	lsrs	r3, r3, #18
 8003fee:	220f      	movs	r2, #15
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	4a19      	ldr	r2, [pc, #100]	; (8004058 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ff4:	5cd3      	ldrb	r3, [r2, r3]
 8003ff6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003ff8:	4b15      	ldr	r3, [pc, #84]	; (8004050 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffc:	220f      	movs	r2, #15
 8003ffe:	4013      	ands	r3, r2
 8004000:	4a16      	ldr	r2, [pc, #88]	; (800405c <HAL_RCC_GetSysClockFreq+0xa8>)
 8004002:	5cd3      	ldrb	r3, [r2, r3]
 8004004:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	2380      	movs	r3, #128	; 0x80
 800400a:	025b      	lsls	r3, r3, #9
 800400c:	4013      	ands	r3, r2
 800400e:	d009      	beq.n	8004024 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004010:	68b9      	ldr	r1, [r7, #8]
 8004012:	4810      	ldr	r0, [pc, #64]	; (8004054 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004014:	f7fc f878 	bl	8000108 <__udivsi3>
 8004018:	0003      	movs	r3, r0
 800401a:	001a      	movs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4353      	muls	r3, r2
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	e009      	b.n	8004038 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	000a      	movs	r2, r1
 8004028:	0152      	lsls	r2, r2, #5
 800402a:	1a52      	subs	r2, r2, r1
 800402c:	0193      	lsls	r3, r2, #6
 800402e:	1a9b      	subs	r3, r3, r2
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	185b      	adds	r3, r3, r1
 8004034:	021b      	lsls	r3, r3, #8
 8004036:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	613b      	str	r3, [r7, #16]
      break;
 800403c:	e002      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800403e:	4b05      	ldr	r3, [pc, #20]	; (8004054 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004040:	613b      	str	r3, [r7, #16]
      break;
 8004042:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004044:	693b      	ldr	r3, [r7, #16]
}
 8004046:	0018      	movs	r0, r3
 8004048:	46bd      	mov	sp, r7
 800404a:	b006      	add	sp, #24
 800404c:	bd80      	pop	{r7, pc}
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	40021000 	.word	0x40021000
 8004054:	007a1200 	.word	0x007a1200
 8004058:	0800641c 	.word	0x0800641c
 800405c:	0800642c 	.word	0x0800642c

08004060 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004064:	4b02      	ldr	r3, [pc, #8]	; (8004070 <HAL_RCC_GetHCLKFreq+0x10>)
 8004066:	681b      	ldr	r3, [r3, #0]
}
 8004068:	0018      	movs	r0, r3
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	20000008 	.word	0x20000008

08004074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004078:	f7ff fff2 	bl	8004060 <HAL_RCC_GetHCLKFreq>
 800407c:	0001      	movs	r1, r0
 800407e:	4b06      	ldr	r3, [pc, #24]	; (8004098 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	0a1b      	lsrs	r3, r3, #8
 8004084:	2207      	movs	r2, #7
 8004086:	4013      	ands	r3, r2
 8004088:	4a04      	ldr	r2, [pc, #16]	; (800409c <HAL_RCC_GetPCLK1Freq+0x28>)
 800408a:	5cd3      	ldrb	r3, [r2, r3]
 800408c:	40d9      	lsrs	r1, r3
 800408e:	000b      	movs	r3, r1
}    
 8004090:	0018      	movs	r0, r3
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	46c0      	nop			; (mov r8, r8)
 8004098:	40021000 	.word	0x40021000
 800409c:	08006414 	.word	0x08006414

080040a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	2380      	movs	r3, #128	; 0x80
 80040b6:	025b      	lsls	r3, r3, #9
 80040b8:	4013      	ands	r3, r2
 80040ba:	d100      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80040bc:	e08e      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80040be:	2017      	movs	r0, #23
 80040c0:	183b      	adds	r3, r7, r0
 80040c2:	2200      	movs	r2, #0
 80040c4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040c6:	4b57      	ldr	r3, [pc, #348]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040c8:	69da      	ldr	r2, [r3, #28]
 80040ca:	2380      	movs	r3, #128	; 0x80
 80040cc:	055b      	lsls	r3, r3, #21
 80040ce:	4013      	ands	r3, r2
 80040d0:	d110      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040d2:	4b54      	ldr	r3, [pc, #336]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040d4:	69da      	ldr	r2, [r3, #28]
 80040d6:	4b53      	ldr	r3, [pc, #332]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040d8:	2180      	movs	r1, #128	; 0x80
 80040da:	0549      	lsls	r1, r1, #21
 80040dc:	430a      	orrs	r2, r1
 80040de:	61da      	str	r2, [r3, #28]
 80040e0:	4b50      	ldr	r3, [pc, #320]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040e2:	69da      	ldr	r2, [r3, #28]
 80040e4:	2380      	movs	r3, #128	; 0x80
 80040e6:	055b      	lsls	r3, r3, #21
 80040e8:	4013      	ands	r3, r2
 80040ea:	60bb      	str	r3, [r7, #8]
 80040ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ee:	183b      	adds	r3, r7, r0
 80040f0:	2201      	movs	r2, #1
 80040f2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f4:	4b4c      	ldr	r3, [pc, #304]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	2380      	movs	r3, #128	; 0x80
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	4013      	ands	r3, r2
 80040fe:	d11a      	bne.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004100:	4b49      	ldr	r3, [pc, #292]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	4b48      	ldr	r3, [pc, #288]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004106:	2180      	movs	r1, #128	; 0x80
 8004108:	0049      	lsls	r1, r1, #1
 800410a:	430a      	orrs	r2, r1
 800410c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800410e:	f7ff f86f 	bl	80031f0 <HAL_GetTick>
 8004112:	0003      	movs	r3, r0
 8004114:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004116:	e008      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004118:	f7ff f86a 	bl	80031f0 <HAL_GetTick>
 800411c:	0002      	movs	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b64      	cmp	r3, #100	; 0x64
 8004124:	d901      	bls.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e077      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412a:	4b3f      	ldr	r3, [pc, #252]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	2380      	movs	r3, #128	; 0x80
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	4013      	ands	r3, r2
 8004134:	d0f0      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004136:	4b3b      	ldr	r3, [pc, #236]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004138:	6a1a      	ldr	r2, [r3, #32]
 800413a:	23c0      	movs	r3, #192	; 0xc0
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4013      	ands	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d034      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	23c0      	movs	r3, #192	; 0xc0
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4013      	ands	r3, r2
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	429a      	cmp	r2, r3
 8004156:	d02c      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004158:	4b32      	ldr	r3, [pc, #200]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	4a33      	ldr	r2, [pc, #204]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800415e:	4013      	ands	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004162:	4b30      	ldr	r3, [pc, #192]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004164:	6a1a      	ldr	r2, [r3, #32]
 8004166:	4b2f      	ldr	r3, [pc, #188]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004168:	2180      	movs	r1, #128	; 0x80
 800416a:	0249      	lsls	r1, r1, #9
 800416c:	430a      	orrs	r2, r1
 800416e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004170:	4b2c      	ldr	r3, [pc, #176]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004172:	6a1a      	ldr	r2, [r3, #32]
 8004174:	4b2b      	ldr	r3, [pc, #172]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004176:	492e      	ldr	r1, [pc, #184]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004178:	400a      	ands	r2, r1
 800417a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800417c:	4b29      	ldr	r3, [pc, #164]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2201      	movs	r2, #1
 8004186:	4013      	ands	r3, r2
 8004188:	d013      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418a:	f7ff f831 	bl	80031f0 <HAL_GetTick>
 800418e:	0003      	movs	r3, r0
 8004190:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004192:	e009      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004194:	f7ff f82c 	bl	80031f0 <HAL_GetTick>
 8004198:	0002      	movs	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	4a25      	ldr	r2, [pc, #148]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e038      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a8:	4b1e      	ldr	r3, [pc, #120]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	2202      	movs	r2, #2
 80041ae:	4013      	ands	r3, r2
 80041b0:	d0f0      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041b2:	4b1c      	ldr	r3, [pc, #112]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	4a1d      	ldr	r2, [pc, #116]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	0019      	movs	r1, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	4b18      	ldr	r3, [pc, #96]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80041c2:	430a      	orrs	r2, r1
 80041c4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041c6:	2317      	movs	r3, #23
 80041c8:	18fb      	adds	r3, r7, r3
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d105      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041d0:	4b14      	ldr	r3, [pc, #80]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80041d2:	69da      	ldr	r2, [r3, #28]
 80041d4:	4b13      	ldr	r3, [pc, #76]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80041d6:	4918      	ldr	r1, [pc, #96]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80041d8:	400a      	ands	r2, r1
 80041da:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2201      	movs	r2, #1
 80041e2:	4013      	ands	r3, r2
 80041e4:	d009      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041e6:	4b0f      	ldr	r3, [pc, #60]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	2203      	movs	r2, #3
 80041ec:	4393      	bics	r3, r2
 80041ee:	0019      	movs	r1, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80041f6:	430a      	orrs	r2, r1
 80041f8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2220      	movs	r2, #32
 8004200:	4013      	ands	r3, r2
 8004202:	d009      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004204:	4b07      	ldr	r3, [pc, #28]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004208:	2210      	movs	r2, #16
 800420a:	4393      	bics	r3, r2
 800420c:	0019      	movs	r1, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	4b04      	ldr	r3, [pc, #16]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004214:	430a      	orrs	r2, r1
 8004216:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	0018      	movs	r0, r3
 800421c:	46bd      	mov	sp, r7
 800421e:	b006      	add	sp, #24
 8004220:	bd80      	pop	{r7, pc}
 8004222:	46c0      	nop			; (mov r8, r8)
 8004224:	40021000 	.word	0x40021000
 8004228:	40007000 	.word	0x40007000
 800422c:	fffffcff 	.word	0xfffffcff
 8004230:	fffeffff 	.word	0xfffeffff
 8004234:	00001388 	.word	0x00001388
 8004238:	efffffff 	.word	0xefffffff

0800423c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e042      	b.n	80042d4 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	223d      	movs	r2, #61	; 0x3d
 8004252:	5c9b      	ldrb	r3, [r3, r2]
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d107      	bne.n	800426a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	223c      	movs	r2, #60	; 0x3c
 800425e:	2100      	movs	r1, #0
 8004260:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	0018      	movs	r0, r3
 8004266:	f7fe fde7 	bl	8002e38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	223d      	movs	r2, #61	; 0x3d
 800426e:	2102      	movs	r1, #2
 8004270:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3304      	adds	r3, #4
 800427a:	0019      	movs	r1, r3
 800427c:	0010      	movs	r0, r2
 800427e:	f000 fad7 	bl	8004830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2246      	movs	r2, #70	; 0x46
 8004286:	2101      	movs	r1, #1
 8004288:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	223e      	movs	r2, #62	; 0x3e
 800428e:	2101      	movs	r1, #1
 8004290:	5499      	strb	r1, [r3, r2]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	223f      	movs	r2, #63	; 0x3f
 8004296:	2101      	movs	r1, #1
 8004298:	5499      	strb	r1, [r3, r2]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2240      	movs	r2, #64	; 0x40
 800429e:	2101      	movs	r1, #1
 80042a0:	5499      	strb	r1, [r3, r2]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2241      	movs	r2, #65	; 0x41
 80042a6:	2101      	movs	r1, #1
 80042a8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2242      	movs	r2, #66	; 0x42
 80042ae:	2101      	movs	r1, #1
 80042b0:	5499      	strb	r1, [r3, r2]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2243      	movs	r2, #67	; 0x43
 80042b6:	2101      	movs	r1, #1
 80042b8:	5499      	strb	r1, [r3, r2]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2244      	movs	r2, #68	; 0x44
 80042be:	2101      	movs	r1, #1
 80042c0:	5499      	strb	r1, [r3, r2]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2245      	movs	r2, #69	; 0x45
 80042c6:	2101      	movs	r1, #1
 80042c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	223d      	movs	r2, #61	; 0x3d
 80042ce:	2101      	movs	r1, #1
 80042d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	0018      	movs	r0, r3
 80042d6:	46bd      	mov	sp, r7
 80042d8:	b002      	add	sp, #8
 80042da:	bd80      	pop	{r7, pc}

080042dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d108      	bne.n	80042fe <HAL_TIM_PWM_Start+0x22>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	223e      	movs	r2, #62	; 0x3e
 80042f0:	5c9b      	ldrb	r3, [r3, r2]
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	3b01      	subs	r3, #1
 80042f6:	1e5a      	subs	r2, r3, #1
 80042f8:	4193      	sbcs	r3, r2
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	e01f      	b.n	800433e <HAL_TIM_PWM_Start+0x62>
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b04      	cmp	r3, #4
 8004302:	d108      	bne.n	8004316 <HAL_TIM_PWM_Start+0x3a>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	223f      	movs	r2, #63	; 0x3f
 8004308:	5c9b      	ldrb	r3, [r3, r2]
 800430a:	b2db      	uxtb	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	1e5a      	subs	r2, r3, #1
 8004310:	4193      	sbcs	r3, r2
 8004312:	b2db      	uxtb	r3, r3
 8004314:	e013      	b.n	800433e <HAL_TIM_PWM_Start+0x62>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b08      	cmp	r3, #8
 800431a:	d108      	bne.n	800432e <HAL_TIM_PWM_Start+0x52>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2240      	movs	r2, #64	; 0x40
 8004320:	5c9b      	ldrb	r3, [r3, r2]
 8004322:	b2db      	uxtb	r3, r3
 8004324:	3b01      	subs	r3, #1
 8004326:	1e5a      	subs	r2, r3, #1
 8004328:	4193      	sbcs	r3, r2
 800432a:	b2db      	uxtb	r3, r3
 800432c:	e007      	b.n	800433e <HAL_TIM_PWM_Start+0x62>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2241      	movs	r2, #65	; 0x41
 8004332:	5c9b      	ldrb	r3, [r3, r2]
 8004334:	b2db      	uxtb	r3, r3
 8004336:	3b01      	subs	r3, #1
 8004338:	1e5a      	subs	r2, r3, #1
 800433a:	4193      	sbcs	r3, r2
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e064      	b.n	8004410 <HAL_TIM_PWM_Start+0x134>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d104      	bne.n	8004356 <HAL_TIM_PWM_Start+0x7a>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	223e      	movs	r2, #62	; 0x3e
 8004350:	2102      	movs	r1, #2
 8004352:	5499      	strb	r1, [r3, r2]
 8004354:	e013      	b.n	800437e <HAL_TIM_PWM_Start+0xa2>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b04      	cmp	r3, #4
 800435a:	d104      	bne.n	8004366 <HAL_TIM_PWM_Start+0x8a>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	223f      	movs	r2, #63	; 0x3f
 8004360:	2102      	movs	r1, #2
 8004362:	5499      	strb	r1, [r3, r2]
 8004364:	e00b      	b.n	800437e <HAL_TIM_PWM_Start+0xa2>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b08      	cmp	r3, #8
 800436a:	d104      	bne.n	8004376 <HAL_TIM_PWM_Start+0x9a>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2240      	movs	r2, #64	; 0x40
 8004370:	2102      	movs	r1, #2
 8004372:	5499      	strb	r1, [r3, r2]
 8004374:	e003      	b.n	800437e <HAL_TIM_PWM_Start+0xa2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2241      	movs	r2, #65	; 0x41
 800437a:	2102      	movs	r1, #2
 800437c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6839      	ldr	r1, [r7, #0]
 8004384:	2201      	movs	r2, #1
 8004386:	0018      	movs	r0, r3
 8004388:	f000 fc9e 	bl	8004cc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a21      	ldr	r2, [pc, #132]	; (8004418 <HAL_TIM_PWM_Start+0x13c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d009      	beq.n	80043aa <HAL_TIM_PWM_Start+0xce>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a20      	ldr	r2, [pc, #128]	; (800441c <HAL_TIM_PWM_Start+0x140>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d004      	beq.n	80043aa <HAL_TIM_PWM_Start+0xce>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a1e      	ldr	r2, [pc, #120]	; (8004420 <HAL_TIM_PWM_Start+0x144>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d101      	bne.n	80043ae <HAL_TIM_PWM_Start+0xd2>
 80043aa:	2301      	movs	r3, #1
 80043ac:	e000      	b.n	80043b0 <HAL_TIM_PWM_Start+0xd4>
 80043ae:	2300      	movs	r3, #0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d008      	beq.n	80043c6 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2180      	movs	r1, #128	; 0x80
 80043c0:	0209      	lsls	r1, r1, #8
 80043c2:	430a      	orrs	r2, r1
 80043c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a13      	ldr	r2, [pc, #76]	; (8004418 <HAL_TIM_PWM_Start+0x13c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d004      	beq.n	80043da <HAL_TIM_PWM_Start+0xfe>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a13      	ldr	r2, [pc, #76]	; (8004424 <HAL_TIM_PWM_Start+0x148>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d111      	bne.n	80043fe <HAL_TIM_PWM_Start+0x122>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	2207      	movs	r2, #7
 80043e2:	4013      	ands	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2b06      	cmp	r3, #6
 80043ea:	d010      	beq.n	800440e <HAL_TIM_PWM_Start+0x132>
    {
      __HAL_TIM_ENABLE(htim);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2101      	movs	r1, #1
 80043f8:	430a      	orrs	r2, r1
 80043fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043fc:	e007      	b.n	800440e <HAL_TIM_PWM_Start+0x132>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2101      	movs	r1, #1
 800440a:	430a      	orrs	r2, r1
 800440c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	0018      	movs	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	b004      	add	sp, #16
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40012c00 	.word	0x40012c00
 800441c:	40014400 	.word	0x40014400
 8004420:	40014800 	.word	0x40014800
 8004424:	40000400 	.word	0x40000400

08004428 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	2202      	movs	r2, #2
 8004438:	4013      	ands	r3, r2
 800443a:	2b02      	cmp	r3, #2
 800443c:	d124      	bne.n	8004488 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	2202      	movs	r2, #2
 8004446:	4013      	ands	r3, r2
 8004448:	2b02      	cmp	r3, #2
 800444a:	d11d      	bne.n	8004488 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2203      	movs	r2, #3
 8004452:	4252      	negs	r2, r2
 8004454:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	2203      	movs	r2, #3
 8004464:	4013      	ands	r3, r2
 8004466:	d004      	beq.n	8004472 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	0018      	movs	r0, r3
 800446c:	f000 f9c8 	bl	8004800 <HAL_TIM_IC_CaptureCallback>
 8004470:	e007      	b.n	8004482 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	0018      	movs	r0, r3
 8004476:	f000 f9bb 	bl	80047f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	0018      	movs	r0, r3
 800447e:	f000 f9c7 	bl	8004810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	2204      	movs	r2, #4
 8004490:	4013      	ands	r3, r2
 8004492:	2b04      	cmp	r3, #4
 8004494:	d125      	bne.n	80044e2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	2204      	movs	r2, #4
 800449e:	4013      	ands	r3, r2
 80044a0:	2b04      	cmp	r3, #4
 80044a2:	d11e      	bne.n	80044e2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2205      	movs	r2, #5
 80044aa:	4252      	negs	r2, r2
 80044ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2202      	movs	r2, #2
 80044b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699a      	ldr	r2, [r3, #24]
 80044ba:	23c0      	movs	r3, #192	; 0xc0
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4013      	ands	r3, r2
 80044c0:	d004      	beq.n	80044cc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	0018      	movs	r0, r3
 80044c6:	f000 f99b 	bl	8004800 <HAL_TIM_IC_CaptureCallback>
 80044ca:	e007      	b.n	80044dc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	0018      	movs	r0, r3
 80044d0:	f000 f98e 	bl	80047f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	0018      	movs	r0, r3
 80044d8:	f000 f99a 	bl	8004810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	2208      	movs	r2, #8
 80044ea:	4013      	ands	r3, r2
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d124      	bne.n	800453a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	2208      	movs	r2, #8
 80044f8:	4013      	ands	r3, r2
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	d11d      	bne.n	800453a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2209      	movs	r2, #9
 8004504:	4252      	negs	r2, r2
 8004506:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2204      	movs	r2, #4
 800450c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	2203      	movs	r2, #3
 8004516:	4013      	ands	r3, r2
 8004518:	d004      	beq.n	8004524 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	0018      	movs	r0, r3
 800451e:	f000 f96f 	bl	8004800 <HAL_TIM_IC_CaptureCallback>
 8004522:	e007      	b.n	8004534 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	0018      	movs	r0, r3
 8004528:	f000 f962 	bl	80047f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	0018      	movs	r0, r3
 8004530:	f000 f96e 	bl	8004810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	2210      	movs	r2, #16
 8004542:	4013      	ands	r3, r2
 8004544:	2b10      	cmp	r3, #16
 8004546:	d125      	bne.n	8004594 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	2210      	movs	r2, #16
 8004550:	4013      	ands	r3, r2
 8004552:	2b10      	cmp	r3, #16
 8004554:	d11e      	bne.n	8004594 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2211      	movs	r2, #17
 800455c:	4252      	negs	r2, r2
 800455e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2208      	movs	r2, #8
 8004564:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	69da      	ldr	r2, [r3, #28]
 800456c:	23c0      	movs	r3, #192	; 0xc0
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4013      	ands	r3, r2
 8004572:	d004      	beq.n	800457e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	0018      	movs	r0, r3
 8004578:	f000 f942 	bl	8004800 <HAL_TIM_IC_CaptureCallback>
 800457c:	e007      	b.n	800458e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	0018      	movs	r0, r3
 8004582:	f000 f935 	bl	80047f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	0018      	movs	r0, r3
 800458a:	f000 f941 	bl	8004810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	2201      	movs	r2, #1
 800459c:	4013      	ands	r3, r2
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d10f      	bne.n	80045c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	2201      	movs	r2, #1
 80045aa:	4013      	ands	r3, r2
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d108      	bne.n	80045c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2202      	movs	r2, #2
 80045b6:	4252      	negs	r2, r2
 80045b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	0018      	movs	r0, r3
 80045be:	f000 f90f 	bl	80047e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	2280      	movs	r2, #128	; 0x80
 80045ca:	4013      	ands	r3, r2
 80045cc:	2b80      	cmp	r3, #128	; 0x80
 80045ce:	d10f      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	2280      	movs	r2, #128	; 0x80
 80045d8:	4013      	ands	r3, r2
 80045da:	2b80      	cmp	r3, #128	; 0x80
 80045dc:	d108      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2281      	movs	r2, #129	; 0x81
 80045e4:	4252      	negs	r2, r2
 80045e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	0018      	movs	r0, r3
 80045ec:	f000 fc48 	bl	8004e80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	2240      	movs	r2, #64	; 0x40
 80045f8:	4013      	ands	r3, r2
 80045fa:	2b40      	cmp	r3, #64	; 0x40
 80045fc:	d10f      	bne.n	800461e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	2240      	movs	r2, #64	; 0x40
 8004606:	4013      	ands	r3, r2
 8004608:	2b40      	cmp	r3, #64	; 0x40
 800460a:	d108      	bne.n	800461e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2241      	movs	r2, #65	; 0x41
 8004612:	4252      	negs	r2, r2
 8004614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	0018      	movs	r0, r3
 800461a:	f000 f901 	bl	8004820 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	2220      	movs	r2, #32
 8004626:	4013      	ands	r3, r2
 8004628:	2b20      	cmp	r3, #32
 800462a:	d10f      	bne.n	800464c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	2220      	movs	r2, #32
 8004634:	4013      	ands	r3, r2
 8004636:	2b20      	cmp	r3, #32
 8004638:	d108      	bne.n	800464c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2221      	movs	r2, #33	; 0x21
 8004640:	4252      	negs	r2, r2
 8004642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	0018      	movs	r0, r3
 8004648:	f000 fc12 	bl	8004e70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800464c:	46c0      	nop			; (mov r8, r8)
 800464e:	46bd      	mov	sp, r7
 8004650:	b002      	add	sp, #8
 8004652:	bd80      	pop	{r7, pc}

08004654 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004660:	2317      	movs	r3, #23
 8004662:	18fb      	adds	r3, r7, r3
 8004664:	2200      	movs	r2, #0
 8004666:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	223c      	movs	r2, #60	; 0x3c
 800466c:	5c9b      	ldrb	r3, [r3, r2]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d101      	bne.n	8004676 <HAL_TIM_PWM_ConfigChannel+0x22>
 8004672:	2302      	movs	r3, #2
 8004674:	e0ad      	b.n	80047d2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	223c      	movs	r2, #60	; 0x3c
 800467a:	2101      	movs	r1, #1
 800467c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b0c      	cmp	r3, #12
 8004682:	d100      	bne.n	8004686 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004684:	e076      	b.n	8004774 <HAL_TIM_PWM_ConfigChannel+0x120>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b0c      	cmp	r3, #12
 800468a:	d900      	bls.n	800468e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800468c:	e095      	b.n	80047ba <HAL_TIM_PWM_ConfigChannel+0x166>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b08      	cmp	r3, #8
 8004692:	d04e      	beq.n	8004732 <HAL_TIM_PWM_ConfigChannel+0xde>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b08      	cmp	r3, #8
 8004698:	d900      	bls.n	800469c <HAL_TIM_PWM_ConfigChannel+0x48>
 800469a:	e08e      	b.n	80047ba <HAL_TIM_PWM_ConfigChannel+0x166>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_TIM_PWM_ConfigChannel+0x56>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d021      	beq.n	80046ec <HAL_TIM_PWM_ConfigChannel+0x98>
 80046a8:	e087      	b.n	80047ba <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	0011      	movs	r1, r2
 80046b2:	0018      	movs	r0, r3
 80046b4:	f000 f928 	bl	8004908 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2108      	movs	r1, #8
 80046c4:	430a      	orrs	r2, r1
 80046c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699a      	ldr	r2, [r3, #24]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2104      	movs	r1, #4
 80046d4:	438a      	bics	r2, r1
 80046d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6999      	ldr	r1, [r3, #24]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	691a      	ldr	r2, [r3, #16]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	619a      	str	r2, [r3, #24]
      break;
 80046ea:	e06b      	b.n	80047c4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	0011      	movs	r1, r2
 80046f4:	0018      	movs	r0, r3
 80046f6:	f000 f985 	bl	8004a04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	699a      	ldr	r2, [r3, #24]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2180      	movs	r1, #128	; 0x80
 8004706:	0109      	lsls	r1, r1, #4
 8004708:	430a      	orrs	r2, r1
 800470a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	699a      	ldr	r2, [r3, #24]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4931      	ldr	r1, [pc, #196]	; (80047dc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004718:	400a      	ands	r2, r1
 800471a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6999      	ldr	r1, [r3, #24]
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	021a      	lsls	r2, r3, #8
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	619a      	str	r2, [r3, #24]
      break;
 8004730:	e048      	b.n	80047c4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	0011      	movs	r1, r2
 800473a:	0018      	movs	r0, r3
 800473c:	f000 f9e0 	bl	8004b00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	69da      	ldr	r2, [r3, #28]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2108      	movs	r1, #8
 800474c:	430a      	orrs	r2, r1
 800474e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	69da      	ldr	r2, [r3, #28]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2104      	movs	r1, #4
 800475c:	438a      	bics	r2, r1
 800475e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	69d9      	ldr	r1, [r3, #28]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	691a      	ldr	r2, [r3, #16]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	61da      	str	r2, [r3, #28]
      break;
 8004772:	e027      	b.n	80047c4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	0011      	movs	r1, r2
 800477c:	0018      	movs	r0, r3
 800477e:	f000 fa3f 	bl	8004c00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69da      	ldr	r2, [r3, #28]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2180      	movs	r1, #128	; 0x80
 800478e:	0109      	lsls	r1, r1, #4
 8004790:	430a      	orrs	r2, r1
 8004792:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	69da      	ldr	r2, [r3, #28]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	490f      	ldr	r1, [pc, #60]	; (80047dc <HAL_TIM_PWM_ConfigChannel+0x188>)
 80047a0:	400a      	ands	r2, r1
 80047a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	69d9      	ldr	r1, [r3, #28]
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	021a      	lsls	r2, r3, #8
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	61da      	str	r2, [r3, #28]
      break;
 80047b8:	e004      	b.n	80047c4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80047ba:	2317      	movs	r3, #23
 80047bc:	18fb      	adds	r3, r7, r3
 80047be:	2201      	movs	r2, #1
 80047c0:	701a      	strb	r2, [r3, #0]
      break;
 80047c2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	223c      	movs	r2, #60	; 0x3c
 80047c8:	2100      	movs	r1, #0
 80047ca:	5499      	strb	r1, [r3, r2]

  return status;
 80047cc:	2317      	movs	r3, #23
 80047ce:	18fb      	adds	r3, r7, r3
 80047d0:	781b      	ldrb	r3, [r3, #0]
}
 80047d2:	0018      	movs	r0, r3
 80047d4:	46bd      	mov	sp, r7
 80047d6:	b006      	add	sp, #24
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	fffffbff 	.word	0xfffffbff

080047e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80047e8:	46c0      	nop			; (mov r8, r8)
 80047ea:	46bd      	mov	sp, r7
 80047ec:	b002      	add	sp, #8
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047f8:	46c0      	nop			; (mov r8, r8)
 80047fa:	46bd      	mov	sp, r7
 80047fc:	b002      	add	sp, #8
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004808:	46c0      	nop			; (mov r8, r8)
 800480a:	46bd      	mov	sp, r7
 800480c:	b002      	add	sp, #8
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004818:	46c0      	nop			; (mov r8, r8)
 800481a:	46bd      	mov	sp, r7
 800481c:	b002      	add	sp, #8
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004828:	46c0      	nop			; (mov r8, r8)
 800482a:	46bd      	mov	sp, r7
 800482c:	b002      	add	sp, #8
 800482e:	bd80      	pop	{r7, pc}

08004830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a2b      	ldr	r2, [pc, #172]	; (80048f0 <TIM_Base_SetConfig+0xc0>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d003      	beq.n	8004850 <TIM_Base_SetConfig+0x20>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a2a      	ldr	r2, [pc, #168]	; (80048f4 <TIM_Base_SetConfig+0xc4>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d108      	bne.n	8004862 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2270      	movs	r2, #112	; 0x70
 8004854:	4393      	bics	r3, r2
 8004856:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	4313      	orrs	r3, r2
 8004860:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a22      	ldr	r2, [pc, #136]	; (80048f0 <TIM_Base_SetConfig+0xc0>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d00f      	beq.n	800488a <TIM_Base_SetConfig+0x5a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a21      	ldr	r2, [pc, #132]	; (80048f4 <TIM_Base_SetConfig+0xc4>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d00b      	beq.n	800488a <TIM_Base_SetConfig+0x5a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a20      	ldr	r2, [pc, #128]	; (80048f8 <TIM_Base_SetConfig+0xc8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d007      	beq.n	800488a <TIM_Base_SetConfig+0x5a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a1f      	ldr	r2, [pc, #124]	; (80048fc <TIM_Base_SetConfig+0xcc>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d003      	beq.n	800488a <TIM_Base_SetConfig+0x5a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a1e      	ldr	r2, [pc, #120]	; (8004900 <TIM_Base_SetConfig+0xd0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d108      	bne.n	800489c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4a1d      	ldr	r2, [pc, #116]	; (8004904 <TIM_Base_SetConfig+0xd4>)
 800488e:	4013      	ands	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	4313      	orrs	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2280      	movs	r2, #128	; 0x80
 80048a0:	4393      	bics	r3, r2
 80048a2:	001a      	movs	r2, r3
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a0a      	ldr	r2, [pc, #40]	; (80048f0 <TIM_Base_SetConfig+0xc0>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d007      	beq.n	80048da <TIM_Base_SetConfig+0xaa>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a0b      	ldr	r2, [pc, #44]	; (80048fc <TIM_Base_SetConfig+0xcc>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d003      	beq.n	80048da <TIM_Base_SetConfig+0xaa>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a0a      	ldr	r2, [pc, #40]	; (8004900 <TIM_Base_SetConfig+0xd0>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d103      	bne.n	80048e2 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	691a      	ldr	r2, [r3, #16]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	615a      	str	r2, [r3, #20]
}
 80048e8:	46c0      	nop			; (mov r8, r8)
 80048ea:	46bd      	mov	sp, r7
 80048ec:	b004      	add	sp, #16
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40012c00 	.word	0x40012c00
 80048f4:	40000400 	.word	0x40000400
 80048f8:	40002000 	.word	0x40002000
 80048fc:	40014400 	.word	0x40014400
 8004900:	40014800 	.word	0x40014800
 8004904:	fffffcff 	.word	0xfffffcff

08004908 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	2201      	movs	r2, #1
 8004918:	4393      	bics	r3, r2
 800491a:	001a      	movs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2270      	movs	r2, #112	; 0x70
 8004936:	4393      	bics	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2203      	movs	r2, #3
 800493e:	4393      	bics	r3, r2
 8004940:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	4313      	orrs	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2202      	movs	r2, #2
 8004950:	4393      	bics	r3, r2
 8004952:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	4313      	orrs	r3, r2
 800495c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a23      	ldr	r2, [pc, #140]	; (80049f0 <TIM_OC1_SetConfig+0xe8>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d007      	beq.n	8004976 <TIM_OC1_SetConfig+0x6e>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a22      	ldr	r2, [pc, #136]	; (80049f4 <TIM_OC1_SetConfig+0xec>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d003      	beq.n	8004976 <TIM_OC1_SetConfig+0x6e>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a21      	ldr	r2, [pc, #132]	; (80049f8 <TIM_OC1_SetConfig+0xf0>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d10c      	bne.n	8004990 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2208      	movs	r2, #8
 800497a:	4393      	bics	r3, r2
 800497c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	4313      	orrs	r3, r2
 8004986:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	2204      	movs	r2, #4
 800498c:	4393      	bics	r3, r2
 800498e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a17      	ldr	r2, [pc, #92]	; (80049f0 <TIM_OC1_SetConfig+0xe8>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d007      	beq.n	80049a8 <TIM_OC1_SetConfig+0xa0>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a16      	ldr	r2, [pc, #88]	; (80049f4 <TIM_OC1_SetConfig+0xec>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d003      	beq.n	80049a8 <TIM_OC1_SetConfig+0xa0>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a15      	ldr	r2, [pc, #84]	; (80049f8 <TIM_OC1_SetConfig+0xf0>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d111      	bne.n	80049cc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	4a14      	ldr	r2, [pc, #80]	; (80049fc <TIM_OC1_SetConfig+0xf4>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	4a13      	ldr	r2, [pc, #76]	; (8004a00 <TIM_OC1_SetConfig+0xf8>)
 80049b4:	4013      	ands	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	4313      	orrs	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	621a      	str	r2, [r3, #32]
}
 80049e6:	46c0      	nop			; (mov r8, r8)
 80049e8:	46bd      	mov	sp, r7
 80049ea:	b006      	add	sp, #24
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	46c0      	nop			; (mov r8, r8)
 80049f0:	40012c00 	.word	0x40012c00
 80049f4:	40014400 	.word	0x40014400
 80049f8:	40014800 	.word	0x40014800
 80049fc:	fffffeff 	.word	0xfffffeff
 8004a00:	fffffdff 	.word	0xfffffdff

08004a04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	2210      	movs	r2, #16
 8004a14:	4393      	bics	r3, r2
 8004a16:	001a      	movs	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	4a2c      	ldr	r2, [pc, #176]	; (8004ae4 <TIM_OC2_SetConfig+0xe0>)
 8004a32:	4013      	ands	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4a2b      	ldr	r2, [pc, #172]	; (8004ae8 <TIM_OC2_SetConfig+0xe4>)
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	021b      	lsls	r3, r3, #8
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	4393      	bics	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a22      	ldr	r2, [pc, #136]	; (8004aec <TIM_OC2_SetConfig+0xe8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d10d      	bne.n	8004a82 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	2280      	movs	r2, #128	; 0x80
 8004a6a:	4393      	bics	r3, r2
 8004a6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	011b      	lsls	r3, r3, #4
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2240      	movs	r2, #64	; 0x40
 8004a7e:	4393      	bics	r3, r2
 8004a80:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a19      	ldr	r2, [pc, #100]	; (8004aec <TIM_OC2_SetConfig+0xe8>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d007      	beq.n	8004a9a <TIM_OC2_SetConfig+0x96>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a18      	ldr	r2, [pc, #96]	; (8004af0 <TIM_OC2_SetConfig+0xec>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d003      	beq.n	8004a9a <TIM_OC2_SetConfig+0x96>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a17      	ldr	r2, [pc, #92]	; (8004af4 <TIM_OC2_SetConfig+0xf0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d113      	bne.n	8004ac2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	4a16      	ldr	r2, [pc, #88]	; (8004af8 <TIM_OC2_SetConfig+0xf4>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	4a15      	ldr	r2, [pc, #84]	; (8004afc <TIM_OC2_SetConfig+0xf8>)
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	621a      	str	r2, [r3, #32]
}
 8004adc:	46c0      	nop			; (mov r8, r8)
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	b006      	add	sp, #24
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	ffff8fff 	.word	0xffff8fff
 8004ae8:	fffffcff 	.word	0xfffffcff
 8004aec:	40012c00 	.word	0x40012c00
 8004af0:	40014400 	.word	0x40014400
 8004af4:	40014800 	.word	0x40014800
 8004af8:	fffffbff 	.word	0xfffffbff
 8004afc:	fffff7ff 	.word	0xfffff7ff

08004b00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	4a33      	ldr	r2, [pc, #204]	; (8004bdc <TIM_OC3_SetConfig+0xdc>)
 8004b10:	401a      	ands	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2270      	movs	r2, #112	; 0x70
 8004b2c:	4393      	bics	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2203      	movs	r2, #3
 8004b34:	4393      	bics	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	4a26      	ldr	r2, [pc, #152]	; (8004be0 <TIM_OC3_SetConfig+0xe0>)
 8004b46:	4013      	ands	r3, r2
 8004b48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	021b      	lsls	r3, r3, #8
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a22      	ldr	r2, [pc, #136]	; (8004be4 <TIM_OC3_SetConfig+0xe4>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d10d      	bne.n	8004b7a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	4a21      	ldr	r2, [pc, #132]	; (8004be8 <TIM_OC3_SetConfig+0xe8>)
 8004b62:	4013      	ands	r3, r2
 8004b64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	021b      	lsls	r3, r3, #8
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	4a1d      	ldr	r2, [pc, #116]	; (8004bec <TIM_OC3_SetConfig+0xec>)
 8004b76:	4013      	ands	r3, r2
 8004b78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a19      	ldr	r2, [pc, #100]	; (8004be4 <TIM_OC3_SetConfig+0xe4>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d007      	beq.n	8004b92 <TIM_OC3_SetConfig+0x92>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a1a      	ldr	r2, [pc, #104]	; (8004bf0 <TIM_OC3_SetConfig+0xf0>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d003      	beq.n	8004b92 <TIM_OC3_SetConfig+0x92>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a19      	ldr	r2, [pc, #100]	; (8004bf4 <TIM_OC3_SetConfig+0xf4>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d113      	bne.n	8004bba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	4a18      	ldr	r2, [pc, #96]	; (8004bf8 <TIM_OC3_SetConfig+0xf8>)
 8004b96:	4013      	ands	r3, r2
 8004b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	4a17      	ldr	r2, [pc, #92]	; (8004bfc <TIM_OC3_SetConfig+0xfc>)
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	011b      	lsls	r3, r3, #4
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	621a      	str	r2, [r3, #32]
}
 8004bd4:	46c0      	nop			; (mov r8, r8)
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	b006      	add	sp, #24
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	fffffeff 	.word	0xfffffeff
 8004be0:	fffffdff 	.word	0xfffffdff
 8004be4:	40012c00 	.word	0x40012c00
 8004be8:	fffff7ff 	.word	0xfffff7ff
 8004bec:	fffffbff 	.word	0xfffffbff
 8004bf0:	40014400 	.word	0x40014400
 8004bf4:	40014800 	.word	0x40014800
 8004bf8:	ffffefff 	.word	0xffffefff
 8004bfc:	ffffdfff 	.word	0xffffdfff

08004c00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	4a26      	ldr	r2, [pc, #152]	; (8004ca8 <TIM_OC4_SetConfig+0xa8>)
 8004c10:	401a      	ands	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4a20      	ldr	r2, [pc, #128]	; (8004cac <TIM_OC4_SetConfig+0xac>)
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4a1f      	ldr	r2, [pc, #124]	; (8004cb0 <TIM_OC4_SetConfig+0xb0>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	021b      	lsls	r3, r3, #8
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	4a1b      	ldr	r2, [pc, #108]	; (8004cb4 <TIM_OC4_SetConfig+0xb4>)
 8004c48:	4013      	ands	r3, r2
 8004c4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	031b      	lsls	r3, r3, #12
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a17      	ldr	r2, [pc, #92]	; (8004cb8 <TIM_OC4_SetConfig+0xb8>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d007      	beq.n	8004c70 <TIM_OC4_SetConfig+0x70>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a16      	ldr	r2, [pc, #88]	; (8004cbc <TIM_OC4_SetConfig+0xbc>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d003      	beq.n	8004c70 <TIM_OC4_SetConfig+0x70>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a15      	ldr	r2, [pc, #84]	; (8004cc0 <TIM_OC4_SetConfig+0xc0>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d109      	bne.n	8004c84 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	4a14      	ldr	r2, [pc, #80]	; (8004cc4 <TIM_OC4_SetConfig+0xc4>)
 8004c74:	4013      	ands	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	019b      	lsls	r3, r3, #6
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685a      	ldr	r2, [r3, #4]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	621a      	str	r2, [r3, #32]
}
 8004c9e:	46c0      	nop			; (mov r8, r8)
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	b006      	add	sp, #24
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	46c0      	nop			; (mov r8, r8)
 8004ca8:	ffffefff 	.word	0xffffefff
 8004cac:	ffff8fff 	.word	0xffff8fff
 8004cb0:	fffffcff 	.word	0xfffffcff
 8004cb4:	ffffdfff 	.word	0xffffdfff
 8004cb8:	40012c00 	.word	0x40012c00
 8004cbc:	40014400 	.word	0x40014400
 8004cc0:	40014800 	.word	0x40014800
 8004cc4:	ffffbfff 	.word	0xffffbfff

08004cc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	221f      	movs	r2, #31
 8004cd8:	4013      	ands	r3, r2
 8004cda:	2201      	movs	r2, #1
 8004cdc:	409a      	lsls	r2, r3
 8004cde:	0013      	movs	r3, r2
 8004ce0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	43d2      	mvns	r2, r2
 8004cea:	401a      	ands	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6a1a      	ldr	r2, [r3, #32]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	211f      	movs	r1, #31
 8004cf8:	400b      	ands	r3, r1
 8004cfa:	6879      	ldr	r1, [r7, #4]
 8004cfc:	4099      	lsls	r1, r3
 8004cfe:	000b      	movs	r3, r1
 8004d00:	431a      	orrs	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	621a      	str	r2, [r3, #32]
}
 8004d06:	46c0      	nop			; (mov r8, r8)
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	b006      	add	sp, #24
 8004d0c:	bd80      	pop	{r7, pc}
	...

08004d10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	223c      	movs	r2, #60	; 0x3c
 8004d1e:	5c9b      	ldrb	r3, [r3, r2]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d101      	bne.n	8004d28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d24:	2302      	movs	r3, #2
 8004d26:	e03c      	b.n	8004da2 <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	223c      	movs	r2, #60	; 0x3c
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	223d      	movs	r2, #61	; 0x3d
 8004d34:	2102      	movs	r1, #2
 8004d36:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2270      	movs	r2, #112	; 0x70
 8004d4c:	4393      	bics	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a11      	ldr	r2, [pc, #68]	; (8004dac <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d004      	beq.n	8004d76 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a0f      	ldr	r2, [pc, #60]	; (8004db0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d10c      	bne.n	8004d90 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2280      	movs	r2, #128	; 0x80
 8004d7a:	4393      	bics	r3, r2
 8004d7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	223d      	movs	r2, #61	; 0x3d
 8004d94:	2101      	movs	r1, #1
 8004d96:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	223c      	movs	r2, #60	; 0x3c
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	0018      	movs	r0, r3
 8004da4:	46bd      	mov	sp, r7
 8004da6:	b004      	add	sp, #16
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	46c0      	nop			; (mov r8, r8)
 8004dac:	40012c00 	.word	0x40012c00
 8004db0:	40000400 	.word	0x40000400

08004db4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	223c      	movs	r2, #60	; 0x3c
 8004dc6:	5c9b      	ldrb	r3, [r3, r2]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d101      	bne.n	8004dd0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	e03e      	b.n	8004e4e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	223c      	movs	r2, #60	; 0x3c
 8004dd4:	2101      	movs	r1, #1
 8004dd6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	22ff      	movs	r2, #255	; 0xff
 8004ddc:	4393      	bics	r3, r2
 8004dde:	001a      	movs	r2, r3
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4a1b      	ldr	r2, [pc, #108]	; (8004e58 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004dec:	401a      	ands	r2, r3
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	4a18      	ldr	r2, [pc, #96]	; (8004e5c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8004dfa:	401a      	ands	r2, r3
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4a16      	ldr	r2, [pc, #88]	; (8004e60 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8004e08:	401a      	ands	r2, r3
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	4a13      	ldr	r2, [pc, #76]	; (8004e64 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8004e16:	401a      	ands	r2, r3
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4a11      	ldr	r2, [pc, #68]	; (8004e68 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004e24:	401a      	ands	r2, r3
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4a0e      	ldr	r2, [pc, #56]	; (8004e6c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8004e32:	401a      	ands	r2, r3
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	223c      	movs	r2, #60	; 0x3c
 8004e48:	2100      	movs	r1, #0
 8004e4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	0018      	movs	r0, r3
 8004e50:	46bd      	mov	sp, r7
 8004e52:	b004      	add	sp, #16
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	46c0      	nop			; (mov r8, r8)
 8004e58:	fffffcff 	.word	0xfffffcff
 8004e5c:	fffffbff 	.word	0xfffffbff
 8004e60:	fffff7ff 	.word	0xfffff7ff
 8004e64:	ffffefff 	.word	0xffffefff
 8004e68:	ffffdfff 	.word	0xffffdfff
 8004e6c:	ffffbfff 	.word	0xffffbfff

08004e70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e78:	46c0      	nop			; (mov r8, r8)
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	b002      	add	sp, #8
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e88:	46c0      	nop			; (mov r8, r8)
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	b002      	add	sp, #8
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e044      	b.n	8004f2c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d107      	bne.n	8004eba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2278      	movs	r2, #120	; 0x78
 8004eae:	2100      	movs	r1, #0
 8004eb0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	f7fe f88d 	bl	8002fd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2224      	movs	r2, #36	; 0x24
 8004ebe:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2101      	movs	r1, #1
 8004ecc:	438a      	bics	r2, r1
 8004ece:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	f000 fb6c 	bl	80055b0 <UART_SetConfig>
 8004ed8:	0003      	movs	r3, r0
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d101      	bne.n	8004ee2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e024      	b.n	8004f2c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	0018      	movs	r0, r3
 8004eee:	f000 fc87 	bl	8005800 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	490d      	ldr	r1, [pc, #52]	; (8004f34 <HAL_UART_Init+0xa4>)
 8004efe:	400a      	ands	r2, r1
 8004f00:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2108      	movs	r1, #8
 8004f0e:	438a      	bics	r2, r1
 8004f10:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	0018      	movs	r0, r3
 8004f26:	f000 fd1f 	bl	8005968 <UART_CheckIdleState>
 8004f2a:	0003      	movs	r3, r0
}
 8004f2c:	0018      	movs	r0, r3
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	b002      	add	sp, #8
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	fffff7ff 	.word	0xfffff7ff

08004f38 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b088      	sub	sp, #32
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	1dbb      	adds	r3, r7, #6
 8004f44:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2280      	movs	r2, #128	; 0x80
 8004f4a:	589b      	ldr	r3, [r3, r2]
 8004f4c:	2b20      	cmp	r3, #32
 8004f4e:	d145      	bne.n	8004fdc <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_UART_Receive_IT+0x26>
 8004f56:	1dbb      	adds	r3, r7, #6
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e03d      	b.n	8004fde <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	689a      	ldr	r2, [r3, #8]
 8004f66:	2380      	movs	r3, #128	; 0x80
 8004f68:	015b      	lsls	r3, r3, #5
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d109      	bne.n	8004f82 <HAL_UART_Receive_IT+0x4a>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d105      	bne.n	8004f82 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	d001      	beq.n	8004f82 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e02d      	b.n	8004fde <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	2380      	movs	r3, #128	; 0x80
 8004f90:	041b      	lsls	r3, r3, #16
 8004f92:	4013      	ands	r3, r2
 8004f94:	d019      	beq.n	8004fca <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f96:	f3ef 8310 	mrs	r3, PRIMASK
 8004f9a:	613b      	str	r3, [r7, #16]
  return(result);
 8004f9c:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f9e:	61fb      	str	r3, [r7, #28]
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	f383 8810 	msr	PRIMASK, r3
}
 8004faa:	46c0      	nop			; (mov r8, r8)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2180      	movs	r1, #128	; 0x80
 8004fb8:	04c9      	lsls	r1, r1, #19
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	f383 8810 	msr	PRIMASK, r3
}
 8004fc8:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004fca:	1dbb      	adds	r3, r7, #6
 8004fcc:	881a      	ldrh	r2, [r3, #0]
 8004fce:	68b9      	ldr	r1, [r7, #8]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	f000 fdda 	bl	8005b8c <UART_Start_Receive_IT>
 8004fd8:	0003      	movs	r3, r0
 8004fda:	e000      	b.n	8004fde <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8004fdc:	2302      	movs	r3, #2
  }
}
 8004fde:	0018      	movs	r0, r3
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	b008      	add	sp, #32
 8004fe4:	bd80      	pop	{r7, pc}
	...

08004fe8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fe8:	b590      	push	{r4, r7, lr}
 8004fea:	b0ab      	sub	sp, #172	; 0xac
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	22a4      	movs	r2, #164	; 0xa4
 8004ff8:	18b9      	adds	r1, r7, r2
 8004ffa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	20a0      	movs	r0, #160	; 0xa0
 8005004:	1839      	adds	r1, r7, r0
 8005006:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	219c      	movs	r1, #156	; 0x9c
 8005010:	1879      	adds	r1, r7, r1
 8005012:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005014:	0011      	movs	r1, r2
 8005016:	18bb      	adds	r3, r7, r2
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a99      	ldr	r2, [pc, #612]	; (8005280 <HAL_UART_IRQHandler+0x298>)
 800501c:	4013      	ands	r3, r2
 800501e:	2298      	movs	r2, #152	; 0x98
 8005020:	18bc      	adds	r4, r7, r2
 8005022:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005024:	18bb      	adds	r3, r7, r2
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d114      	bne.n	8005056 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800502c:	187b      	adds	r3, r7, r1
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2220      	movs	r2, #32
 8005032:	4013      	ands	r3, r2
 8005034:	d00f      	beq.n	8005056 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005036:	183b      	adds	r3, r7, r0
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2220      	movs	r2, #32
 800503c:	4013      	ands	r3, r2
 800503e:	d00a      	beq.n	8005056 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005044:	2b00      	cmp	r3, #0
 8005046:	d100      	bne.n	800504a <HAL_UART_IRQHandler+0x62>
 8005048:	e286      	b.n	8005558 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	0010      	movs	r0, r2
 8005052:	4798      	blx	r3
      }
      return;
 8005054:	e280      	b.n	8005558 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005056:	2398      	movs	r3, #152	; 0x98
 8005058:	18fb      	adds	r3, r7, r3
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d100      	bne.n	8005062 <HAL_UART_IRQHandler+0x7a>
 8005060:	e114      	b.n	800528c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005062:	239c      	movs	r3, #156	; 0x9c
 8005064:	18fb      	adds	r3, r7, r3
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2201      	movs	r2, #1
 800506a:	4013      	ands	r3, r2
 800506c:	d106      	bne.n	800507c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800506e:	23a0      	movs	r3, #160	; 0xa0
 8005070:	18fb      	adds	r3, r7, r3
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a83      	ldr	r2, [pc, #524]	; (8005284 <HAL_UART_IRQHandler+0x29c>)
 8005076:	4013      	ands	r3, r2
 8005078:	d100      	bne.n	800507c <HAL_UART_IRQHandler+0x94>
 800507a:	e107      	b.n	800528c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800507c:	23a4      	movs	r3, #164	; 0xa4
 800507e:	18fb      	adds	r3, r7, r3
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2201      	movs	r2, #1
 8005084:	4013      	ands	r3, r2
 8005086:	d012      	beq.n	80050ae <HAL_UART_IRQHandler+0xc6>
 8005088:	23a0      	movs	r3, #160	; 0xa0
 800508a:	18fb      	adds	r3, r7, r3
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	2380      	movs	r3, #128	; 0x80
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	4013      	ands	r3, r2
 8005094:	d00b      	beq.n	80050ae <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2201      	movs	r2, #1
 800509c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2284      	movs	r2, #132	; 0x84
 80050a2:	589b      	ldr	r3, [r3, r2]
 80050a4:	2201      	movs	r2, #1
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2184      	movs	r1, #132	; 0x84
 80050ac:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050ae:	23a4      	movs	r3, #164	; 0xa4
 80050b0:	18fb      	adds	r3, r7, r3
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2202      	movs	r2, #2
 80050b6:	4013      	ands	r3, r2
 80050b8:	d011      	beq.n	80050de <HAL_UART_IRQHandler+0xf6>
 80050ba:	239c      	movs	r3, #156	; 0x9c
 80050bc:	18fb      	adds	r3, r7, r3
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2201      	movs	r2, #1
 80050c2:	4013      	ands	r3, r2
 80050c4:	d00b      	beq.n	80050de <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2202      	movs	r2, #2
 80050cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2284      	movs	r2, #132	; 0x84
 80050d2:	589b      	ldr	r3, [r3, r2]
 80050d4:	2204      	movs	r2, #4
 80050d6:	431a      	orrs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2184      	movs	r1, #132	; 0x84
 80050dc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050de:	23a4      	movs	r3, #164	; 0xa4
 80050e0:	18fb      	adds	r3, r7, r3
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2204      	movs	r2, #4
 80050e6:	4013      	ands	r3, r2
 80050e8:	d011      	beq.n	800510e <HAL_UART_IRQHandler+0x126>
 80050ea:	239c      	movs	r3, #156	; 0x9c
 80050ec:	18fb      	adds	r3, r7, r3
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2201      	movs	r2, #1
 80050f2:	4013      	ands	r3, r2
 80050f4:	d00b      	beq.n	800510e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2204      	movs	r2, #4
 80050fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2284      	movs	r2, #132	; 0x84
 8005102:	589b      	ldr	r3, [r3, r2]
 8005104:	2202      	movs	r2, #2
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2184      	movs	r1, #132	; 0x84
 800510c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800510e:	23a4      	movs	r3, #164	; 0xa4
 8005110:	18fb      	adds	r3, r7, r3
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2208      	movs	r2, #8
 8005116:	4013      	ands	r3, r2
 8005118:	d017      	beq.n	800514a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800511a:	23a0      	movs	r3, #160	; 0xa0
 800511c:	18fb      	adds	r3, r7, r3
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2220      	movs	r2, #32
 8005122:	4013      	ands	r3, r2
 8005124:	d105      	bne.n	8005132 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005126:	239c      	movs	r3, #156	; 0x9c
 8005128:	18fb      	adds	r3, r7, r3
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2201      	movs	r2, #1
 800512e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005130:	d00b      	beq.n	800514a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2208      	movs	r2, #8
 8005138:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2284      	movs	r2, #132	; 0x84
 800513e:	589b      	ldr	r3, [r3, r2]
 8005140:	2208      	movs	r2, #8
 8005142:	431a      	orrs	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2184      	movs	r1, #132	; 0x84
 8005148:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800514a:	23a4      	movs	r3, #164	; 0xa4
 800514c:	18fb      	adds	r3, r7, r3
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	2380      	movs	r3, #128	; 0x80
 8005152:	011b      	lsls	r3, r3, #4
 8005154:	4013      	ands	r3, r2
 8005156:	d013      	beq.n	8005180 <HAL_UART_IRQHandler+0x198>
 8005158:	23a0      	movs	r3, #160	; 0xa0
 800515a:	18fb      	adds	r3, r7, r3
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	2380      	movs	r3, #128	; 0x80
 8005160:	04db      	lsls	r3, r3, #19
 8005162:	4013      	ands	r3, r2
 8005164:	d00c      	beq.n	8005180 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2280      	movs	r2, #128	; 0x80
 800516c:	0112      	lsls	r2, r2, #4
 800516e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2284      	movs	r2, #132	; 0x84
 8005174:	589b      	ldr	r3, [r3, r2]
 8005176:	2220      	movs	r2, #32
 8005178:	431a      	orrs	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2184      	movs	r1, #132	; 0x84
 800517e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2284      	movs	r2, #132	; 0x84
 8005184:	589b      	ldr	r3, [r3, r2]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d100      	bne.n	800518c <HAL_UART_IRQHandler+0x1a4>
 800518a:	e1e7      	b.n	800555c <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800518c:	23a4      	movs	r3, #164	; 0xa4
 800518e:	18fb      	adds	r3, r7, r3
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2220      	movs	r2, #32
 8005194:	4013      	ands	r3, r2
 8005196:	d00e      	beq.n	80051b6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005198:	23a0      	movs	r3, #160	; 0xa0
 800519a:	18fb      	adds	r3, r7, r3
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2220      	movs	r2, #32
 80051a0:	4013      	ands	r3, r2
 80051a2:	d008      	beq.n	80051b6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d004      	beq.n	80051b6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	0010      	movs	r0, r2
 80051b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2284      	movs	r2, #132	; 0x84
 80051ba:	589b      	ldr	r3, [r3, r2]
 80051bc:	2194      	movs	r1, #148	; 0x94
 80051be:	187a      	adds	r2, r7, r1
 80051c0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	2240      	movs	r2, #64	; 0x40
 80051ca:	4013      	ands	r3, r2
 80051cc:	2b40      	cmp	r3, #64	; 0x40
 80051ce:	d004      	beq.n	80051da <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80051d0:	187b      	adds	r3, r7, r1
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2228      	movs	r2, #40	; 0x28
 80051d6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051d8:	d047      	beq.n	800526a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	0018      	movs	r0, r3
 80051de:	f000 fd8b 	bl	8005cf8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	2240      	movs	r2, #64	; 0x40
 80051ea:	4013      	ands	r3, r2
 80051ec:	2b40      	cmp	r3, #64	; 0x40
 80051ee:	d137      	bne.n	8005260 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051f0:	f3ef 8310 	mrs	r3, PRIMASK
 80051f4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80051f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051f8:	2090      	movs	r0, #144	; 0x90
 80051fa:	183a      	adds	r2, r7, r0
 80051fc:	6013      	str	r3, [r2, #0]
 80051fe:	2301      	movs	r3, #1
 8005200:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005202:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005204:	f383 8810 	msr	PRIMASK, r3
}
 8005208:	46c0      	nop			; (mov r8, r8)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2140      	movs	r1, #64	; 0x40
 8005216:	438a      	bics	r2, r1
 8005218:	609a      	str	r2, [r3, #8]
 800521a:	183b      	adds	r3, r7, r0
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005220:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005222:	f383 8810 	msr	PRIMASK, r3
}
 8005226:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800522c:	2b00      	cmp	r3, #0
 800522e:	d012      	beq.n	8005256 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005234:	4a14      	ldr	r2, [pc, #80]	; (8005288 <HAL_UART_IRQHandler+0x2a0>)
 8005236:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800523c:	0018      	movs	r0, r3
 800523e:	f7fe f91b 	bl	8003478 <HAL_DMA_Abort_IT>
 8005242:	1e03      	subs	r3, r0, #0
 8005244:	d01a      	beq.n	800527c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800524a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005250:	0018      	movs	r0, r3
 8005252:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005254:	e012      	b.n	800527c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	0018      	movs	r0, r3
 800525a:	f000 f995 	bl	8005588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800525e:	e00d      	b.n	800527c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	0018      	movs	r0, r3
 8005264:	f000 f990 	bl	8005588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005268:	e008      	b.n	800527c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	0018      	movs	r0, r3
 800526e:	f000 f98b 	bl	8005588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2284      	movs	r2, #132	; 0x84
 8005276:	2100      	movs	r1, #0
 8005278:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800527a:	e16f      	b.n	800555c <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800527c:	46c0      	nop			; (mov r8, r8)
    return;
 800527e:	e16d      	b.n	800555c <HAL_UART_IRQHandler+0x574>
 8005280:	0000080f 	.word	0x0000080f
 8005284:	04000120 	.word	0x04000120
 8005288:	08005dc1 	.word	0x08005dc1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005290:	2b01      	cmp	r3, #1
 8005292:	d000      	beq.n	8005296 <HAL_UART_IRQHandler+0x2ae>
 8005294:	e139      	b.n	800550a <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005296:	23a4      	movs	r3, #164	; 0xa4
 8005298:	18fb      	adds	r3, r7, r3
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2210      	movs	r2, #16
 800529e:	4013      	ands	r3, r2
 80052a0:	d100      	bne.n	80052a4 <HAL_UART_IRQHandler+0x2bc>
 80052a2:	e132      	b.n	800550a <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80052a4:	23a0      	movs	r3, #160	; 0xa0
 80052a6:	18fb      	adds	r3, r7, r3
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2210      	movs	r2, #16
 80052ac:	4013      	ands	r3, r2
 80052ae:	d100      	bne.n	80052b2 <HAL_UART_IRQHandler+0x2ca>
 80052b0:	e12b      	b.n	800550a <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2210      	movs	r2, #16
 80052b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	2240      	movs	r2, #64	; 0x40
 80052c2:	4013      	ands	r3, r2
 80052c4:	2b40      	cmp	r3, #64	; 0x40
 80052c6:	d000      	beq.n	80052ca <HAL_UART_IRQHandler+0x2e2>
 80052c8:	e09f      	b.n	800540a <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	217e      	movs	r1, #126	; 0x7e
 80052d4:	187b      	adds	r3, r7, r1
 80052d6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80052d8:	187b      	adds	r3, r7, r1
 80052da:	881b      	ldrh	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d100      	bne.n	80052e2 <HAL_UART_IRQHandler+0x2fa>
 80052e0:	e13e      	b.n	8005560 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2258      	movs	r2, #88	; 0x58
 80052e6:	5a9b      	ldrh	r3, [r3, r2]
 80052e8:	187a      	adds	r2, r7, r1
 80052ea:	8812      	ldrh	r2, [r2, #0]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d300      	bcc.n	80052f2 <HAL_UART_IRQHandler+0x30a>
 80052f0:	e136      	b.n	8005560 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	187a      	adds	r2, r7, r1
 80052f6:	215a      	movs	r1, #90	; 0x5a
 80052f8:	8812      	ldrh	r2, [r2, #0]
 80052fa:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	2b20      	cmp	r3, #32
 8005304:	d06f      	beq.n	80053e6 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005306:	f3ef 8310 	mrs	r3, PRIMASK
 800530a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800530c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800530e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005310:	2301      	movs	r3, #1
 8005312:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005316:	f383 8810 	msr	PRIMASK, r3
}
 800531a:	46c0      	nop			; (mov r8, r8)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4992      	ldr	r1, [pc, #584]	; (8005570 <HAL_UART_IRQHandler+0x588>)
 8005328:	400a      	ands	r2, r1
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800532e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005332:	f383 8810 	msr	PRIMASK, r3
}
 8005336:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005338:	f3ef 8310 	mrs	r3, PRIMASK
 800533c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800533e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005340:	677b      	str	r3, [r7, #116]	; 0x74
 8005342:	2301      	movs	r3, #1
 8005344:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005348:	f383 8810 	msr	PRIMASK, r3
}
 800534c:	46c0      	nop			; (mov r8, r8)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2101      	movs	r1, #1
 800535a:	438a      	bics	r2, r1
 800535c:	609a      	str	r2, [r3, #8]
 800535e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005360:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005364:	f383 8810 	msr	PRIMASK, r3
}
 8005368:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800536a:	f3ef 8310 	mrs	r3, PRIMASK
 800536e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005370:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005372:	673b      	str	r3, [r7, #112]	; 0x70
 8005374:	2301      	movs	r3, #1
 8005376:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800537a:	f383 8810 	msr	PRIMASK, r3
}
 800537e:	46c0      	nop			; (mov r8, r8)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2140      	movs	r1, #64	; 0x40
 800538c:	438a      	bics	r2, r1
 800538e:	609a      	str	r2, [r3, #8]
 8005390:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005392:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005396:	f383 8810 	msr	PRIMASK, r3
}
 800539a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2280      	movs	r2, #128	; 0x80
 80053a0:	2120      	movs	r1, #32
 80053a2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053aa:	f3ef 8310 	mrs	r3, PRIMASK
 80053ae:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80053b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053b4:	2301      	movs	r3, #1
 80053b6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053ba:	f383 8810 	msr	PRIMASK, r3
}
 80053be:	46c0      	nop			; (mov r8, r8)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2110      	movs	r1, #16
 80053cc:	438a      	bics	r2, r1
 80053ce:	601a      	str	r2, [r3, #0]
 80053d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053d6:	f383 8810 	msr	PRIMASK, r3
}
 80053da:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053e0:	0018      	movs	r0, r3
 80053e2:	f7fe f811 	bl	8003408 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2202      	movs	r2, #2
 80053ea:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2258      	movs	r2, #88	; 0x58
 80053f0:	5a9a      	ldrh	r2, [r3, r2]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	215a      	movs	r1, #90	; 0x5a
 80053f6:	5a5b      	ldrh	r3, [r3, r1]
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	0011      	movs	r1, r2
 8005402:	0018      	movs	r0, r3
 8005404:	f000 f8c8 	bl	8005598 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005408:	e0aa      	b.n	8005560 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2258      	movs	r2, #88	; 0x58
 800540e:	5a99      	ldrh	r1, [r3, r2]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	225a      	movs	r2, #90	; 0x5a
 8005414:	5a9b      	ldrh	r3, [r3, r2]
 8005416:	b29a      	uxth	r2, r3
 8005418:	208e      	movs	r0, #142	; 0x8e
 800541a:	183b      	adds	r3, r7, r0
 800541c:	1a8a      	subs	r2, r1, r2
 800541e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	225a      	movs	r2, #90	; 0x5a
 8005424:	5a9b      	ldrh	r3, [r3, r2]
 8005426:	b29b      	uxth	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d100      	bne.n	800542e <HAL_UART_IRQHandler+0x446>
 800542c:	e09a      	b.n	8005564 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 800542e:	183b      	adds	r3, r7, r0
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d100      	bne.n	8005438 <HAL_UART_IRQHandler+0x450>
 8005436:	e095      	b.n	8005564 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005438:	f3ef 8310 	mrs	r3, PRIMASK
 800543c:	60fb      	str	r3, [r7, #12]
  return(result);
 800543e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005440:	2488      	movs	r4, #136	; 0x88
 8005442:	193a      	adds	r2, r7, r4
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	2301      	movs	r3, #1
 8005448:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	f383 8810 	msr	PRIMASK, r3
}
 8005450:	46c0      	nop			; (mov r8, r8)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4945      	ldr	r1, [pc, #276]	; (8005574 <HAL_UART_IRQHandler+0x58c>)
 800545e:	400a      	ands	r2, r1
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	193b      	adds	r3, r7, r4
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f383 8810 	msr	PRIMASK, r3
}
 800546e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005470:	f3ef 8310 	mrs	r3, PRIMASK
 8005474:	61bb      	str	r3, [r7, #24]
  return(result);
 8005476:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005478:	2484      	movs	r4, #132	; 0x84
 800547a:	193a      	adds	r2, r7, r4
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	2301      	movs	r3, #1
 8005480:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	f383 8810 	msr	PRIMASK, r3
}
 8005488:	46c0      	nop			; (mov r8, r8)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	689a      	ldr	r2, [r3, #8]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2101      	movs	r1, #1
 8005496:	438a      	bics	r2, r1
 8005498:	609a      	str	r2, [r3, #8]
 800549a:	193b      	adds	r3, r7, r4
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	f383 8810 	msr	PRIMASK, r3
}
 80054a6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2280      	movs	r2, #128	; 0x80
 80054ac:	2120      	movs	r1, #32
 80054ae:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054bc:	f3ef 8310 	mrs	r3, PRIMASK
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054c4:	2480      	movs	r4, #128	; 0x80
 80054c6:	193a      	adds	r2, r7, r4
 80054c8:	6013      	str	r3, [r2, #0]
 80054ca:	2301      	movs	r3, #1
 80054cc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d0:	f383 8810 	msr	PRIMASK, r3
}
 80054d4:	46c0      	nop			; (mov r8, r8)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2110      	movs	r1, #16
 80054e2:	438a      	bics	r2, r1
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	193b      	adds	r3, r7, r4
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ee:	f383 8810 	msr	PRIMASK, r3
}
 80054f2:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054fa:	183b      	adds	r3, r7, r0
 80054fc:	881a      	ldrh	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	0011      	movs	r1, r2
 8005502:	0018      	movs	r0, r3
 8005504:	f000 f848 	bl	8005598 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005508:	e02c      	b.n	8005564 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800550a:	23a4      	movs	r3, #164	; 0xa4
 800550c:	18fb      	adds	r3, r7, r3
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2280      	movs	r2, #128	; 0x80
 8005512:	4013      	ands	r3, r2
 8005514:	d00f      	beq.n	8005536 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005516:	23a0      	movs	r3, #160	; 0xa0
 8005518:	18fb      	adds	r3, r7, r3
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2280      	movs	r2, #128	; 0x80
 800551e:	4013      	ands	r3, r2
 8005520:	d009      	beq.n	8005536 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005526:	2b00      	cmp	r3, #0
 8005528:	d01e      	beq.n	8005568 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	0010      	movs	r0, r2
 8005532:	4798      	blx	r3
    }
    return;
 8005534:	e018      	b.n	8005568 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005536:	23a4      	movs	r3, #164	; 0xa4
 8005538:	18fb      	adds	r3, r7, r3
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2240      	movs	r2, #64	; 0x40
 800553e:	4013      	ands	r3, r2
 8005540:	d013      	beq.n	800556a <HAL_UART_IRQHandler+0x582>
 8005542:	23a0      	movs	r3, #160	; 0xa0
 8005544:	18fb      	adds	r3, r7, r3
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2240      	movs	r2, #64	; 0x40
 800554a:	4013      	ands	r3, r2
 800554c:	d00d      	beq.n	800556a <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	0018      	movs	r0, r3
 8005552:	f000 fc4c 	bl	8005dee <UART_EndTransmit_IT>
    return;
 8005556:	e008      	b.n	800556a <HAL_UART_IRQHandler+0x582>
      return;
 8005558:	46c0      	nop			; (mov r8, r8)
 800555a:	e006      	b.n	800556a <HAL_UART_IRQHandler+0x582>
    return;
 800555c:	46c0      	nop			; (mov r8, r8)
 800555e:	e004      	b.n	800556a <HAL_UART_IRQHandler+0x582>
      return;
 8005560:	46c0      	nop			; (mov r8, r8)
 8005562:	e002      	b.n	800556a <HAL_UART_IRQHandler+0x582>
      return;
 8005564:	46c0      	nop			; (mov r8, r8)
 8005566:	e000      	b.n	800556a <HAL_UART_IRQHandler+0x582>
    return;
 8005568:	46c0      	nop			; (mov r8, r8)
  }

}
 800556a:	46bd      	mov	sp, r7
 800556c:	b02b      	add	sp, #172	; 0xac
 800556e:	bd90      	pop	{r4, r7, pc}
 8005570:	fffffeff 	.word	0xfffffeff
 8005574:	fffffedf 	.word	0xfffffedf

08005578 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005580:	46c0      	nop			; (mov r8, r8)
 8005582:	46bd      	mov	sp, r7
 8005584:	b002      	add	sp, #8
 8005586:	bd80      	pop	{r7, pc}

08005588 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005590:	46c0      	nop			; (mov r8, r8)
 8005592:	46bd      	mov	sp, r7
 8005594:	b002      	add	sp, #8
 8005596:	bd80      	pop	{r7, pc}

08005598 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	000a      	movs	r2, r1
 80055a2:	1cbb      	adds	r3, r7, #2
 80055a4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055a6:	46c0      	nop			; (mov r8, r8)
 80055a8:	46bd      	mov	sp, r7
 80055aa:	b002      	add	sp, #8
 80055ac:	bd80      	pop	{r7, pc}
	...

080055b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b088      	sub	sp, #32
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055b8:	231e      	movs	r3, #30
 80055ba:	18fb      	adds	r3, r7, r3
 80055bc:	2200      	movs	r2, #0
 80055be:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	431a      	orrs	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	431a      	orrs	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a83      	ldr	r2, [pc, #524]	; (80057ec <UART_SetConfig+0x23c>)
 80055e0:	4013      	ands	r3, r2
 80055e2:	0019      	movs	r1, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	4a7e      	ldr	r2, [pc, #504]	; (80057f0 <UART_SetConfig+0x240>)
 80055f6:	4013      	ands	r3, r2
 80055f8:	0019      	movs	r1, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68da      	ldr	r2, [r3, #12]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	4313      	orrs	r3, r2
 8005614:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	4a75      	ldr	r2, [pc, #468]	; (80057f4 <UART_SetConfig+0x244>)
 800561e:	4013      	ands	r3, r2
 8005620:	0019      	movs	r1, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	430a      	orrs	r2, r1
 800562a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800562c:	4b72      	ldr	r3, [pc, #456]	; (80057f8 <UART_SetConfig+0x248>)
 800562e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005630:	2203      	movs	r2, #3
 8005632:	4013      	ands	r3, r2
 8005634:	2b03      	cmp	r3, #3
 8005636:	d00d      	beq.n	8005654 <UART_SetConfig+0xa4>
 8005638:	d81b      	bhi.n	8005672 <UART_SetConfig+0xc2>
 800563a:	2b02      	cmp	r3, #2
 800563c:	d014      	beq.n	8005668 <UART_SetConfig+0xb8>
 800563e:	d818      	bhi.n	8005672 <UART_SetConfig+0xc2>
 8005640:	2b00      	cmp	r3, #0
 8005642:	d002      	beq.n	800564a <UART_SetConfig+0x9a>
 8005644:	2b01      	cmp	r3, #1
 8005646:	d00a      	beq.n	800565e <UART_SetConfig+0xae>
 8005648:	e013      	b.n	8005672 <UART_SetConfig+0xc2>
 800564a:	231f      	movs	r3, #31
 800564c:	18fb      	adds	r3, r7, r3
 800564e:	2200      	movs	r2, #0
 8005650:	701a      	strb	r2, [r3, #0]
 8005652:	e012      	b.n	800567a <UART_SetConfig+0xca>
 8005654:	231f      	movs	r3, #31
 8005656:	18fb      	adds	r3, r7, r3
 8005658:	2202      	movs	r2, #2
 800565a:	701a      	strb	r2, [r3, #0]
 800565c:	e00d      	b.n	800567a <UART_SetConfig+0xca>
 800565e:	231f      	movs	r3, #31
 8005660:	18fb      	adds	r3, r7, r3
 8005662:	2204      	movs	r2, #4
 8005664:	701a      	strb	r2, [r3, #0]
 8005666:	e008      	b.n	800567a <UART_SetConfig+0xca>
 8005668:	231f      	movs	r3, #31
 800566a:	18fb      	adds	r3, r7, r3
 800566c:	2208      	movs	r2, #8
 800566e:	701a      	strb	r2, [r3, #0]
 8005670:	e003      	b.n	800567a <UART_SetConfig+0xca>
 8005672:	231f      	movs	r3, #31
 8005674:	18fb      	adds	r3, r7, r3
 8005676:	2210      	movs	r2, #16
 8005678:	701a      	strb	r2, [r3, #0]
 800567a:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	69da      	ldr	r2, [r3, #28]
 8005680:	2380      	movs	r3, #128	; 0x80
 8005682:	021b      	lsls	r3, r3, #8
 8005684:	429a      	cmp	r2, r3
 8005686:	d15c      	bne.n	8005742 <UART_SetConfig+0x192>
  {
    switch (clocksource)
 8005688:	231f      	movs	r3, #31
 800568a:	18fb      	adds	r3, r7, r3
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b08      	cmp	r3, #8
 8005690:	d015      	beq.n	80056be <UART_SetConfig+0x10e>
 8005692:	dc18      	bgt.n	80056c6 <UART_SetConfig+0x116>
 8005694:	2b04      	cmp	r3, #4
 8005696:	d00d      	beq.n	80056b4 <UART_SetConfig+0x104>
 8005698:	dc15      	bgt.n	80056c6 <UART_SetConfig+0x116>
 800569a:	2b00      	cmp	r3, #0
 800569c:	d002      	beq.n	80056a4 <UART_SetConfig+0xf4>
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d005      	beq.n	80056ae <UART_SetConfig+0xfe>
 80056a2:	e010      	b.n	80056c6 <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056a4:	f7fe fce6 	bl	8004074 <HAL_RCC_GetPCLK1Freq>
 80056a8:	0003      	movs	r3, r0
 80056aa:	61bb      	str	r3, [r7, #24]
        break;
 80056ac:	e012      	b.n	80056d4 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056ae:	4b53      	ldr	r3, [pc, #332]	; (80057fc <UART_SetConfig+0x24c>)
 80056b0:	61bb      	str	r3, [r7, #24]
        break;
 80056b2:	e00f      	b.n	80056d4 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056b4:	f7fe fc7e 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 80056b8:	0003      	movs	r3, r0
 80056ba:	61bb      	str	r3, [r7, #24]
        break;
 80056bc:	e00a      	b.n	80056d4 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056be:	2380      	movs	r3, #128	; 0x80
 80056c0:	021b      	lsls	r3, r3, #8
 80056c2:	61bb      	str	r3, [r7, #24]
        break;
 80056c4:	e006      	b.n	80056d4 <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056ca:	231e      	movs	r3, #30
 80056cc:	18fb      	adds	r3, r7, r3
 80056ce:	2201      	movs	r2, #1
 80056d0:	701a      	strb	r2, [r3, #0]
        break;
 80056d2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d100      	bne.n	80056dc <UART_SetConfig+0x12c>
 80056da:	e07a      	b.n	80057d2 <UART_SetConfig+0x222>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	005a      	lsls	r2, r3, #1
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	085b      	lsrs	r3, r3, #1
 80056e6:	18d2      	adds	r2, r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	0019      	movs	r1, r3
 80056ee:	0010      	movs	r0, r2
 80056f0:	f7fa fd0a 	bl	8000108 <__udivsi3>
 80056f4:	0003      	movs	r3, r0
 80056f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	2b0f      	cmp	r3, #15
 80056fc:	d91c      	bls.n	8005738 <UART_SetConfig+0x188>
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	2380      	movs	r3, #128	; 0x80
 8005702:	025b      	lsls	r3, r3, #9
 8005704:	429a      	cmp	r2, r3
 8005706:	d217      	bcs.n	8005738 <UART_SetConfig+0x188>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	b29a      	uxth	r2, r3
 800570c:	200e      	movs	r0, #14
 800570e:	183b      	adds	r3, r7, r0
 8005710:	210f      	movs	r1, #15
 8005712:	438a      	bics	r2, r1
 8005714:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	085b      	lsrs	r3, r3, #1
 800571a:	b29b      	uxth	r3, r3
 800571c:	2207      	movs	r2, #7
 800571e:	4013      	ands	r3, r2
 8005720:	b299      	uxth	r1, r3
 8005722:	183b      	adds	r3, r7, r0
 8005724:	183a      	adds	r2, r7, r0
 8005726:	8812      	ldrh	r2, [r2, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	183a      	adds	r2, r7, r0
 8005732:	8812      	ldrh	r2, [r2, #0]
 8005734:	60da      	str	r2, [r3, #12]
 8005736:	e04c      	b.n	80057d2 <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 8005738:	231e      	movs	r3, #30
 800573a:	18fb      	adds	r3, r7, r3
 800573c:	2201      	movs	r2, #1
 800573e:	701a      	strb	r2, [r3, #0]
 8005740:	e047      	b.n	80057d2 <UART_SetConfig+0x222>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005742:	231f      	movs	r3, #31
 8005744:	18fb      	adds	r3, r7, r3
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b08      	cmp	r3, #8
 800574a:	d015      	beq.n	8005778 <UART_SetConfig+0x1c8>
 800574c:	dc18      	bgt.n	8005780 <UART_SetConfig+0x1d0>
 800574e:	2b04      	cmp	r3, #4
 8005750:	d00d      	beq.n	800576e <UART_SetConfig+0x1be>
 8005752:	dc15      	bgt.n	8005780 <UART_SetConfig+0x1d0>
 8005754:	2b00      	cmp	r3, #0
 8005756:	d002      	beq.n	800575e <UART_SetConfig+0x1ae>
 8005758:	2b02      	cmp	r3, #2
 800575a:	d005      	beq.n	8005768 <UART_SetConfig+0x1b8>
 800575c:	e010      	b.n	8005780 <UART_SetConfig+0x1d0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800575e:	f7fe fc89 	bl	8004074 <HAL_RCC_GetPCLK1Freq>
 8005762:	0003      	movs	r3, r0
 8005764:	61bb      	str	r3, [r7, #24]
        break;
 8005766:	e012      	b.n	800578e <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005768:	4b24      	ldr	r3, [pc, #144]	; (80057fc <UART_SetConfig+0x24c>)
 800576a:	61bb      	str	r3, [r7, #24]
        break;
 800576c:	e00f      	b.n	800578e <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800576e:	f7fe fc21 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 8005772:	0003      	movs	r3, r0
 8005774:	61bb      	str	r3, [r7, #24]
        break;
 8005776:	e00a      	b.n	800578e <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005778:	2380      	movs	r3, #128	; 0x80
 800577a:	021b      	lsls	r3, r3, #8
 800577c:	61bb      	str	r3, [r7, #24]
        break;
 800577e:	e006      	b.n	800578e <UART_SetConfig+0x1de>
      default:
        pclk = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005784:	231e      	movs	r3, #30
 8005786:	18fb      	adds	r3, r7, r3
 8005788:	2201      	movs	r2, #1
 800578a:	701a      	strb	r2, [r3, #0]
        break;
 800578c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d01e      	beq.n	80057d2 <UART_SetConfig+0x222>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	085a      	lsrs	r2, r3, #1
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	18d2      	adds	r2, r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	0019      	movs	r1, r3
 80057a4:	0010      	movs	r0, r2
 80057a6:	f7fa fcaf 	bl	8000108 <__udivsi3>
 80057aa:	0003      	movs	r3, r0
 80057ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	2b0f      	cmp	r3, #15
 80057b2:	d90a      	bls.n	80057ca <UART_SetConfig+0x21a>
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	2380      	movs	r3, #128	; 0x80
 80057b8:	025b      	lsls	r3, r3, #9
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d205      	bcs.n	80057ca <UART_SetConfig+0x21a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	60da      	str	r2, [r3, #12]
 80057c8:	e003      	b.n	80057d2 <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 80057ca:	231e      	movs	r3, #30
 80057cc:	18fb      	adds	r3, r7, r3
 80057ce:	2201      	movs	r2, #1
 80057d0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80057de:	231e      	movs	r3, #30
 80057e0:	18fb      	adds	r3, r7, r3
 80057e2:	781b      	ldrb	r3, [r3, #0]
}
 80057e4:	0018      	movs	r0, r3
 80057e6:	46bd      	mov	sp, r7
 80057e8:	b008      	add	sp, #32
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	ffff69f3 	.word	0xffff69f3
 80057f0:	ffffcfff 	.word	0xffffcfff
 80057f4:	fffff4ff 	.word	0xfffff4ff
 80057f8:	40021000 	.word	0x40021000
 80057fc:	007a1200 	.word	0x007a1200

08005800 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580c:	2201      	movs	r2, #1
 800580e:	4013      	ands	r3, r2
 8005810:	d00b      	beq.n	800582a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	4a4a      	ldr	r2, [pc, #296]	; (8005944 <UART_AdvFeatureConfig+0x144>)
 800581a:	4013      	ands	r3, r2
 800581c:	0019      	movs	r1, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582e:	2202      	movs	r2, #2
 8005830:	4013      	ands	r3, r2
 8005832:	d00b      	beq.n	800584c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	4a43      	ldr	r2, [pc, #268]	; (8005948 <UART_AdvFeatureConfig+0x148>)
 800583c:	4013      	ands	r3, r2
 800583e:	0019      	movs	r1, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	430a      	orrs	r2, r1
 800584a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005850:	2204      	movs	r2, #4
 8005852:	4013      	ands	r3, r2
 8005854:	d00b      	beq.n	800586e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	4a3b      	ldr	r2, [pc, #236]	; (800594c <UART_AdvFeatureConfig+0x14c>)
 800585e:	4013      	ands	r3, r2
 8005860:	0019      	movs	r1, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	430a      	orrs	r2, r1
 800586c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	2208      	movs	r2, #8
 8005874:	4013      	ands	r3, r2
 8005876:	d00b      	beq.n	8005890 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	4a34      	ldr	r2, [pc, #208]	; (8005950 <UART_AdvFeatureConfig+0x150>)
 8005880:	4013      	ands	r3, r2
 8005882:	0019      	movs	r1, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	430a      	orrs	r2, r1
 800588e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005894:	2210      	movs	r2, #16
 8005896:	4013      	ands	r3, r2
 8005898:	d00b      	beq.n	80058b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	4a2c      	ldr	r2, [pc, #176]	; (8005954 <UART_AdvFeatureConfig+0x154>)
 80058a2:	4013      	ands	r3, r2
 80058a4:	0019      	movs	r1, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	2220      	movs	r2, #32
 80058b8:	4013      	ands	r3, r2
 80058ba:	d00b      	beq.n	80058d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	4a25      	ldr	r2, [pc, #148]	; (8005958 <UART_AdvFeatureConfig+0x158>)
 80058c4:	4013      	ands	r3, r2
 80058c6:	0019      	movs	r1, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d8:	2240      	movs	r2, #64	; 0x40
 80058da:	4013      	ands	r3, r2
 80058dc:	d01d      	beq.n	800591a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	4a1d      	ldr	r2, [pc, #116]	; (800595c <UART_AdvFeatureConfig+0x15c>)
 80058e6:	4013      	ands	r3, r2
 80058e8:	0019      	movs	r1, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058fa:	2380      	movs	r3, #128	; 0x80
 80058fc:	035b      	lsls	r3, r3, #13
 80058fe:	429a      	cmp	r2, r3
 8005900:	d10b      	bne.n	800591a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	4a15      	ldr	r2, [pc, #84]	; (8005960 <UART_AdvFeatureConfig+0x160>)
 800590a:	4013      	ands	r3, r2
 800590c:	0019      	movs	r1, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	2280      	movs	r2, #128	; 0x80
 8005920:	4013      	ands	r3, r2
 8005922:	d00b      	beq.n	800593c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	4a0e      	ldr	r2, [pc, #56]	; (8005964 <UART_AdvFeatureConfig+0x164>)
 800592c:	4013      	ands	r3, r2
 800592e:	0019      	movs	r1, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	605a      	str	r2, [r3, #4]
  }
}
 800593c:	46c0      	nop			; (mov r8, r8)
 800593e:	46bd      	mov	sp, r7
 8005940:	b002      	add	sp, #8
 8005942:	bd80      	pop	{r7, pc}
 8005944:	fffdffff 	.word	0xfffdffff
 8005948:	fffeffff 	.word	0xfffeffff
 800594c:	fffbffff 	.word	0xfffbffff
 8005950:	ffff7fff 	.word	0xffff7fff
 8005954:	ffffefff 	.word	0xffffefff
 8005958:	ffffdfff 	.word	0xffffdfff
 800595c:	ffefffff 	.word	0xffefffff
 8005960:	ff9fffff 	.word	0xff9fffff
 8005964:	fff7ffff 	.word	0xfff7ffff

08005968 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b092      	sub	sp, #72	; 0x48
 800596c:	af02      	add	r7, sp, #8
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2284      	movs	r2, #132	; 0x84
 8005974:	2100      	movs	r1, #0
 8005976:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005978:	f7fd fc3a 	bl	80031f0 <HAL_GetTick>
 800597c:	0003      	movs	r3, r0
 800597e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2208      	movs	r2, #8
 8005988:	4013      	ands	r3, r2
 800598a:	2b08      	cmp	r3, #8
 800598c:	d12c      	bne.n	80059e8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800598e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005990:	2280      	movs	r2, #128	; 0x80
 8005992:	0391      	lsls	r1, r2, #14
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	4a46      	ldr	r2, [pc, #280]	; (8005ab0 <UART_CheckIdleState+0x148>)
 8005998:	9200      	str	r2, [sp, #0]
 800599a:	2200      	movs	r2, #0
 800599c:	f000 f88c 	bl	8005ab8 <UART_WaitOnFlagUntilTimeout>
 80059a0:	1e03      	subs	r3, r0, #0
 80059a2:	d021      	beq.n	80059e8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059a4:	f3ef 8310 	mrs	r3, PRIMASK
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80059ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80059ae:	2301      	movs	r3, #1
 80059b0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b4:	f383 8810 	msr	PRIMASK, r3
}
 80059b8:	46c0      	nop			; (mov r8, r8)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2180      	movs	r1, #128	; 0x80
 80059c6:	438a      	bics	r2, r1
 80059c8:	601a      	str	r2, [r3, #0]
 80059ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d0:	f383 8810 	msr	PRIMASK, r3
}
 80059d4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2220      	movs	r2, #32
 80059da:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2278      	movs	r2, #120	; 0x78
 80059e0:	2100      	movs	r1, #0
 80059e2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e05f      	b.n	8005aa8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2204      	movs	r2, #4
 80059f0:	4013      	ands	r3, r2
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	d146      	bne.n	8005a84 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059f8:	2280      	movs	r2, #128	; 0x80
 80059fa:	03d1      	lsls	r1, r2, #15
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	4a2c      	ldr	r2, [pc, #176]	; (8005ab0 <UART_CheckIdleState+0x148>)
 8005a00:	9200      	str	r2, [sp, #0]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f000 f858 	bl	8005ab8 <UART_WaitOnFlagUntilTimeout>
 8005a08:	1e03      	subs	r3, r0, #0
 8005a0a:	d03b      	beq.n	8005a84 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8005a10:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a12:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a14:	637b      	str	r3, [r7, #52]	; 0x34
 8005a16:	2301      	movs	r3, #1
 8005a18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	f383 8810 	msr	PRIMASK, r3
}
 8005a20:	46c0      	nop			; (mov r8, r8)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4921      	ldr	r1, [pc, #132]	; (8005ab4 <UART_CheckIdleState+0x14c>)
 8005a2e:	400a      	ands	r2, r1
 8005a30:	601a      	str	r2, [r3, #0]
 8005a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f383 8810 	msr	PRIMASK, r3
}
 8005a3c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a3e:	f3ef 8310 	mrs	r3, PRIMASK
 8005a42:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a44:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a46:	633b      	str	r3, [r7, #48]	; 0x30
 8005a48:	2301      	movs	r3, #1
 8005a4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	f383 8810 	msr	PRIMASK, r3
}
 8005a52:	46c0      	nop			; (mov r8, r8)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2101      	movs	r1, #1
 8005a60:	438a      	bics	r2, r1
 8005a62:	609a      	str	r2, [r3, #8]
 8005a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	f383 8810 	msr	PRIMASK, r3
}
 8005a6e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2280      	movs	r2, #128	; 0x80
 8005a74:	2120      	movs	r1, #32
 8005a76:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2278      	movs	r2, #120	; 0x78
 8005a7c:	2100      	movs	r1, #0
 8005a7e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e011      	b.n	8005aa8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2220      	movs	r2, #32
 8005a88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2280      	movs	r2, #128	; 0x80
 8005a8e:	2120      	movs	r1, #32
 8005a90:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2278      	movs	r2, #120	; 0x78
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	0018      	movs	r0, r3
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	b010      	add	sp, #64	; 0x40
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	01ffffff 	.word	0x01ffffff
 8005ab4:	fffffedf 	.word	0xfffffedf

08005ab8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	603b      	str	r3, [r7, #0]
 8005ac4:	1dfb      	adds	r3, r7, #7
 8005ac6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ac8:	e04b      	b.n	8005b62 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	3301      	adds	r3, #1
 8005ace:	d048      	beq.n	8005b62 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ad0:	f7fd fb8e 	bl	80031f0 <HAL_GetTick>
 8005ad4:	0002      	movs	r2, r0
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d302      	bcc.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e04b      	b.n	8005b82 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2204      	movs	r2, #4
 8005af2:	4013      	ands	r3, r2
 8005af4:	d035      	beq.n	8005b62 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69db      	ldr	r3, [r3, #28]
 8005afc:	2208      	movs	r2, #8
 8005afe:	4013      	ands	r3, r2
 8005b00:	2b08      	cmp	r3, #8
 8005b02:	d111      	bne.n	8005b28 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2208      	movs	r2, #8
 8005b0a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	0018      	movs	r0, r3
 8005b10:	f000 f8f2 	bl	8005cf8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2284      	movs	r2, #132	; 0x84
 8005b18:	2108      	movs	r1, #8
 8005b1a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2278      	movs	r2, #120	; 0x78
 8005b20:	2100      	movs	r1, #0
 8005b22:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e02c      	b.n	8005b82 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	69da      	ldr	r2, [r3, #28]
 8005b2e:	2380      	movs	r3, #128	; 0x80
 8005b30:	011b      	lsls	r3, r3, #4
 8005b32:	401a      	ands	r2, r3
 8005b34:	2380      	movs	r3, #128	; 0x80
 8005b36:	011b      	lsls	r3, r3, #4
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d112      	bne.n	8005b62 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2280      	movs	r2, #128	; 0x80
 8005b42:	0112      	lsls	r2, r2, #4
 8005b44:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	0018      	movs	r0, r3
 8005b4a:	f000 f8d5 	bl	8005cf8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2284      	movs	r2, #132	; 0x84
 8005b52:	2120      	movs	r1, #32
 8005b54:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2278      	movs	r2, #120	; 0x78
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e00f      	b.n	8005b82 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69db      	ldr	r3, [r3, #28]
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	425a      	negs	r2, r3
 8005b72:	4153      	adcs	r3, r2
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	001a      	movs	r2, r3
 8005b78:	1dfb      	adds	r3, r7, #7
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d0a4      	beq.n	8005aca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	0018      	movs	r0, r3
 8005b84:	46bd      	mov	sp, r7
 8005b86:	b004      	add	sp, #16
 8005b88:	bd80      	pop	{r7, pc}
	...

08005b8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b090      	sub	sp, #64	; 0x40
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	1dbb      	adds	r3, r7, #6
 8005b98:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	1dba      	adds	r2, r7, #6
 8005ba4:	2158      	movs	r1, #88	; 0x58
 8005ba6:	8812      	ldrh	r2, [r2, #0]
 8005ba8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	1dba      	adds	r2, r7, #6
 8005bae:	215a      	movs	r1, #90	; 0x5a
 8005bb0:	8812      	ldrh	r2, [r2, #0]
 8005bb2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	689a      	ldr	r2, [r3, #8]
 8005bbe:	2380      	movs	r3, #128	; 0x80
 8005bc0:	015b      	lsls	r3, r3, #5
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d10d      	bne.n	8005be2 <UART_Start_Receive_IT+0x56>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d104      	bne.n	8005bd8 <UART_Start_Receive_IT+0x4c>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	225c      	movs	r2, #92	; 0x5c
 8005bd2:	4946      	ldr	r1, [pc, #280]	; (8005cec <UART_Start_Receive_IT+0x160>)
 8005bd4:	5299      	strh	r1, [r3, r2]
 8005bd6:	e01a      	b.n	8005c0e <UART_Start_Receive_IT+0x82>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	225c      	movs	r2, #92	; 0x5c
 8005bdc:	21ff      	movs	r1, #255	; 0xff
 8005bde:	5299      	strh	r1, [r3, r2]
 8005be0:	e015      	b.n	8005c0e <UART_Start_Receive_IT+0x82>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10d      	bne.n	8005c06 <UART_Start_Receive_IT+0x7a>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d104      	bne.n	8005bfc <UART_Start_Receive_IT+0x70>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	225c      	movs	r2, #92	; 0x5c
 8005bf6:	21ff      	movs	r1, #255	; 0xff
 8005bf8:	5299      	strh	r1, [r3, r2]
 8005bfa:	e008      	b.n	8005c0e <UART_Start_Receive_IT+0x82>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	225c      	movs	r2, #92	; 0x5c
 8005c00:	217f      	movs	r1, #127	; 0x7f
 8005c02:	5299      	strh	r1, [r3, r2]
 8005c04:	e003      	b.n	8005c0e <UART_Start_Receive_IT+0x82>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	225c      	movs	r2, #92	; 0x5c
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2284      	movs	r2, #132	; 0x84
 8005c12:	2100      	movs	r1, #0
 8005c14:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2280      	movs	r2, #128	; 0x80
 8005c1a:	2122      	movs	r1, #34	; 0x22
 8005c1c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c1e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c22:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005c24:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c28:	2301      	movs	r3, #1
 8005c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2e:	f383 8810 	msr	PRIMASK, r3
}
 8005c32:	46c0      	nop			; (mov r8, r8)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689a      	ldr	r2, [r3, #8]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2101      	movs	r1, #1
 8005c40:	430a      	orrs	r2, r1
 8005c42:	609a      	str	r2, [r3, #8]
 8005c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c46:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4a:	f383 8810 	msr	PRIMASK, r3
}
 8005c4e:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	2380      	movs	r3, #128	; 0x80
 8005c56:	015b      	lsls	r3, r3, #5
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d107      	bne.n	8005c6c <UART_Start_Receive_IT+0xe0>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d103      	bne.n	8005c6c <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	4a22      	ldr	r2, [pc, #136]	; (8005cf0 <UART_Start_Receive_IT+0x164>)
 8005c68:	669a      	str	r2, [r3, #104]	; 0x68
 8005c6a:	e002      	b.n	8005c72 <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	4a21      	ldr	r2, [pc, #132]	; (8005cf4 <UART_Start_Receive_IT+0x168>)
 8005c70:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d019      	beq.n	8005cae <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c7a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c7e:	61fb      	str	r3, [r7, #28]
  return(result);
 8005c80:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005c82:	637b      	str	r3, [r7, #52]	; 0x34
 8005c84:	2301      	movs	r3, #1
 8005c86:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c88:	6a3b      	ldr	r3, [r7, #32]
 8005c8a:	f383 8810 	msr	PRIMASK, r3
}
 8005c8e:	46c0      	nop			; (mov r8, r8)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2190      	movs	r1, #144	; 0x90
 8005c9c:	0049      	lsls	r1, r1, #1
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	601a      	str	r2, [r3, #0]
 8005ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	f383 8810 	msr	PRIMASK, r3
}
 8005cac:	e018      	b.n	8005ce0 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cae:	f3ef 8310 	mrs	r3, PRIMASK
 8005cb2:	613b      	str	r3, [r7, #16]
  return(result);
 8005cb4:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005cb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cb8:	2301      	movs	r3, #1
 8005cba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f383 8810 	msr	PRIMASK, r3
}
 8005cc2:	46c0      	nop			; (mov r8, r8)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2120      	movs	r1, #32
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	f383 8810 	msr	PRIMASK, r3
}
 8005cde:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	0018      	movs	r0, r3
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	b010      	add	sp, #64	; 0x40
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	46c0      	nop			; (mov r8, r8)
 8005cec:	000001ff 	.word	0x000001ff
 8005cf0:	08005ffd 	.word	0x08005ffd
 8005cf4:	08005e45 	.word	0x08005e45

08005cf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b08e      	sub	sp, #56	; 0x38
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d00:	f3ef 8310 	mrs	r3, PRIMASK
 8005d04:	617b      	str	r3, [r7, #20]
  return(result);
 8005d06:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d08:	637b      	str	r3, [r7, #52]	; 0x34
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	f383 8810 	msr	PRIMASK, r3
}
 8005d14:	46c0      	nop			; (mov r8, r8)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4926      	ldr	r1, [pc, #152]	; (8005dbc <UART_EndRxTransfer+0xc4>)
 8005d22:	400a      	ands	r2, r1
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	f383 8810 	msr	PRIMASK, r3
}
 8005d30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d32:	f3ef 8310 	mrs	r3, PRIMASK
 8005d36:	623b      	str	r3, [r7, #32]
  return(result);
 8005d38:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d3a:	633b      	str	r3, [r7, #48]	; 0x30
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	f383 8810 	msr	PRIMASK, r3
}
 8005d46:	46c0      	nop			; (mov r8, r8)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689a      	ldr	r2, [r3, #8]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2101      	movs	r1, #1
 8005d54:	438a      	bics	r2, r1
 8005d56:	609a      	str	r2, [r3, #8]
 8005d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5e:	f383 8810 	msr	PRIMASK, r3
}
 8005d62:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d118      	bne.n	8005d9e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8005d70:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d72:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d76:	2301      	movs	r3, #1
 8005d78:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f383 8810 	msr	PRIMASK, r3
}
 8005d80:	46c0      	nop			; (mov r8, r8)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2110      	movs	r1, #16
 8005d8e:	438a      	bics	r2, r1
 8005d90:	601a      	str	r2, [r3, #0]
 8005d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	f383 8810 	msr	PRIMASK, r3
}
 8005d9c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2280      	movs	r2, #128	; 0x80
 8005da2:	2120      	movs	r1, #32
 8005da4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005db2:	46c0      	nop			; (mov r8, r8)
 8005db4:	46bd      	mov	sp, r7
 8005db6:	b00e      	add	sp, #56	; 0x38
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	46c0      	nop			; (mov r8, r8)
 8005dbc:	fffffedf 	.word	0xfffffedf

08005dc0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	225a      	movs	r2, #90	; 0x5a
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2252      	movs	r2, #82	; 0x52
 8005dda:	2100      	movs	r1, #0
 8005ddc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	0018      	movs	r0, r3
 8005de2:	f7ff fbd1 	bl	8005588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005de6:	46c0      	nop			; (mov r8, r8)
 8005de8:	46bd      	mov	sp, r7
 8005dea:	b004      	add	sp, #16
 8005dec:	bd80      	pop	{r7, pc}

08005dee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b086      	sub	sp, #24
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005df6:	f3ef 8310 	mrs	r3, PRIMASK
 8005dfa:	60bb      	str	r3, [r7, #8]
  return(result);
 8005dfc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005dfe:	617b      	str	r3, [r7, #20]
 8005e00:	2301      	movs	r3, #1
 8005e02:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f383 8810 	msr	PRIMASK, r3
}
 8005e0a:	46c0      	nop			; (mov r8, r8)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2140      	movs	r1, #64	; 0x40
 8005e18:	438a      	bics	r2, r1
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f383 8810 	msr	PRIMASK, r3
}
 8005e26:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	0018      	movs	r0, r3
 8005e38:	f7ff fb9e 	bl	8005578 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e3c:	46c0      	nop			; (mov r8, r8)
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	b006      	add	sp, #24
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b094      	sub	sp, #80	; 0x50
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005e4c:	204e      	movs	r0, #78	; 0x4e
 8005e4e:	183b      	adds	r3, r7, r0
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	215c      	movs	r1, #92	; 0x5c
 8005e54:	5a52      	ldrh	r2, [r2, r1]
 8005e56:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2280      	movs	r2, #128	; 0x80
 8005e5c:	589b      	ldr	r3, [r3, r2]
 8005e5e:	2b22      	cmp	r3, #34	; 0x22
 8005e60:	d000      	beq.n	8005e64 <UART_RxISR_8BIT+0x20>
 8005e62:	e0ba      	b.n	8005fda <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	214c      	movs	r1, #76	; 0x4c
 8005e6a:	187b      	adds	r3, r7, r1
 8005e6c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8005e6e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005e70:	187b      	adds	r3, r7, r1
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	b2da      	uxtb	r2, r3
 8005e76:	183b      	adds	r3, r7, r0
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	b2d9      	uxtb	r1, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e80:	400a      	ands	r2, r1
 8005e82:	b2d2      	uxtb	r2, r2
 8005e84:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	225a      	movs	r2, #90	; 0x5a
 8005e94:	5a9b      	ldrh	r3, [r3, r2]
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	b299      	uxth	r1, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	225a      	movs	r2, #90	; 0x5a
 8005ea0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	225a      	movs	r2, #90	; 0x5a
 8005ea6:	5a9b      	ldrh	r3, [r3, r2]
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d000      	beq.n	8005eb0 <UART_RxISR_8BIT+0x6c>
 8005eae:	e09c      	b.n	8005fea <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8005eb4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005eba:	2301      	movs	r3, #1
 8005ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec0:	f383 8810 	msr	PRIMASK, r3
}
 8005ec4:	46c0      	nop			; (mov r8, r8)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4948      	ldr	r1, [pc, #288]	; (8005ff4 <UART_RxISR_8BIT+0x1b0>)
 8005ed2:	400a      	ands	r2, r1
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005edc:	f383 8810 	msr	PRIMASK, r3
}
 8005ee0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ee6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eea:	647b      	str	r3, [r7, #68]	; 0x44
 8005eec:	2301      	movs	r3, #1
 8005eee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef2:	f383 8810 	msr	PRIMASK, r3
}
 8005ef6:	46c0      	nop			; (mov r8, r8)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689a      	ldr	r2, [r3, #8]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2101      	movs	r1, #1
 8005f04:	438a      	bics	r2, r1
 8005f06:	609a      	str	r2, [r3, #8]
 8005f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f0a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0e:	f383 8810 	msr	PRIMASK, r3
}
 8005f12:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2280      	movs	r2, #128	; 0x80
 8005f18:	2120      	movs	r1, #32
 8005f1a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	2380      	movs	r3, #128	; 0x80
 8005f30:	041b      	lsls	r3, r3, #16
 8005f32:	4013      	ands	r3, r2
 8005f34:	d018      	beq.n	8005f68 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f36:	f3ef 8310 	mrs	r3, PRIMASK
 8005f3a:	61bb      	str	r3, [r7, #24]
  return(result);
 8005f3c:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f3e:	643b      	str	r3, [r7, #64]	; 0x40
 8005f40:	2301      	movs	r3, #1
 8005f42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	f383 8810 	msr	PRIMASK, r3
}
 8005f4a:	46c0      	nop			; (mov r8, r8)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4928      	ldr	r1, [pc, #160]	; (8005ff8 <UART_RxISR_8BIT+0x1b4>)
 8005f58:	400a      	ands	r2, r1
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f5e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	f383 8810 	msr	PRIMASK, r3
}
 8005f66:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d12f      	bne.n	8005fd0 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f76:	f3ef 8310 	mrs	r3, PRIMASK
 8005f7a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f7c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f80:	2301      	movs	r3, #1
 8005f82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	f383 8810 	msr	PRIMASK, r3
}
 8005f8a:	46c0      	nop			; (mov r8, r8)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2110      	movs	r1, #16
 8005f98:	438a      	bics	r2, r1
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f383 8810 	msr	PRIMASK, r3
}
 8005fa6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	2210      	movs	r2, #16
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	2b10      	cmp	r3, #16
 8005fb4:	d103      	bne.n	8005fbe <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2210      	movs	r2, #16
 8005fbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2258      	movs	r2, #88	; 0x58
 8005fc2:	5a9a      	ldrh	r2, [r3, r2]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	0011      	movs	r1, r2
 8005fc8:	0018      	movs	r0, r3
 8005fca:	f7ff fae5 	bl	8005598 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005fce:	e00c      	b.n	8005fea <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	0018      	movs	r0, r3
 8005fd4:	f7fa f924 	bl	8000220 <HAL_UART_RxCpltCallback>
}
 8005fd8:	e007      	b.n	8005fea <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	699a      	ldr	r2, [r3, #24]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2108      	movs	r1, #8
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	619a      	str	r2, [r3, #24]
}
 8005fea:	46c0      	nop			; (mov r8, r8)
 8005fec:	46bd      	mov	sp, r7
 8005fee:	b014      	add	sp, #80	; 0x50
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	46c0      	nop			; (mov r8, r8)
 8005ff4:	fffffedf 	.word	0xfffffedf
 8005ff8:	fbffffff 	.word	0xfbffffff

08005ffc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b094      	sub	sp, #80	; 0x50
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006004:	204e      	movs	r0, #78	; 0x4e
 8006006:	183b      	adds	r3, r7, r0
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	215c      	movs	r1, #92	; 0x5c
 800600c:	5a52      	ldrh	r2, [r2, r1]
 800600e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2280      	movs	r2, #128	; 0x80
 8006014:	589b      	ldr	r3, [r3, r2]
 8006016:	2b22      	cmp	r3, #34	; 0x22
 8006018:	d000      	beq.n	800601c <UART_RxISR_16BIT+0x20>
 800601a:	e0ba      	b.n	8006192 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	214c      	movs	r1, #76	; 0x4c
 8006022:	187b      	adds	r3, r7, r1
 8006024:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006026:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800602c:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800602e:	187b      	adds	r3, r7, r1
 8006030:	183a      	adds	r2, r7, r0
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	8812      	ldrh	r2, [r2, #0]
 8006036:	4013      	ands	r3, r2
 8006038:	b29a      	uxth	r2, r3
 800603a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800603c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006042:	1c9a      	adds	r2, r3, #2
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	225a      	movs	r2, #90	; 0x5a
 800604c:	5a9b      	ldrh	r3, [r3, r2]
 800604e:	b29b      	uxth	r3, r3
 8006050:	3b01      	subs	r3, #1
 8006052:	b299      	uxth	r1, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	225a      	movs	r2, #90	; 0x5a
 8006058:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	225a      	movs	r2, #90	; 0x5a
 800605e:	5a9b      	ldrh	r3, [r3, r2]
 8006060:	b29b      	uxth	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d000      	beq.n	8006068 <UART_RxISR_16BIT+0x6c>
 8006066:	e09c      	b.n	80061a2 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006068:	f3ef 8310 	mrs	r3, PRIMASK
 800606c:	623b      	str	r3, [r7, #32]
  return(result);
 800606e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006070:	647b      	str	r3, [r7, #68]	; 0x44
 8006072:	2301      	movs	r3, #1
 8006074:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	f383 8810 	msr	PRIMASK, r3
}
 800607c:	46c0      	nop			; (mov r8, r8)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4948      	ldr	r1, [pc, #288]	; (80061ac <UART_RxISR_16BIT+0x1b0>)
 800608a:	400a      	ands	r2, r1
 800608c:	601a      	str	r2, [r3, #0]
 800608e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006090:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006094:	f383 8810 	msr	PRIMASK, r3
}
 8006098:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800609a:	f3ef 8310 	mrs	r3, PRIMASK
 800609e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80060a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a2:	643b      	str	r3, [r7, #64]	; 0x40
 80060a4:	2301      	movs	r3, #1
 80060a6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060aa:	f383 8810 	msr	PRIMASK, r3
}
 80060ae:	46c0      	nop			; (mov r8, r8)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	689a      	ldr	r2, [r3, #8]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2101      	movs	r1, #1
 80060bc:	438a      	bics	r2, r1
 80060be:	609a      	str	r2, [r3, #8]
 80060c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060c2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c6:	f383 8810 	msr	PRIMASK, r3
}
 80060ca:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2280      	movs	r2, #128	; 0x80
 80060d0:	2120      	movs	r1, #32
 80060d2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	2380      	movs	r3, #128	; 0x80
 80060e8:	041b      	lsls	r3, r3, #16
 80060ea:	4013      	ands	r3, r2
 80060ec:	d018      	beq.n	8006120 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060ee:	f3ef 8310 	mrs	r3, PRIMASK
 80060f2:	617b      	str	r3, [r7, #20]
  return(result);
 80060f4:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060f8:	2301      	movs	r3, #1
 80060fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	f383 8810 	msr	PRIMASK, r3
}
 8006102:	46c0      	nop			; (mov r8, r8)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4928      	ldr	r1, [pc, #160]	; (80061b0 <UART_RxISR_16BIT+0x1b4>)
 8006110:	400a      	ands	r2, r1
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006116:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	f383 8810 	msr	PRIMASK, r3
}
 800611e:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006124:	2b01      	cmp	r3, #1
 8006126:	d12f      	bne.n	8006188 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800612e:	f3ef 8310 	mrs	r3, PRIMASK
 8006132:	60bb      	str	r3, [r7, #8]
  return(result);
 8006134:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006136:	63bb      	str	r3, [r7, #56]	; 0x38
 8006138:	2301      	movs	r3, #1
 800613a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f383 8810 	msr	PRIMASK, r3
}
 8006142:	46c0      	nop			; (mov r8, r8)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2110      	movs	r1, #16
 8006150:	438a      	bics	r2, r1
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006156:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f383 8810 	msr	PRIMASK, r3
}
 800615e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	2210      	movs	r2, #16
 8006168:	4013      	ands	r3, r2
 800616a:	2b10      	cmp	r3, #16
 800616c:	d103      	bne.n	8006176 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2210      	movs	r2, #16
 8006174:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2258      	movs	r2, #88	; 0x58
 800617a:	5a9a      	ldrh	r2, [r3, r2]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	0011      	movs	r1, r2
 8006180:	0018      	movs	r0, r3
 8006182:	f7ff fa09 	bl	8005598 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006186:	e00c      	b.n	80061a2 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	0018      	movs	r0, r3
 800618c:	f7fa f848 	bl	8000220 <HAL_UART_RxCpltCallback>
}
 8006190:	e007      	b.n	80061a2 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	699a      	ldr	r2, [r3, #24]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2108      	movs	r1, #8
 800619e:	430a      	orrs	r2, r1
 80061a0:	619a      	str	r2, [r3, #24]
}
 80061a2:	46c0      	nop			; (mov r8, r8)
 80061a4:	46bd      	mov	sp, r7
 80061a6:	b014      	add	sp, #80	; 0x50
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	46c0      	nop			; (mov r8, r8)
 80061ac:	fffffedf 	.word	0xfffffedf
 80061b0:	fbffffff 	.word	0xfbffffff

080061b4 <__libc_init_array>:
 80061b4:	b570      	push	{r4, r5, r6, lr}
 80061b6:	2600      	movs	r6, #0
 80061b8:	4d0c      	ldr	r5, [pc, #48]	; (80061ec <__libc_init_array+0x38>)
 80061ba:	4c0d      	ldr	r4, [pc, #52]	; (80061f0 <__libc_init_array+0x3c>)
 80061bc:	1b64      	subs	r4, r4, r5
 80061be:	10a4      	asrs	r4, r4, #2
 80061c0:	42a6      	cmp	r6, r4
 80061c2:	d109      	bne.n	80061d8 <__libc_init_array+0x24>
 80061c4:	2600      	movs	r6, #0
 80061c6:	f000 f821 	bl	800620c <_init>
 80061ca:	4d0a      	ldr	r5, [pc, #40]	; (80061f4 <__libc_init_array+0x40>)
 80061cc:	4c0a      	ldr	r4, [pc, #40]	; (80061f8 <__libc_init_array+0x44>)
 80061ce:	1b64      	subs	r4, r4, r5
 80061d0:	10a4      	asrs	r4, r4, #2
 80061d2:	42a6      	cmp	r6, r4
 80061d4:	d105      	bne.n	80061e2 <__libc_init_array+0x2e>
 80061d6:	bd70      	pop	{r4, r5, r6, pc}
 80061d8:	00b3      	lsls	r3, r6, #2
 80061da:	58eb      	ldr	r3, [r5, r3]
 80061dc:	4798      	blx	r3
 80061de:	3601      	adds	r6, #1
 80061e0:	e7ee      	b.n	80061c0 <__libc_init_array+0xc>
 80061e2:	00b3      	lsls	r3, r6, #2
 80061e4:	58eb      	ldr	r3, [r5, r3]
 80061e6:	4798      	blx	r3
 80061e8:	3601      	adds	r6, #1
 80061ea:	e7f2      	b.n	80061d2 <__libc_init_array+0x1e>
 80061ec:	0800643c 	.word	0x0800643c
 80061f0:	0800643c 	.word	0x0800643c
 80061f4:	0800643c 	.word	0x0800643c
 80061f8:	08006440 	.word	0x08006440

080061fc <memset>:
 80061fc:	0003      	movs	r3, r0
 80061fe:	1882      	adds	r2, r0, r2
 8006200:	4293      	cmp	r3, r2
 8006202:	d100      	bne.n	8006206 <memset+0xa>
 8006204:	4770      	bx	lr
 8006206:	7019      	strb	r1, [r3, #0]
 8006208:	3301      	adds	r3, #1
 800620a:	e7f9      	b.n	8006200 <memset+0x4>

0800620c <_init>:
 800620c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620e:	46c0      	nop			; (mov r8, r8)
 8006210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006212:	bc08      	pop	{r3}
 8006214:	469e      	mov	lr, r3
 8006216:	4770      	bx	lr

08006218 <_fini>:
 8006218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621a:	46c0      	nop			; (mov r8, r8)
 800621c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800621e:	bc08      	pop	{r3}
 8006220:	469e      	mov	lr, r3
 8006222:	4770      	bx	lr
